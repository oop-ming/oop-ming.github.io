<?xml version="1.0" encoding="utf-8"?>

<instance xmlns="http://www.exelearning.org/content/v0.3" reference="4" version="0.3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.exelearning.org/content/v0.3 content.xsd" class="exe.engine.package.Package">
 <dictionary>
  <string role="key" value="_title"></string>
  <unicode value="Objektorientierte Programmierung Skript"></unicode>
  <string role="key" value="idevices"></string>
  <list></list>
  <string role="key" value="_addAccessibilityToolbar"></string>
  <bool value="0"></bool>
  <string role="key" value="_addPagination"></string>
  <bool value="0"></bool>
  <string role="key" value="_addSearchBox"></string>
  <bool value="0"></bool>
  <string role="key" value="_author"></string>
  <unicode value="Jacqueline Rähse"></unicode>
  <string role="key" value="_backgroundImg"></string>
  <unicode value=""></unicode>
  <string role="key" value="_contextMode"></string>
  <unicode value=""></unicode>
  <string role="key" value="_contextPlace"></string>
  <unicode value=""></unicode>
  <string role="key" value="_description"></string>
  <unicode value="Das Skript zur Lehrveranstaltung Objektorientierte Programmierung im Studiengang Medieningenieur an der Fachhochschule Kiel"></unicode>
  <string role="key" value="_docType"></string>
  <unicode value="HTML5"></unicode>
  <string role="key" value="_exportElp"></string>
  <bool value="0"></bool>
  <string role="key" value="_extraHeadContent"></string>
  <unicode value=""></unicode>
  <string role="key" value="_fieldValidationInfo"></string>
  <dictionary>
   <unicode role="key" value="all"></unicode>
   <dictionary>
    <unicode role="key" value="mandatory_fields"></unicode>
    <list>
     <unicode value="pp_title"></unicode>
     <unicode value="pp_lang"></unicode>
     <unicode value="pp_description"></unicode>
     <unicode value="pp_author"></unicode>
     <unicode value="pp_newlicense"></unicode>
    </list>
   </dictionary>
   <unicode role="key" value="procomun"></unicode>
   <dictionary>
    <unicode role="key" value="mandatory_fields"></unicode>
    <list>
     <unicode value="pp_learningResourceType"></unicode>
    </list>
    <unicode role="key" value="values_from_list"></unicode>
    <dictionary>
     <unicode role="key" value="pp_learningResourceType"></unicode>
     <list>
      <unicode value="master class"></unicode>
      <unicode value="closed exercise or problem"></unicode>
      <unicode value="real project"></unicode>
      <unicode value="didactic game"></unicode>
      <unicode value="webquest"></unicode>
      <unicode value="open problem"></unicode>
      <unicode value="simulation"></unicode>
      <unicode value="questionnaire"></unicode>
      <unicode value="conceptual map"></unicode>
     </list>
    </dictionary>
   </dictionary>
  </dictionary>
  <string role="key" value="_intendedEndUserRoleGroup"></string>
  <bool value="0"></bool>
  <string role="key" value="_intendedEndUserRoleTutor"></string>
  <bool value="0"></bool>
  <string role="key" value="_intendedEndUserRoleType"></string>
  <unicode value=""></unicode>
  <string role="key" value="_isChanged"></string>
  <bool value="0"></bool>
  <string role="key" value="_isTemplate"></string>
  <bool value="0"></bool>
  <string role="key" value="_lang"></string>
  <unicode value="de"></unicode>
  <string role="key" value="_learningResourceType"></string>
  <unicode value=""></unicode>
  <string role="key" value="_levelNames"></string>
  <list>
   <unicode value="Thema"></unicode>
   <unicode value="Abschnitt"></unicode>
   <unicode value="Einheit"></unicode>
  </list>
  <string role="key" value="_name"></string>
  <unicode value="OOP_Skript"></unicode>
  <string role="key" value="_nextIdeviceId"></string>
  <int value="33"></int>
  <string role="key" value="_nextNodeId"></string>
  <int value="23"></int>
  <string role="key" value="_nodeIdDict"></string>
  <dictionary>
   <unicode role="key" value="0"></unicode>
   <instance class="exe.engine.node.Node" reference="3">
    <dictionary>
     <string role="key" value="_title"></string>
     <unicode value="Objektorientierte Programmierung"></unicode>
     <string role="key" value="idevices"></string>
     <list>
      <instance class="exe.engine.jsidevice.JsIdevice" reference="1">
       <dictionary>
        <string role="key" value="_title"></string>
        <unicode value=""></unicode>
        <string role="key" value="_attributes"></string>
        <list>
         <tuple>
          <string value="title"></string>
          <list>
           <string value="Title"></string>
           <int value="0"></int>
           <int value="0"></int>
          </list>
         </tuple>
         <tuple>
          <string value="category"></string>
          <list>
           <string value="Category"></string>
           <int value="0"></int>
           <int value="1"></int>
          </list>
         </tuple>
         <tuple>
          <string value="css-class"></string>
          <list>
           <string value="CSS class"></string>
           <int value="0"></int>
           <int value="2"></int>
          </list>
         </tuple>
         <tuple>
          <string value="icon"></string>
          <list>
           <string value="Icon"></string>
           <int value="0"></int>
           <int value="3"></int>
          </list>
         </tuple>
        </list>
        <string role="key" value="_author"></string>
        <string value=""></string>
        <string role="key" value="_iDeviceDir"></string>
        <string value="text"></string>
        <string role="key" value="_purpose"></string>
        <string value=""></string>
        <string role="key" value="_tip"></string>
        <string value=""></string>
        <string role="key" value="_typeName"></string>
        <unicode value="Text"></unicode>
        <string role="key" value="_valid"></string>
        <bool value="1"></bool>
        <string role="key" value="class_"></string>
        <unicode value="text"></unicode>
        <string role="key" value="edit"></string>
        <bool value="0"></bool>
        <string role="key" value="emphasis"></string>
        <int value="0"></int>
        <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
        <int value="1"></int>
        <string role="key" value="fields"></string>
        <list>
         <instance class="exe.engine.field.TextAreaField" reference="2">
          <dictionary>
           <string role="key" value="_id"></string>
           <unicode value="128_2"></unicode>
           <string role="key" value="_idevice"></string>
           <reference key="1"></reference>
           <string role="key" value="_instruc"></string>
           <string value=""></string>
           <string role="key" value="_name"></string>
           <string value=""></string>
           <string role="key" value="anchor_names"></string>
           <list></list>
           <string role="key" value="anchors_linked_from_fields"></string>
           <dictionary></dictionary>
           <string role="key" value="content_w_resourcePaths"></string>
           <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung – Was ist Objektorientierung?&lt;/h1&gt;
&lt;p&gt;Um die Frage zu klären, was unter objektorientierter Programmierung zu verstehen ist, stellen wir uns zunächst die Frage: Was ist programmieren? Was mache ich eigentlich, wenn ich ein Programm schreibe? Ein Programm ist eine Folge von Anweisungen oder Befehlen, welche das Ziel haben eine Aufgabe zu erfüllen oder ein Problem zu lösen. Nehmen wir das &quot;Programm&quot; einer Waschmaschine. Das besteht in der Regel aus folgenden Teilen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hauptwäsche&lt;/li&gt;
&lt;li&gt;Spülen&lt;/li&gt;
&lt;li&gt;Weichspülen&lt;/li&gt;
&lt;li&gt;Schleudern&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dieses Programm löst das Problem mit der schmutzigen Wäsche - und läuft immer gleich ab. Programmieren bedeutet, das erstellen von solchen Programmen. Dies erfordert eine sehr genaue Beschreibung des Vorgehens in einer Sprache, die der Computer versteht. Die Art und Weise, wie ich diese Beschreibung aufbaue, kann unterschiedlich sein. Zum Beispiel kann ist das Waschprogramm einer Waschmaschine als einen reinen Ablauf von Befehlen beschreiben - so wie es oben in der Liste ist. In diesem Fall hängen diese Befehle &quot;lose im Raum&quot;. Sie gehören nirgendwo dazu. Einfach nur Befehle - ohne Struktur, nur in einer Reihenfolge. Die Objektorientierung macht das anders: In der Objektorientierung gehen wir von tatsächlich existierenden Objekten in der Realität aus und versuchen diese als Ganzes dem Computer zu beschreiben. Das bedeutet in unserem Beispiel, dass wir im Programmcode eine Waschmaschine als Objekt beschreiben. Dieses Objekt hat bestimmte Funktionen, wie z.B. Hauptwäsche, Spülen, etc. So sind diese bisher losen Befehle einem Objekt zugeordnet und unser Programm hat eine leicht nachvollziehbare Struktur.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objektorientierung bedeutet&lt;/strong&gt; in der Informatik, dass ich mich bei der Beschreibung des Vorgehens für mein Programm, &lt;strong&gt;an Objekten und deren Eigenschaften und Funktionen orientiere.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ein weiteres Beispiel: Stell dir vor, du programmierst einen kleinen Roboter. Dieser Roboter kann sich bewegen, macht Geräusche und kann einen Gegenstand aufheben. Um dies in Programmcode umzusetzen hast du bisher eine Reihe von Variablen (z.B. &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;xPosition, yPosition, speed,&lt;/span&gt; ...)  und Funktionen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;(void moveRobot(), void drawRobot(), void playSound(),&lt;/span&gt; ...) verwendet. Dieser Code könnte (vereinfacht) in Processing (Java) so aussehen:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-processing&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;float xPosition = 50; 
float yPosition = 50;
float speed = 2;

void draw() {
  moveRobot(); // Roboter bewegen
  drawRobot(); // Roboter zeichnen
}

void moveRobot() {
   // Etwas Code
}

void drawRobot() {
   // Etwas Code
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nun möchtest du aber einen weiteren Roboter haben. Wie gehst du vor? Ein einfacher Schritt wäre es, die bisher verwendeten Variablen und Funktionen zu kopieren und umzubenennen, z.B. in &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;xPosition2, yPosition2&lt;/span&gt; oder &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;void moveRobot2(),&lt;/span&gt; ... Dieser Schritt würde zwar funktionieren, aber deinen Code auch sehr unübersichtlich und fehleranfällig machen. Vor allem spätestens dann, wenn du auf die Idee kommst noch mehr Roboter zu brauchen. Bei diesem Problem hilft die Objektorientierung. Bisher bestand unser Roboter nur aus &quot;losen&quot; Variablen und Funktionen. In der Objektorierung werden diese Teile in einem Objekt miteinander verbunden. Man spricht in diesem Fall von Daten (z.B. x- und y-Position, Geschwindigkeit, ...) und Verhalten (z.B. bewegen, darstellen, etc.). Daten und Verhalten ergeben zusammen ein Objekt, das in sich geschlossen funktioniert. Wie in unserem Fall ein Roboter. Außerdem können nach dem Bauplan des Objekts, viele weitere Objekte nach demselben Bauplan erstellt werden - ohne Code kopieren zu müssen. Ähnlich, wie in einer Spielzeug-Fabrik, in der jeden Tag tausende identische Roboter hergestellt werden. Alle nach demselben Bauplan, aber als eigenständiges Objekt.&lt;/p&gt;
&lt;h1&gt;Die Notwendigkeit von Objektorientierung&lt;/h1&gt;
&lt;p&gt;In vielen Bereichen – sei es in der Softwareentwicklung, der Elektrotechnik oder in den Medien – stoßen wir auf komplexe Systeme. Je größer das Projekt, der Funktionsumgfang, die Aufgabe, desto wichtiger ist eine klare Strukturierung. Stell dir vor du möchtest einen Kurzfilm drehen. Dazu gehören viele Aufgaben, wie z.B. das Storyboard schreiben, Schaupspieler finden und anleiten, Drehsets organisieren und vorbereiten, Kamera, Ton, Bildbearbeitung, Schnitt, Catering, etc. Keine Person übernimmt in so einem Projekt ALLE Aufgaben. Im Gegeneteil: Stell dir vor, du bist der/die Projektleiterin von diesem Kurzfilm-Projekt. Du möchtest überhaupt nicht wissen, in welchem Winkel genau die Tonangel gehalten werden muss oder ob die Schauspieler per Email oder WhatsApp angefragt werden. Darum kümmern sich die Leute, die für den jeweiligen Bereich verantwortlich sind. Du willst nur Statusberichte erhalten und ein gutes Endergebnis. Einzelne der Bereiche beim Filmdreh müssen miteinander kommunizieren, wie z.B. Kamera und Ton, andere wiederum nicht, wie z.B. Catering. Du als Projektleiter/in bist für diese Struktur verantwortlich und musst diese im Vorfeld aufbauen und organisieren. Schließlich willst du auch vermeiden, dass Aufgaben doppelt oder im schlimmsten Fall gar nicht gemacht werden. Sobald du eine gute Sturktur und ein Team hast, das gut Zusammenarbeitet, ist es auch kein Problem, das Team später zu erweitern (z.B. durch den Bereich Special Effects) oder bei Fehlern herauszufinden, wie es zu diesem Fehler kam und wie man ihn vermeiden kann.&lt;/p&gt;
&lt;p&gt;Genauso kannst du dir das in der Programmierung vorstellen: Um gute Software herzustellen, ist es wichtig, den Code gut zu strukturieren. Bisher haben wir das gemacht, indem wir mehrere Befehle in Funktionen zusammengefasst haben. Hier ist aber noch einiges mehr möglich. Objektorientierte Programmierung liefert ein Konzept, wie Code aufgebaut werden kann, damit eine effiziente, übersichtliche, klar unterteilte und leicht wartbare Sturktur vorliegt. So wird der Code zum Beispiel in Objekten zusammengefasst, die in sich eigenständig agieren können (wie z.B. das Kamerateam). Einzelne Objekte können und müssen untereinander kommunizieren, andere nicht (wie z.B. Ton vs. Catering).&lt;/p&gt;
&lt;p&gt;Indem wir unseren Code nach dem Konzpet der Objektorientierung aufbauen, schaffen wir Code der&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wiederverwendbar,&lt;/li&gt;
&lt;li&gt;einheitlich strukturiert,&lt;/li&gt;
&lt;li&gt;wartbar und&lt;/li&gt;
&lt;li&gt;weniger fehleranfällig&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ist. Objektorientierung ist ein sehr weit verbreitetes Konzept in der Programmierung und gehört damit zu den Grundlagen der Programmierung. Allerdings gibt es auch andere Ansätze.&lt;/p&gt;
&lt;h2&gt;Imperative Programmierung vs. Objektorientierung&lt;/h2&gt;
&lt;p&gt;Die Art und Weise, wie wir im ersten Semester Programme geschrieben haben, lässt sich am ehesten der sogenannten Imperativen Programmierung zuordnen. In der Imperativen Programmierung wird ein Programm als ein Ablauf von Befehlen konzipiert und verläuft meist linear. Außerdem sind Daten und Funktionen getrennt organisiert, wie in unserem Beispiel oben, mit dem Roboter. Dies erinnert an das Backen eines Kuchens nach einem festen Rezept: Schritt für Schritt werden Zutaten vorbereitet, gemischt und gebacken.&lt;/p&gt;
&lt;p&gt;Im Gegensatz dazu steht die objektorientierte Programmierung, bei der Daten und Funktionen in Klassen zusammengefasst werden. Diese Klassen dienen als Baupläne für Objekte. Das Kuchenrezept ist so eine Art Bauplan für ein Kuchen: Wenn du diesem Bauplan folgst, erhältst du am Ende einen Kuchen. Mithilfe einer Klasse (Kuchenrezept) können Objekte (Kuchen) erstellt werden. Das Kuchenrezept verbindet Daten (500g Mehl, 250g Zucker, ...) mit Verhalten/Funktionen (Zutaten mischen, Backen, ...).&lt;/p&gt;
&lt;p&gt;Ein weiterer Punkt, in dem sich imperative Programmierung und Objektorientierte Programmierung unterscheiden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In imperative Programmen gibt es oft viele globale Variablen und Funktionsaufrufe, die forsch durch den Code springen.&lt;/li&gt;
&lt;li&gt;Bei objektorientierten Programmen hingegen ist jedes Objekt für sich verantwortlich, seine eigenen Daten zu verwalten – ähnlich wie der Roboter, der sich selbstständig bewegt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dieser klare Strukturierungsansatz erleichtert nicht nur das Verstehen des Codes, sondern macht ihn auch flexibler für Änderungen und Erweiterungen.&lt;/p&gt;
&lt;h1&gt;Die Grundprinzipien der Objektorientierung&lt;/h1&gt;
&lt;p&gt;Objektorientierte Programmierung beruht auf vier zentralen Prinzipien, die wir anhand alltagstauglicher Beispiele kennenlernen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vererbung: &lt;/strong&gt;Vererbung erlaubt es, aus bestehenden Klassen neue Klassen abzuleiten. Stell dir eine Familie von Tieren vor: Die Klasse &quot;Tier&quot; enthält allgemeine Eigenschaften wie Atmung und Fortpflanzung. Spezifischere Klassen wie &quot;Hund&quot; oder &quot;Vogel&quot; erben diese allgemeinen Merkmale und fügen eigene Eigenschaften hinzu (z. B. Bellen oder Fliegen). Diese Hierarchisierung spart nicht nur Code, sondern ermöglicht auch ein systematisches und nachvollziehbares Design.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kapselung: &lt;/strong&gt;Die Kapselung bewirkt, dass Daten und die dazugehörigen Funktionen innerhalb eines Objekts verborgen bleiben. Ein klassisches Beispiel ist ein Bankkonto. Du siehst nur deinen Kontostand und hast über definierte Funktionen (Einzahlen, Abheben) Zugriff darauf. Die internen Validierungs- und Sicherheitsmechanismen, die den Kontostand vor unautorisierten Änderungen schützen, bleiben verborgen. Dies stellt sicher, dass Daten korrekt und sicher verwaltet werden.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Abstraktion: &lt;/strong&gt;Abstraktion bedeutet, die wesentlichen Eigenschaften eines Objekts herauszufiltern und unwichtige Details zu verbergen. Betrachte einen Fahrkartenautomaten: Für den Nutzer zählt, dass er ein Ticket kaufen kann – er muss sich nicht damit befassen, wie die internen Berechnungen zur Preisermittlung funktionieren. Diese Vereinfachung trägt dazu bei, komplexe Systeme verständlich darzustellen und erleichtert die Programmierung, da nur die relevanten Merkmale modelliert werden.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Polymorphismus: &lt;/strong&gt;Polymorphismus ermöglicht es, dass Objekte unterschiedlicher Klassen auf dieselbe Schnittstelle reagieren können. Ein gutes Beispiel ist ein Zoo, in dem alle Tiere über die Funktionen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;geräuschMachen()&lt;/span&gt; verfügen. Dabei kann ein Hund bellen und ein Vogel zwitschern – beide Funktionsaufrufe werden in ihrem jeweiligen Kontext korrekt ausgeführt. Polymorphismus vereinfacht den Code, da er die Behandlung unterschiedlicher Objekte unter einer gemeinsamen Schnittstelle ermöglicht.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Diese vier Prinzpien werden ausführlich in den folgenden Kapitel ausgeführt und erklärt. An dieser Stelle soll nur ein kurzer Überblick darüber gegeben werden, was objektorientierte Programmierung kann und warum dies wichtig ist.&lt;/p&gt;
&lt;h1&gt;Processing und Objektorientierte Programmierung&lt;/h1&gt;
&lt;p&gt;Auch in Processing sind wir an einigen Stellen bereits Objekten und Klassen begegnet. Das liegt daran, dass Processing auf der Programmiersprach Java basiert und Java eine objektorienterte Sprache ist. Da bedeutet, dass durch die Art und Weise, wie man Code in Java (oder Processing) schreibt, in Teilen schon vorgegeben ist, Klassen und Objekte zu verwenden. Zum Beispiel handelt es sich in Java bei einem Array um ein Objekt. Oder auch der Datentyp PVector ist ein &quot;Objekttyp&quot; - sprich es handelt sich bei einer Variable des Datentyps PVector umd ein Objekt. Das bedeutet: Auch in Processing kann man mit Klassen und Objekten arbeiten.&lt;/p&gt;
&lt;p&gt;Unser &quot;imperativ&quot; programmierter Roboter, würde in Processing als Klasse und Objekt folgendermaßen aussehen:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-processing line-numbers hightlight-19and22and23&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;class Robot { // Eine Klasse mit dem Namen Robot

  // Hier sind unsere &quot;Daten&quot;
  float xPosition = 50;
  float yPosition = 50;
  float speed = 2;
  
  // Hier ist unser &quot;Verhalten&quot;
  void moveRobot() {
    // Etwas Code
  }

  void drawRobot() {
    // Etwas Code
  }
}

// Hier erstellen wir einen Roboter (Objekt) mithilfe des Bauplans (Klasse)
Robot robot = new Robot();

void draw() {
  robot.moveRobot(); // Roboter bewegen
  robot.drawRobot(); // Roboter zeichnen
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Du siehst: Alles, was der Roboter braucht (seine Daten und sein Verhalten) befindet sich innerhalb der Klasse. In Zeile 19 wird ein neuer Roboter erstellt mit dem Schlüsselwort new - das kennen wir aus Processing bereits vor der Deklaration eines Arrays. In Zeile 22 und 23 greifen wir auf die Funktionen (auch Methoden) des Roboters über die Punktnotation zu.&lt;/p&gt;
&lt;p&gt;Wenn wir nun anfangen Klassen und Objekte in Java zu schreiben, wird dies tatsächlich fast genauso aussehen. Da Processing eine vereinfachte Version von Java ist, haben beide viele Gemeinsamkeiten. Im folgenden Kapitel sehen wir uns an, wie man in Java programmiert und wie dies sich von Processing unterscheidet.&lt;/p&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe: Alltagsmodellierung&lt;br /&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Erstelle ein einfaches Konzept für ein Objekt aus deinem Alltag, das sich gut für die objektorientierte Modellierung eignet.&lt;/li&gt;
&lt;li&gt;Überlege, welche Eigenschaften (Attribute) und Funktionen (Methoden) in das Objekt integriert werden können.&lt;/li&gt;
&lt;li&gt;Notiere dein Konzept stichpunktartig.&lt;/li&gt;
&lt;li&gt;Beispiel: Ein „Smartphone“
&lt;ul&gt;
&lt;li&gt;Attribute: Marke, Modell, Betriebssystem, Akkulaufzeit&lt;/li&gt;
&lt;li&gt;Methoden: Anrufen(), NachrichtSenden(), AppStarten()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Was versteht man unter Abstraktion in der objektorientierten Programmierung, und warum ist sie wichtig?&lt;/li&gt;
&lt;li&gt;Erkläre den Unterschied zwischen Kapselung und Vererbung anhand eines praktischen Beispiels aus dem Alltag.&lt;/li&gt;
&lt;li&gt;Wie unterscheidet sich die prozedurale Programmierung von der objektorientierten Herangehensweise?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Objektorientierte Programmierung organisiert den Code in eigenständige Objekte, die Daten und Verhalten bündeln.&lt;/li&gt;
&lt;li&gt;Die vier zentralen Prinzipien sind Abstraktion, Kapselung, Vererbung und Polymorphismus.&lt;/li&gt;
&lt;li&gt;Im Vergleich zur imperativer Programmierung bietet Objektorientierte Programmierung eine bessere Strukturierung und Wiederverwendbarkeit von Code.&lt;/li&gt;
&lt;li&gt;Praktische Beispiele aus dem Alltag (z. B. Auto, Bankkonto, Tiere) helfen, die Konzepte anschaulich zu verstehen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;"></unicode>
           <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
           <int value="4"></int>
           <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
           <int value="2"></int>
           <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
           <int value="3"></int>
           <string role="key" value="htmlTag"></string>
           <string value="div"></string>
           <string role="key" value="images"></string>
           <instance class="exe.engine.galleryidevice.GalleryImages">
            <dictionary>
             <string role="key" value=".listitems"></string>
             <list></list>
             <string role="key" value="idevice"></string>
             <reference key="2"></reference>
            </dictionary>
           </instance>
           <string role="key" value="intlinks_to_anchors"></string>
           <dictionary></dictionary>
           <string role="key" value="nextImageId"></string>
           <int value="0"></int>
           <string role="key" value="parentNode"></string>
           <reference key="3"></reference>
          </dictionary>
         </instance>
        </list>
        <string role="key" value="icon"></string>
        <unicode value=""></unicode>
        <string role="key" value="id"></string>
        <unicode value="13"></unicode>
        <string role="key" value="ideviceCategory"></string>
        <unicode value="Text and Tasks"></unicode>
        <string role="key" value="lastIdevice"></string>
        <bool value="0"></bool>
        <string role="key" value="nextFieldId"></string>
        <int value="3"></int>
        <string role="key" value="originalicon"></string>
        <string value=""></string>
        <string role="key" value="parentNode"></string>
        <reference key="3"></reference>
        <string role="key" value="systemResources"></string>
        <list></list>
        <string role="key" value="undo"></string>
        <bool value="1"></bool>
        <string role="key" value="userResources"></string>
        <list></list>
        <string role="key" value="version"></string>
        <int value="0"></int>
       </dictionary>
      </instance>
     </list>
     <string role="key" value="_id"></string>
     <unicode value="0"></unicode>
     <string role="key" value="_package"></string>
     <reference key="4"></reference>
     <string role="key" value="anchor_fields"></string>
     <list></list>
     <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
     <int value="2"></int>
     <string role="key" value="exportType"></string>
     <string value="website"></string>
     <string role="key" value="last_full_node_path"></string>
     <string value="exe-node:Objektorientierte%20Programmierung"></string>
     <string role="key" value="parent"></string>
     <none></none>
     <string role="key" value="top_anchors_linked_from_fields"></string>
     <list></list>
     <string role="key" value="children"></string>
     <list>
      <instance class="exe.engine.node.Node" reference="16">
       <dictionary>
        <string role="key" value="_title"></string>
        <unicode value="Java "></unicode>
        <string role="key" value="idevices"></string>
        <list></list>
        <string role="key" value="_id"></string>
        <unicode value="2"></unicode>
        <string role="key" value="_package"></string>
        <reference key="4"></reference>
        <string role="key" value="anchor_fields"></string>
        <list></list>
        <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
        <int value="2"></int>
        <string role="key" value="exportType"></string>
        <string value="website"></string>
        <string role="key" value="last_full_node_path"></string>
        <string value="exe-node:Objektorientierte%20Programmierung:Java%20"></string>
        <string role="key" value="parent"></string>
        <reference key="3"></reference>
        <string role="key" value="top_anchors_linked_from_fields"></string>
        <list></list>
        <string role="key" value="children"></string>
        <list>
         <instance class="exe.engine.node.Node" reference="43">
          <dictionary>
           <string role="key" value="_title"></string>
           <unicode value="Erste Schritte in Java"></unicode>
           <string role="key" value="idevices"></string>
           <list>
            <instance class="exe.engine.jsidevice.JsIdevice" reference="5">
             <dictionary>
              <string role="key" value="_title"></string>
              <unicode value=""></unicode>
              <string role="key" value="_attributes"></string>
              <list>
               <tuple>
                <string value="title"></string>
                <list>
                 <string value="Title"></string>
                 <int value="0"></int>
                 <int value="0"></int>
                </list>
               </tuple>
               <tuple>
                <string value="category"></string>
                <list>
                 <string value="Category"></string>
                 <int value="0"></int>
                 <int value="1"></int>
                </list>
               </tuple>
               <tuple>
                <string value="css-class"></string>
                <list>
                 <string value="CSS class"></string>
                 <int value="0"></int>
                 <int value="2"></int>
                </list>
               </tuple>
               <tuple>
                <string value="icon"></string>
                <list>
                 <string value="Icon"></string>
                 <int value="0"></int>
                 <int value="3"></int>
                </list>
               </tuple>
              </list>
              <string role="key" value="_author"></string>
              <string value=""></string>
              <string role="key" value="_iDeviceDir"></string>
              <string value="text"></string>
              <string role="key" value="_purpose"></string>
              <string value=""></string>
              <string role="key" value="_tip"></string>
              <string value=""></string>
              <string role="key" value="_typeName"></string>
              <unicode value="Text"></unicode>
              <string role="key" value="_valid"></string>
              <bool value="1"></bool>
              <string role="key" value="class_"></string>
              <unicode value="text"></unicode>
              <string role="key" value="edit"></string>
              <bool value="0"></bool>
              <string role="key" value="emphasis"></string>
              <int value="0"></int>
              <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
              <int value="1"></int>
              <string role="key" value="fields"></string>
              <list>
               <instance class="exe.engine.field.TextAreaField" reference="6">
                <dictionary>
                 <string role="key" value="_id"></string>
                 <unicode value="129_2"></unicode>
                 <string role="key" value="_idevice"></string>
                 <reference key="5"></reference>
                 <string role="key" value="_instruc"></string>
                 <string value=""></string>
                 <string role="key" value="_name"></string>
                 <string value=""></string>
                 <string role="key" value="anchor_names"></string>
                 <list></list>
                 <string role="key" value="anchors_linked_from_fields"></string>
                 <dictionary></dictionary>
                 <string role="key" value="content_w_resourcePaths"></string>
                 <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung – Der Übergang von Processing zu Java&lt;/h1&gt;
&lt;p&gt;Im ersten Semester hast du bereits mit Processing gearbeitet und grundlegende Programmierkonzepte kennengelernt. Processing basiert auf Java, ist jedoch speziell darauf ausgelegt, kreative und grafische Anwendungen einfach umzusetzen. In diesem Kapitel lernst du, wie du von Processing zu „reinem“ Java übergehst und die Grundlagen der Java-Programmierung meisterst. Außerdem betrachten wir, wie du Processing &quot;in&quot; Java - also einer Java-Entwicklungsumgebung - verwenden kannst und worauf du dabei achten musst.&lt;/p&gt;
&lt;p&gt;Java ist eine der weltweit am häufigsten verwendeten Programmiersprachen. Sie wird in Bereichen wie Webentwicklung, Mobile Apps, Unternehmenssoftware und sogar in eingebetteten Systemen eingesetzt. Der Übergang von Processing zu Java ermöglicht dir nicht nur, komplexere Anwendungen zu entwickeln, sondern auch, deine Programmierkenntnisse auf ein professionelles Niveau zu heben.&lt;/p&gt;
&lt;p&gt;In diesem Abschnitt wirst du lernen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wie du eine Java-Entwicklungsumgebung auf deinem Rechner einrichtest&lt;/li&gt;
&lt;li&gt;Wie du ein erstes, einfaches &quot;Hello World!&quot;-Programm in Java schreibst&lt;/li&gt;
&lt;li&gt;Wie Programme in Java grundlegend aufgebaut sind&lt;/li&gt;
&lt;li&gt;Wie du Processing in der Java-Entwicklungsumgebung nutzen kannst&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Erste Schritte in Java&lt;/h1&gt;
&lt;h2&gt;Einrichtung der Java-Entwicklungsumgebung&lt;/h2&gt;
&lt;p&gt;Um mit Java zu arbeiten, benötigst du eine sogenannte Entwicklungsumgebung. Eine Entwicklungsumgebung ist die Integration von verschiedenen Entwicklungswerkzeugen in ein Hauptprogramm zur effizienten und effektiven Softwareentwicklung. Sie wird oft mit dem englischen Begriff &lt;strong&gt;IDE (Integrated Development Environment)&lt;/strong&gt; abgekürzt.&lt;/p&gt;
&lt;p&gt;Jede Programmiersprache braucht verschiedene Komponente an Entwicklungswerkzeugen, um entwickelt werden zu können. Deswegen redet man auch von einer Entwicklungsumgebung für Java oder für C++ usw. Diese IDEs haben alle verschiedene Bestandteile.&lt;/p&gt;
&lt;p&gt;Der Vorteil von so einer IDE ist, dass du &quot;nur&quot; ein Programm installieren musst und da alles dabei ist, was du brauchst. &lt;em&gt;Nur&lt;/em&gt; steht in diesem Fall in Anführungszeichen, weil beim erstmaligen Installieren einer solchen IDE in der Regel noch ein paar weitere Komponenten installiert werden müssen, die man generell für Java braucht. Wenn du dich aber später für eine andere IDE entscheidest, musst du diese nicht neu installieren.&lt;/p&gt;
&lt;p&gt;Die gängigsten Optionen sind IntelliJ IDEA, Eclipse und VSCode. Für dieses Skript verwenden wir IntelliJ IDEA.&lt;/p&gt;
&lt;p&gt;Schritte zur Einrichtung:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;IntelliJ IDEA installieren&lt;br /&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Lade IntelliJ IDEA (Community Edition) herunter und installiere es. &lt;/li&gt;
&lt;li&gt;Eine Anleitung hierfür findest du unter: &lt;a href=&quot;https://www.jetbrains.com/help/idea/installation-guide.html#standalone_windows&quot;&gt;https://www.jetbrains.com/help/idea/installation-guide.html#standalone_windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java Development Kit (JDK) installieren&lt;/strong&gt; &lt;span style=&quot;font-size: 10pt;&quot;&gt;(du kannst diesen Schritt überspringen, falls du bereits ein JDK installiert hast)&lt;/span&gt;&lt;br /&gt;Hierfür musst du das JDK herunterladen und es dann in IntelliJ verknüpfen. Mit verknüpfen ist gemeint, dass IntelliJ wissen muss, wo das JDK auf deinem Rechner liegt. &lt;br /&gt;Hier hast du mehrere Möglichkeiten.
&lt;ul&gt;
&lt;li&gt;JDK separat herunterladen und im nächsten Schritt in IntelliJ verknüpfen.&lt;/li&gt;
&lt;li&gt;Herunterladen und verknüpfen in einem Schritt direkt über IntelliJ.&lt;/li&gt;
&lt;li&gt;Beide Varianten werden auf der offiziellen Webseite von IntelliJ im Abschnitt &quot;Add global SDK&quot; erklärt: &lt;a href=&quot;https://www.jetbrains.com/help/idea/sdk.html#add_global_sdk&quot;&gt;https://www.jetbrains.com/help/idea/sdk.html#add_global_sdk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Dein erstes „Hello World“-Programm&lt;/h2&gt;
&lt;p&gt;Nun bist du bereit für dein erstes Java-Programm. Ein klassisches Beispiel für den Einstieg in eine neue Programmiersprache ist das „Hello World“-Programm. Es zeigt dir die grundlegende Struktur eines Java-Programms. Wenn du in IntelliJ ein neues Java-Projekt erstellst, ist IntelliJ so freundlich und bietet dir an, dein Projekt mit Beispiel Code und Onboarding Tips zu erstellen. Dies ist gerade am Anfang hilfreich, um eine guten Einstieg in die Arbeit mit Java und IntelliJ zu erhalten. Diese Optionen findest du in dem Dialog, in dem du ein neues Projekt erstellt. Wenn du ein leeres Projekt haben möchstes, kannst du diese beiden Checkboxen auch deaktivieren. Wenn du sie aktiviert lässt, erstellt IntelliJ dein Projekt mit folgendem Code:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;//TIP To Run code, press Shift + F10 or click the Arrow icon in the gutter.
public class Main {
    public static void main(String[] args) {
        //TIP Press Alt + Enter with your caret at the highlighted text
        // to see how IntelliJ IDEA suggests fixing it.
        System.out.printf(&quot;Hello and welcome!&quot;);

        for (int i = 1; i &amp;lt;= 5; i++) {
            //TIP Press Shift + F9 to start debugging your code. We have set one breakpoint
            // for you, but you can always add more by pressing Strg + F8.
            System.out.println(&quot;i = &quot; + i);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Bei diesem Programm handelt es sich um ein klassisches &quot;Hello World!&quot;-Programm. Das ist eine Art Programmier-Standard für Anfänger. Bei einem &quot;Hello World&quot;-Programm geht es darum erfolgreich ein Programm zu erstellen, das in der Regel in der Konsole &quot;Hello World!&quot; ausgibt. Dieses Programm hat zusätzlich noch eine for-Schleife, welche die Zahlen von 1 bis 5 in der Konsole ausgibt.&lt;/p&gt;
&lt;p&gt;Wenn du möchtest, kannst du das Programm einmal starten und testen, ob alles funktioniert. Nutze dafür die Schaltflächen in der IDE oder die Shortcuts, die in den Tips in den Kommentaren erwähnt werden. Die Shortcuts variieren je nach System (Windows, MacOs, Linux) und können auch indiviuell angepasst werden.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Erklärung:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public class Main&lt;/span&gt;: Jede Datei in Java enthält mindestens eine Klasse. Hier heißt die Klasse (meistens) Main.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public static void main(String[] args)&lt;/span&gt;: Dies ist die Hauptmethode, die beim Start des Programms ausgeführt wird.
&lt;ul&gt;
&lt;li&gt;Bisher habe wir in Processing häufig von &lt;em&gt;Funktionen&lt;/em&gt; gesprochen. In Java nennen wir diese &lt;em&gt;Methoden.&lt;/em&gt; Methoden sind Funktionen, die zu einer Klassen gehören. In diesem Fall gehört die Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;main()&lt;/span&gt; zur Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Main.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;In Java beginnen Programme (fast) immer mit der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;main()&lt;/span&gt; Methode in der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Main&lt;/span&gt; Klasse. Das ist so wie in Processing, wo jedes Programm mit &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;setup()&lt;/span&gt; startet.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;System.out.printf(&quot;Hello an Welcome!&quot;)&lt;/span&gt;: Gibt den Text „Hello an Welcome!“ in der Konsole aus.
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;printf()&lt;/span&gt; ist eine Methode, mit der Text in der Konsole ausgegeben und formatiert werden kann. Sie funktioniert wie die Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;String.format()&lt;/span&gt;, welche wir bereits in Processing verwendet haben.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wichtiger Unterschied zu Processing&lt;/strong&gt;: In Java musst du, um in der Konsole etwas printen zu können, immer &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;System.out.&lt;/span&gt; vor den jeweiligen print-Befehl schreiben. Weiter unten im Programm siehst du auch die Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;println()&lt;/span&gt;, die wir bereits aus Processing kennen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Du siehst: Ein paar Dinge sind in Java anders, vieles ist aber auch gleich. Neu sind zum Beispiel der Aufbau &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;(Main&lt;/span&gt; Klasse und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;main&lt;/span&gt;-Methode), einige Schlüsselwörter (wie z.B. &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;static)&lt;/span&gt; und etwas andere Befehle (&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;System.out.println()&lt;/span&gt;). Gleich ist aber der grundlegende Syntax (geschweifte Klammern, Semikolon am Ende, Aufbau von Funktionen/Methoden und Schleifen, ...) und die meisten Schlüsselwörter &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;(void, for, println,&lt;/span&gt; ...)&lt;/p&gt;
&lt;p&gt;In Processing wäre so ein Programm deutlich einfacher gewesen. Du hättest einfach&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt; println(&quot;Hello an Welcome!&quot;);&lt;/span&gt; geschreiben und die for-Schleife angelegt. In Java ist die Struktur strenger: Du musst Klassen und Methoden definieren, damit dein Programm funktioniert. Aus diesem Grund ist Processing anfängerfreundlich, weil es an einigen Stellen die etwas umständliche Struktur von Java wegnimmt.&lt;/p&gt;
&lt;h2&gt;Processing in der Java IDE&lt;/h2&gt;
&lt;p&gt;Da Processing eine (anfängerfreundliche) Version von Java ist, kann man Processing Code auch in Java schreiben - wenn man ein paar Einstellungen in der IDE vornimmt. In diesem Modul legen wir den Schwerpunkt auf der Arbeit mit Java, allerdings machen wir uns eine Sache von Processing zu Nutzen: &lt;em&gt;Die grafische Ausgabe.&lt;/em&gt; Das ist mit Java nämlich so einfach nicht möglich. Aus diesem Grund möchten wir Processing in unser Java-Projekt integrieren und dafür nutzen die grafische Ausgabe zu erstellen. Das Hauptprogramm soll aber in Java geschrieben werden. In diesem Abschnitt gehen wir di einzelnen Schritte durch, die du gehen musst, um Processing in IntelliJ einzurichten.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Schritt 1:&lt;/strong&gt; Processing installieren und mit IntelliJ verknüpfen&lt;/p&gt;
&lt;p&gt;Installiere dir Processing von &lt;a href=&quot;http://www.processing.org,&quot;&gt;www.processing.org,&lt;/a&gt; falls du dies noch nicht getan haben solltest. Danach öffnest du das Java-Projekt, zu dem du Processing hinzufügen möchtest oder erstellst ein neues Projekt. Dann öffnest du die Modul Einstellung (&quot;Open Module Settings&quot;) indem du in der linken Spate deines Projekt mit der rechten Maustaste auf den Projektordner (ganz oben) klickst. Es öffnet sich dann ein Kontext-Menü, in dem du fast ganz unten den Punkt &quot;Open Module Settings&quot; findest.&lt;/p&gt;
&lt;p&gt;Nun offnet sich ein Fenster mit dem Titel &quot;Project Structure&quot;. Im rechten Bereich kannst du diverse Einstellungen für Module vornehmen. Achte darauf, dass du dich im Tab &quot;Dependencies&quot; (Abhängigkeiten) befindest. In der Tabelle siehst du links oben ein Plus-Icon. Klicke auf das Icon, um eine neue Abhängigkeit hinzuzufügen. Wähle in dem Kontextmenü den Punkt &quot;JAR or Directories&quot;. Daraufhin öffnet sich ein Fenster, indem du die Dateien und Ordner auf deinem Rechner siehst. Hier musst du den Pfad zu der Datei &quot;core.jar&quot; angeben, die sich in deinem Processing-Ordner befindet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;resources/open_module_settings.png&quot; title=&quot;Modul Einstellungen öffnen&quot; width=&quot;641&quot; height=&quot;754&quot; /&gt; &lt;img src=&quot;resources/add_jar.png&quot; alt=&quot;&quot; title=&quot;Jar-Datei hinzufügen&quot; width=&quot;794&quot; height=&quot;428&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wo genau finde ich diese &quot;core.jar&quot;-Datei?&lt;/strong&gt; Da Processing kein Programm ist, das man installiert, sondern in der Regeln einfach nur runterlädt, kann dein Processing Ordner theoretisch überall sein, wie z.B. in deinem Downloads-Ordner, wenn du Proessing nach dem Download dort liegen lassen hast. Es ist allerdings durchaus sinnvoll Processing nicht im Downloads-Ordner, auf dem Desktop oder sonst zu wo liegen zu haben. Überlege dir einen sinnvollen Ort auf deinem Rechner. Für Windows Nutzer bietet sich z.B. der Programme-Order unter &quot;Dieser PC&quot; an. Je nachdem, welche Version von Processing du hast, hat dieser Ordner einen Namen wie &quot;processing-4.3&quot;. Verwechsle ihn nicht mit dem Ordner &quot;Processing&quot;. Dies ist ein Ordner, den Processing für dich erstellt und in dem alle deine Sketches gespeichtert sind. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wenn du im &quot;richtigen&quot; Processing-Ordner bist, findest du deine core.jar-Datei unter core/library/core.jar.&lt;/li&gt;
&lt;li&gt;Hinweise: IntelliJ braucht nur die Datei core.jar. Das bedeutet, dass es theoretisch auch möglich ist, die Datei in den Ordner zu kopieren, wo all deine IntelliJ-Projekte gespeichert sind, damit du sie in Zukunft schneller findest, dann: Diese Verknüpfung musst du für jedes Java-Projkt vornehmen, das Processing verwenden soll.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Schritt 2:&lt;/strong&gt; Processing im Code importieren&lt;/p&gt;
&lt;p&gt;Damit du das Grafikfenster erhältst und Processing-Befehle nutzen kannst fehlen nur noch ein paar Schritte. Als erstes musst du eine neue Klasse mit dem Namen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; erstellen (theoretisch kannst du auch jeden anderen Namen wählen, in dieser Anleitung nutzen wir aber den Namen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window).&lt;/span&gt; Das machst du, indem du in der linken Spalte in deinem Projekt den Ordner mit dem Namen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;src&lt;/span&gt; suchst. In diesem Ordner befindet sich aller Code, den du für dein Projekt erstellt. Klicke den Ordner mit der rechten Maustaste an. Es öffnet sich ein Kontextmenü, in der ganz oben die Option &quot;New&quot; steht. Wähle &quot;New&quot; und dann im nächsten Menü die Option &quot;Java Class&quot;. Im nächsten Schritt kannst du den Namen für deine Klasse festlegen. IntelliJ erstellt dann eine Datei namens &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window.java&lt;/span&gt; mit folgendem Code:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Window {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Wichtig:&lt;/strong&gt; Die Datei und die Klasse müssen gleich heißen. Falls du dich also vertippt hast und deine Klasse umbenennen willst, musst du den Namen der Klasse und den Namen der Datei anpassen. Mehr dazu im Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Klassen%20und%20Objekte#auto_top&quot;&gt;Klassen und Objekte&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Den Code in der Datei &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window.java&lt;/span&gt; tauschst du nun durch folgenden Code aus:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import processing.core.PApplet; // importiert die Processing Bibliothek

// Die von unser erstellte Klasse Window erbt Eigenschaften von der Klasse PApplet
public class Window extends PApplet {

    @Override
    public void settings () { // Diese Methode entspricht void setup()

    }

    @Override
    public void draw () { // Diese Methode entspricht void draw()

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Erklärung:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In der ersten Zeile wird die Processing Bibliothek importiert. Das kennen wir bereits von Processing.&lt;/li&gt;
&lt;li&gt;In Zeile 4 haben wir unsere Klasse ergänzt durch den Teil &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;extends PApplet&lt;/span&gt;. Das bedeutet, dass unsere Klasse jetzt Eigenschaften von der Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; (also von Processing) erbt. Was &quot;erben&quot; genau bedeutet schauen wir uns im Kapitel &quot;Vererbung&quot; an. Du musst aktuell nur wissen: &lt;em&gt;Innerhalb&lt;/em&gt; der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; Klasse kannst du ganz normalen Processing Code schreiben, so wie du es bisher gewohnt warst.&lt;/li&gt;
&lt;li&gt;In Zeile 7 und Zeile 8 werden 2 wichtige Methoden definiert: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;settings()&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;draw()&lt;/span&gt;. Sie entsprechen den Funktionen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;setup()&lt;/span&gt; und&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt; draw()&lt;/span&gt; in Processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jetzt wo wir unsere &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; Klasse erstellt haben, fehlt ein letzter Schritt: Wir müssen unser &quot;Fenster&quot; noch in der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;main&lt;/span&gt;-Methode (dort, wo unser Java-Programm startet) aufrufen. Das machst du, indem du deine &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;main&lt;/span&gt;-Methode um 2 wichtige Zeilen ergänzt:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-1and8&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import processing.core.PApplet;

public class Main {
    public static void main(String[] args) {

        // Öffnet das Grafikfenster von Processing und führt
        // den Code in der Window Klasse aus
        PApplet.main(&quot;Window&quot;);

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Erklärung:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Zeile 1 haben wir wieder den &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;import&lt;/span&gt;-Befehl, den wir auch in &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window.java&lt;/span&gt; verwendet haben. Wichtig: In Java müssen Bibliotheken in &lt;em&gt;jeder&lt;/em&gt; Datei importiert werden, welche diese Bibliothek nutzt.&lt;/li&gt;
&lt;li&gt;In Zeile 8 rufen wir unsere &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt;-Klasse auf und führen den Code darin aus.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Schritt 3&lt;/strong&gt;: Programm starten und Run Configuration festlegen&lt;/p&gt;
&lt;p&gt;Jetzt wollen wir unser Programm starten. Hierbei gibt es eine Sache zu beachten: Wenn du oben auf das Pfeil-Icon klickst, um dein Programm auszuführen, wird immer standardmäßig die Datei ausgeführt, welche du gerade ausgewählt hast. Da dein Programm aber nur mit der main-Methode in der Main Klasse starten kann, hast du 2 Möglichkeiten. Entweder du wählst jedes Mal bevor du dein Programm starten willst, die Main Klasse aus (was ziemlich umständlich ist) ODER erstellst eine sogenannte &quot;Run Configuration&quot;, welche dir diesen Schritt erspart. Um eine Run Configuration zu erstellen gehst du folgendermaßen vor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Links neben dem &quot;Run&quot;-Pfeil findest du ein Dropdown-Menü indem steht &quot;Current File&quot; (was bedeutet, dass immer die aktuelle Datei ausgeführt wird). Klicke auf Current File, damit sich das Dropdown Menü öffnet und wähle den Punkt &quot;Edit Configurations&quot;.&lt;/li&gt;
&lt;li&gt;In dem Fenster, das sich öffnet steht links in der Spalte &quot;Add new ...&quot; und rechts in dem großen Bereich &quot;Add new run configuration&quot;. Klicke auf eine der beiden Optionen (beide führen dieselbe Aktion aus). Wenn du eine der Optionen anklickst, öffnet sich ein Dropdown-Menü, in dem du die oberste Option &quot;Application&quot; auswählst.&lt;/li&gt;
&lt;li&gt;Im rechten Bereich kannst du nun deine Konfiguration erstellen. Ganz oben kannst du einen Namen festlegen (z.B. Main oder Start oder ...). Darunter Findest du den Abschnit Build an Run und in der rechten Hälfte der ersten Zeile kannst du die Klasse angeben, die in dieser Run Configuration ausgeührt werden soll. Dieses Feld sollte rot umrandet sein und den Platzhaltertext &quot;Main class&quot; enthalten. Trage hier &quot;Main&quot; ein. Jetzt klickst du unten aus Ok und das Fenster schließt sich.&lt;/li&gt;
&lt;li&gt;Oben in den Dropdown-Menü neben dem Run-Pfeil sollte nun deine Run Configuration ausgewählt sein. Überprüfe dies, indem du auf den Dropdown-Menü klickst. Nun solltest du wählen können zwischen &quot;Current File&quot; und dem Namen deiner Run Configuration. Wenn deine Run Configuration ausgewählt ist, bedeutet dies, dass immer die main-Methode ausgeführt wird, wenn du auf den Pfeil klickst, egal welche Datei du gerade ausgewählt hast.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Teste deine Run Configuration und dein Programm, indem du in Processing etwas zeichnest, zum Beispiel ein Rechteck mit dem Text &quot;Hello World!&quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Die Autoformatierung findest du in IntelliJ an zwei Stellen: Entweder indem du auf deine Date mit der rechten Maustaste klickst und dort Reformat Code wähst oder über das &lt;strong&gt;Hauptmenü&lt;/strong&gt; (☰ oben links)&lt;strong&gt; &amp;gt; Code &amp;gt; Reformat Code. &lt;/strong&gt;In diesem Menü findest du auch noch weitere hilfreiche optionen, wie z.B. Auto Kommentare oder Auto-Einrückungen.&lt;/p&gt;
&lt;h1&gt;Praxis: Lerne die Entwicklungsumgebung kennen&lt;/h1&gt;
&lt;p&gt;Die Entwicklungsumgebung (IDE) ist ein unglaublich starkes Werkzeug, welches dir - wenn du sie beherrschst - das Programmieren deutlich einfacher und effizienter macht. Das bedeutet: Je besser du dich mit deiner Entwicklungsumgebung auskennst, desto besser und schneller wirst du am Ende programmieren. In diesem Skript ist es nicht möglich auf alle Einzelheiten von IntelliJ einzugehen. Aus diesem Grund ist es sinnvoll, dass du dich selber mit IntelliJ und seinen Funktionen beschäftigst.&lt;/p&gt;
&lt;p&gt;IntelliJ bietet dir ein sehr umfassendes in IntelliJ eingebautes Tutorial, welches ich nur wärmstens empfehlen kann. Das Tutorial besteht aus mehreren Kapiteln, welche du Schritt für Schritt durchgehen kannst und auch zu einen späteren Zeitpunkt weitermachen kannst. Um das Tutorial in IntelliJ durchführen zu können musst du folgendes tun:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stelle sicher, dass das IDE Features Trainer Plugin installiert ist.
&lt;ul&gt;
&lt;li&gt;Dies kannst du überprüfen, indem du über &lt;strong&gt;File &amp;gt; Settings &amp;gt; Plugins&lt;/strong&gt; schaust, ob der&lt;strong&gt; IDE Features Trainer&lt;/strong&gt; installiert ist. Wenn das Plugin nicht installiert ist, installiere es.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nun kannst du über den Willkommen Bildschirm von IntelliJ den Features Trainer starten
&lt;ul&gt;
&lt;li&gt;Der Willkommens Bildschirm wird standardmäßig nur beim ersten öffnen von IntelliJ gezeigt. Sobald du ein Projekt erstellt hast, wird immer das zuletzt geöffnete Projekt geöffnet, wenn du IntelliJ startest.&lt;/li&gt;
&lt;li&gt;Um den Willkommen Bildschirm erneut anzuzeigen, musst du das aktuelle Projekt (bzw. alle aktuellen Projekte) schließen. Das machst du über &lt;strong&gt;☰ &amp;gt; File &amp;gt; Close Project&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Auf dem Willkommen Bildschirm wählst du links &lt;strong&gt;&quot;Learn&quot;&lt;/strong&gt; aus und klickst dann unter &lt;strong&gt;&quot;Learn&lt;/strong&gt; &lt;strong&gt;IDE Features&quot;&lt;/strong&gt; auf &lt;strong&gt;&quot;Start&lt;/strong&gt; &lt;strong&gt;Learning&quot;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Erstelle ein Hello World-Programm in Java (ohne den Beispiel-Code von IntelliJ)&lt;/li&gt;
&lt;li&gt;Erstelle ein Hello World-Programm in Java mit Processing. Zeichne im Grafikfenster eine beliebige Länderflagge.&lt;/li&gt;
&lt;li&gt;Starte den IDE Features Trainer und mache alle Lektionen, bis auf die letzte (Git).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Wofür wird die Methode main() in einem Java-Programm verwendet?&lt;/li&gt;
&lt;li&gt;Nenne drei Unterschiede zwischen Processing und Java.&lt;/li&gt;
&lt;li&gt;Was ist eine Run Configuration und wofür wird sei gebraucht?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bevor man ein Programm in Java programmieren und kompilieren kann, muss man eine Java-Entwickungsumgebung (IDE) einrichten und das Java Development Kit (JDK) installieren&lt;/li&gt;
&lt;li&gt;Java ist eine objektorientierte Programmiersprache mit strengerer Syntax als Processing.&lt;/li&gt;
&lt;li&gt;Ein Programm besteht aus Klassen und Methoden; die Hauptmethode heißt main(). Hier startet das Programm.&lt;/li&gt;
&lt;li&gt;Das „Hello World“-Programm zeigt die grundlegende Struktur eines Java-Codes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                 <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                 <int value="4"></int>
                 <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                 <int value="2"></int>
                 <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                 <int value="3"></int>
                 <string role="key" value="htmlTag"></string>
                 <string value="div"></string>
                 <string role="key" value="images"></string>
                 <instance class="exe.engine.galleryidevice.GalleryImages">
                  <dictionary>
                   <string role="key" value=".listitems"></string>
                   <list>
                    <instance class="exe.engine.galleryidevice.GalleryImage">
                     <dictionary>
                      <string role="key" value="_caption"></string>
                      <instance class="exe.engine.field.TextField">
                       <dictionary>
                        <string role="key" value="_id"></string>
                        <int value="306"></int>
                        <string role="key" value="_idevice"></string>
                        <none></none>
                        <string role="key" value="_instruc"></string>
                        <string value=""></string>
                        <string role="key" value="_name"></string>
                        <string value=""></string>
                        <string role="key" value="content"></string>
                        <string value=""></string>
                        <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                        <int value="4"></int>
                       </dictionary>
                      </instance>
                      <string role="key" value="_id"></string>
                      <unicode value="14_129_2.41"></unicode>
                      <string role="key" value="_imageResource"></string>
                      <instance class="exe.engine.resource.Resource" reference="45">
                       <dictionary>
                        <string role="key" value="_idevice"></string>
                        <reference key="5"></reference>
                        <string role="key" value="_package"></string>
                        <reference key="4"></reference>
                        <string role="key" value="_storageName"></string>
                        <string value="add_jar.png"></string>
                        <string role="key" value="_userName"></string>
                        <string value="c:\\users\\jdittrib\\appdata\\local\\temp\\tmp3iv5m_\\add_jar.png"></string>
                        <string role="key" value="checksum"></string>
                        <string value="6223868330388650cebfa7b04d03fdc2"></string>
                        <string role="key" value="exe.engine.resource.Resource.persistenceVersion"></string>
                        <int value="2"></int>
                        <string role="key" value="exe.engine.resource._Resource.persistenceVersion"></string>
                        <int value="2"></int>
                        <string role="key" value="warningMsg"></string>
                        <string value=""></string>
                       </dictionary>
                      </instance>
                      <string role="key" value="_parent"></string>
                      <reference key="6"></reference>
                      <string role="key" value="_thumbnailResource"></string>
                      <none></none>
                      <string role="key" value="exe.engine.galleryidevice.GalleryImage.persistenceVersion"></string>
                      <int value="3"></int>
                      <string role="key" value="makeThumbnail"></string>
                      <bool value="0"></bool>
                     </dictionary>
                    </instance>
                    <instance class="exe.engine.galleryidevice.GalleryImage">
                     <dictionary>
                      <string role="key" value="_caption"></string>
                      <instance class="exe.engine.field.TextField">
                       <dictionary>
                        <string role="key" value="_id"></string>
                        <int value="310"></int>
                        <string role="key" value="_idevice"></string>
                        <none></none>
                        <string role="key" value="_instruc"></string>
                        <string value=""></string>
                        <string role="key" value="_name"></string>
                        <string value=""></string>
                        <string role="key" value="content"></string>
                        <string value=""></string>
                        <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                        <int value="4"></int>
                       </dictionary>
                      </instance>
                      <string role="key" value="_id"></string>
                      <unicode value="14_129_2.42"></unicode>
                      <string role="key" value="_imageResource"></string>
                      <instance class="exe.engine.resource.Resource" reference="46">
                       <dictionary>
                        <string role="key" value="_idevice"></string>
                        <reference key="5"></reference>
                        <string role="key" value="_package"></string>
                        <reference key="4"></reference>
                        <string role="key" value="_storageName"></string>
                        <string value="open_module_settings.png"></string>
                        <string role="key" value="_userName"></string>
                        <string value="c:\\users\\jdittrib\\appdata\\local\\temp\\tmp3iv5m_\\open_module_settings.png"></string>
                        <string role="key" value="checksum"></string>
                        <string value="749e23d9d9de65b7413b560ab94fac35"></string>
                        <string role="key" value="exe.engine.resource.Resource.persistenceVersion"></string>
                        <int value="2"></int>
                        <string role="key" value="exe.engine.resource._Resource.persistenceVersion"></string>
                        <int value="2"></int>
                        <string role="key" value="warningMsg"></string>
                        <string value=""></string>
                       </dictionary>
                      </instance>
                      <string role="key" value="_parent"></string>
                      <reference key="6"></reference>
                      <string role="key" value="_thumbnailResource"></string>
                      <none></none>
                      <string role="key" value="exe.engine.galleryidevice.GalleryImage.persistenceVersion"></string>
                      <int value="3"></int>
                      <string role="key" value="makeThumbnail"></string>
                      <bool value="0"></bool>
                     </dictionary>
                    </instance>
                   </list>
                   <string role="key" value="idevice"></string>
                   <reference key="6"></reference>
                  </dictionary>
                 </instance>
                 <string role="key" value="intlinks_to_anchors"></string>
                 <dictionary>
                  <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Klassen%20und%20Objekte#auto_top"></unicode>
                  <instance class="exe.engine.node.Node" reference="9">
                   <dictionary>
                    <string role="key" value="_title"></string>
                    <unicode value="Klassen und Objekte"></unicode>
                    <string role="key" value="idevices"></string>
                    <list>
                     <instance class="exe.engine.jsidevice.JsIdevice" reference="7">
                      <dictionary>
                       <string role="key" value="_title"></string>
                       <unicode value=""></unicode>
                       <string role="key" value="_attributes"></string>
                       <list>
                        <tuple>
                         <string value="title"></string>
                         <list>
                          <string value="Title"></string>
                          <int value="0"></int>
                          <int value="0"></int>
                         </list>
                        </tuple>
                        <tuple>
                         <string value="category"></string>
                         <list>
                          <string value="Category"></string>
                          <int value="0"></int>
                          <int value="1"></int>
                         </list>
                        </tuple>
                        <tuple>
                         <string value="css-class"></string>
                         <list>
                          <string value="CSS class"></string>
                          <int value="0"></int>
                          <int value="2"></int>
                         </list>
                        </tuple>
                        <tuple>
                         <string value="icon"></string>
                         <list>
                          <string value="Icon"></string>
                          <int value="0"></int>
                          <int value="3"></int>
                         </list>
                        </tuple>
                       </list>
                       <string role="key" value="_author"></string>
                       <string value=""></string>
                       <string role="key" value="_iDeviceDir"></string>
                       <string value="text"></string>
                       <string role="key" value="_purpose"></string>
                       <string value=""></string>
                       <string role="key" value="_tip"></string>
                       <string value=""></string>
                       <string role="key" value="_typeName"></string>
                       <unicode value="Text"></unicode>
                       <string role="key" value="_valid"></string>
                       <bool value="1"></bool>
                       <string role="key" value="class_"></string>
                       <unicode value="text"></unicode>
                       <string role="key" value="edit"></string>
                       <bool value="0"></bool>
                       <string role="key" value="emphasis"></string>
                       <int value="0"></int>
                       <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                       <int value="1"></int>
                       <string role="key" value="fields"></string>
                       <list>
                        <instance class="exe.engine.field.TextAreaField" reference="8">
                         <dictionary>
                          <string role="key" value="_id"></string>
                          <unicode value="130_2"></unicode>
                          <string role="key" value="_idevice"></string>
                          <reference key="7"></reference>
                          <string role="key" value="_instruc"></string>
                          <string value=""></string>
                          <string role="key" value="_name"></string>
                          <string value=""></string>
                          <string role="key" value="anchor_names"></string>
                          <list></list>
                          <string role="key" value="anchors_linked_from_fields"></string>
                          <dictionary></dictionary>
                          <string role="key" value="content_w_resourcePaths"></string>
                          <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung – Von Bauplänen zu realen Objekten&lt;/h1&gt;
&lt;p&gt;Stell dir vor, du möchtest ein individuelles Auto bauen. Du hast einen exakten Bauplan, der alle Komponenten des Autos beschreibt – Motor, Karosserie, Räder und Innenausstattung. Dieser Bauplan enthält alle Informationen, die du benötigst, um ein Auto zu produzieren, jedoch ist er selbst noch kein fahrbares Fahrzeug. In der objektorientierten Programmierung (OOP) entspricht dieser Bauplan einer Klasse.&lt;/p&gt;
&lt;p&gt;Einmal erstellt, kannst du anhand dieses Bauplans beliebig viele Autos (Objekte) fertigen – jedes Auto wird zwar nach demselben Konzept gebaut, besitzt jedoch seine eigenen Eigenschaften (z. B. Farbe, Baujahr) und verhält sich in bestimmten Situationen individuell. Genau so verhält es sich in der OOP: Eine Klasse definiert die Struktur und das Verhalten (Methoden), während Objekte konkrete Instanzen dieser Klasse sind. Diese Metapher – vom abstrakten Bauplan zum realen Produkt – soll dir helfen, den grundlegenden Zusammenhang zwischen Klassen und Objekten zu verstehen.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel wirst du lernen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Was Klassen und Objekte sind&lt;/li&gt;
&lt;li&gt;Wie du Klassen erstellst und Objekte instanziierst&lt;/li&gt;
&lt;li&gt;Welche Rolle Attribute, Methoden und Konstruktoren spielen&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Definition von Klassen&lt;/h1&gt;
&lt;p&gt;In Java beschreibt eine Klasse den Bauplan eines Datentyps. Eine Klasse enthält:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Attribute&lt;/strong&gt; &lt;strong&gt;(Felder)&lt;/strong&gt;: Diese speichern den Zustand eines Objekts in Form von &lt;em&gt;Daten.&lt;/em&gt; 
&lt;ul&gt;
&lt;li&gt;Bei einem Auto könnten das z. B. die Marke, das Modell und das Baujahr sein.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methoden&lt;/strong&gt;: Diese definieren das &lt;em&gt;Verhalten,&lt;/em&gt; das Objekte ausführen können. 
&lt;ul&gt;
&lt;li&gt;Bei einem Auto könnte z. B. eine Methode zum Starten des Motors oder Bremsen gedacht sein.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Konstruktor(en)&lt;/strong&gt;: Der Konsturktor wird aufgrufen, wenn du basierend auf einer Klasse ein Objekt erstellen möchstest und definiert, was genau bei der Erstellung des Objekt passiert.
&lt;ul&gt;
&lt;li&gt;Bei einem Auto werden bei der Erstellung z.B. Marke, Modell und Baujahr festgelegt.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die Definition einer Klasse legt also nicht nur fest, wie ein Objekt aussieht, sondern auch, welche Aktionen mit ihm ausgeführt werden können. Hier ein einfaches Beispiel einer Klasse „Auto“:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Auto {
   // Attribute – der Zustand eines Autos
   private String marke;
   private String modell;
   private int baujahr;

   // Konstruktor: Erzeugt ein neues Auto-Objekt
   public Auto(String marke, String modell, int baujahr) {
      this.marke = marke;
      this.modell = modell;
      this.baujahr = baujahr;
   }

   // Methode: Startet das Auto
   public void starten() {
      System.out.println(&quot;Das Auto startet.&quot;);
   }

   // Getter und Setter für das Attribut 'marke'
   public String getMarke() {
      return marke;
   }

   public void setMarke(String marke) {
      this.marke = marke;
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In diesem Beispiel fungiert die Klasse Auto als Bauplan. Sie legt fest, welche Eigenschaften (marke, modell, baujahr) ein Auto besitzt und welche Aktionen (z. B. starten) durchgeführt werden können.&lt;/p&gt;
&lt;h2&gt;Klassen und Dateinamen&lt;/h2&gt;
&lt;p&gt;Wenn du in Java eine öffnetliche Klasse mit dem &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public&lt;/span&gt; Modifikator anlegst, &lt;em&gt;muss&lt;/em&gt; die Datei denselben Namen haben wie die Klasse. Im obigen Beispiel haben wir die öffentliche Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Auto&lt;/span&gt; angelegt (&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public class Auto&lt;/span&gt;). Das bedeutet, dass die Datei, in der die Klasse gespeichert ist, &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Auto.java&lt;/span&gt; heißen muss.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regel:&lt;/strong&gt; Pro Datei darf es maximal eine &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public&lt;/span&gt; Klasse geben, die so heißt, wie die Datei. Die Datei kann aber weitere Klassen beinhalten, die &lt;em&gt;nicht&lt;/em&gt; &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public&lt;/span&gt; sind.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Wir befinden uns in der Datei Auto.java
public class Auto {
   /* Code für die Klasse Auto */
}

class Motorrad { // Das ist ERLAUBT
   /* Code für die Klasse Motorrad */
}

public class Fahrrad { // Das geht NICHT
   /* Code für die Klasse Fahrrad*/
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Klasse oder Datei umbennenen&lt;/h2&gt;
&lt;p&gt;Es gibt immer wieder den Fall, das man eine Klasse umbennen möchte, z.B. weil man sich vertippt hat oder einem ein besserer Name eingefallen ist. Angenommen, ich möchte in unserem Fall meine Klasse doch lieber &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PKW&lt;/span&gt; anstelle von &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Auto&lt;/span&gt; nennen. In diesem Fall kann ich &lt;em&gt;umständlich&lt;/em&gt; erst die Klasse und dann die Datei umbennen. Nicht wundern: Wenn du das so machst erhältst du temporär eine Fehlermeldung, dass Klassenname und Dateiname nicht übereinstimmen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Viel sinnvoller&lt;/em&gt; ist es allerdings IntelliJ die Arbeit machen zu lassen! Dafür klicke ich entweder in meinem Code auf den Namen meiner Klasse oder in der linken Spalte auf den Namen meiner Datei mit der &lt;em&gt;rechten Maustaste.&lt;/em&gt; Dann öffnet sich ein Kontextmenü und dort klicken wir auf &lt;strong&gt;Rename&lt;/strong&gt;. In diesem Fall benennt IntelliJ deine Klasse an allen Stellen in deinem gesamten Projekt um. Du musst also nicht selber umständlich suchen, wo du überall den Namen deiner Klasse verwendet hast und brauchst keine Angst haben, etwas zu übersehen. Das sit gerade dann sinnvoll, wenn du in einem großen Softwareprojekt etwas umbennen möchtest. &lt;/p&gt;
&lt;h1&gt;Erstellen von Objekten&lt;/h1&gt;
&lt;p&gt;Sobald eine Klasse definiert ist, kannst du Objekte davon erstellen.  Ein Objekt ist eine konkrete Ausprägung der Klasse, vergleichbar mit einem fertigen Auto, das auf Basis des Auto-Bauplans hergestellt wurde. Objekte werden auch als &lt;strong&gt;Instanzen&lt;/strong&gt; bezeichnet. &lt;strong&gt;In der Informatik beschreibt eine Instanz eine konkrete Umsetzung oder ein Exemplar eines Modell.&lt;/strong&gt; Da Obekte auch als Instanzen bezeichnet werden, wird der Vorgang des Erstellen eines Objekts auch als &lt;strong&gt;Instanziierung&lt;/strong&gt; bezeichnet.&lt;/p&gt;
&lt;p&gt;So könnte in der Main-Methode eines Programms ein Auto-Objekt erzeugt und verwendet werden:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Main {
   public static void main(String[] args) {
      // Erzeugen eines Auto-Objekts durch Aufrufen des Konstruktors
      Auto meinPrivatAuto = new Auto(&quot;VW&quot;, &quot;Golf&quot;, 2020);
      meinPrivatAuto.starten(); // Ruft die Methode 'starten' auf

      // Erzeugen eines weiteren Auto-Objekts durch Aufrufen des Konstruktors
      Auto meinArbeitsAuto = new Auto(&quot;VW&quot;, &quot;C-Klasse&quot;, 2021);

      // Marke des Arbeitsautos anpassen
      meinArbeitsAuto.setMarke(&quot;Mercedes&quot;);

      System.out.println(&quot;Marke: &quot; + meinPrivatAuto.getMarke()); // Ausgabe: VW
      System.out.println(&quot;Marke: &quot; + meinArbeitsAuto.getMarke()); // Ausgabe: Mercedes
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Durch den Konstruktor der Klasse werden die Objekte &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;meinPrivatAuto&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;meinArbeitsAuto&lt;/span&gt; erzeugt und mit individuellen Eigenschaften ausgestattet. Eine Veränderung an meinArbeitsAuto hat keinerlei Auswirkung auf meinPrivatAuto, da es sich hier um 2 vollkommen autarke (unabhängige) Objekte handelt.&lt;/p&gt;
&lt;h1&gt;Konstruktoren&lt;/h1&gt;
&lt;p&gt;Ein Konstruktor ist eine spezielle Methode, die beim Erzeugen eines Objekts aufgerufen wird, um es zu initialisieren. Da es sich bei einem Konstruktor um eine Methode handelt, ist er wie eine Methode aufgebaut. Bei der Erstellung eines Konsturktors musst du folgende Dinge beachten&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Namen&lt;/strong&gt;: Der Konstruktor hat &lt;span style=&quot;text-decoration: underline;&quot;&gt;immer&lt;/span&gt; denselben Namen wie die Klasse.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parameter:&lt;/strong&gt; Daten, welche zur Erstellung eines Objekts benötigt werden, können als Parameter an den Konstruktor übergeben werden&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keine&lt;/strong&gt; &lt;strong&gt;Rückgabe&lt;/strong&gt;: Konstruktoren haben &lt;em&gt;keinen&lt;/em&gt; Rückgabetyp, auch nicht void. Das bedeutet vor dem Namen steht kein Datentyp und nicht void&lt;strong&gt;. &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Das Schlüsselwort &quot;this&quot;&lt;/h2&gt;
&lt;p&gt;Das Schlüsselwort &lt;code&gt;this&lt;/code&gt; bezieht sich auf das aktuelle Objekt in einer Methode oder einem Konstruktor.&lt;/p&gt;
&lt;p&gt;Die häufigste Verwendung des Schlüsselworts &lt;code&gt;this&lt;/code&gt; besteht darin, die Verwechslung zwischen Klassenattributen und Parametern mit demselben Namen zu beseitigen (da ein Klassenattribut durch eine Methode oder einen Konstruktorparameter überschattet wird). Wenn man das Schlüsselwort &lt;code&gt;this&lt;/code&gt; in folgendem Beispiel in Zeile 7 und 8 weglässt, wäre die Ausgabe „&lt;code&gt;Meine Position ist x:0 y:0&lt;/code&gt;“ statt „&lt;code&gt;Meine Position ist x:34 y:65&lt;/code&gt;“.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-7and8&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;class Koordinaten {

   public int x;
   public int y;
   
   public Koordinaten(int x, int y) {
      this.x = x;
      this.y = y;
   }
}

public class Main {

  public static void main(String[] args) {
    Koordinaten meinePosition = new Koordinaten(34, 65);
    System.out.println(&quot;Meine Position ist x:&quot; + meinePosition.x + &quot; y:&quot; + meinePosition.y);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; kann auch verwendet werden, um:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;den Konstruktor der aktuellen Klasse aufzurufen&lt;/li&gt;
&lt;li&gt;eine Methode der aktuellen Klasse aufzurufen&lt;/li&gt;
&lt;li&gt;das aktuelle Objekt der Klasse zu erhalten&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Überladung von Konstruktoren&lt;/h2&gt;
&lt;p&gt;Es ist möglich, mehrere Konstruktoren mit unterschiedlichen Parameterlisten zu definieren, um Objekte flexibel initialisieren zu können.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Auto {
   private String marke;
   private String modell;
   private int baujahr;

   // Konstruktor mit allen Parametern
   public Auto(String marke, String modell, int baujahr) {
      this.marke = marke;
      this.modell = modell;
      this.baujahr = baujahr;
}

   // Konstruktor mit Standardwert für baujahr
   public Auto(String marke, String modell) {
      this(marke, modell, 2025); // Ruft den anderen Konstruktor auf
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Durch Konstruktorüberladung wird die Initialisierung der Objekte flexibler und einfacher an verschiedene Anforderungen anpassbar.&lt;/p&gt;
&lt;h1&gt;Attribute und Methoden&lt;/h1&gt;
&lt;p&gt;Attribute und Methoden bilden das Herzstück einer Klasse, sie werden auch als die &lt;strong&gt;Eigenschaften&lt;/strong&gt; einer Klasse bzw. eines Objekts bezeichnet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Attribute&lt;/strong&gt; (Felder) definieren den Zustand. Sie können verschiedene Datentypen haben (z. B. int, String, boolean).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methoden&lt;/strong&gt; definieren das Verhalten eines Objekts. Sie enthalten Code, der Operationen auf den Attributen oder sonstige Aktionen durchführt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ein anschauliches Beispiel:&lt;/strong&gt;&lt;br /&gt;Stell dir einen „Student“ vor. Er hat Attribute wie Name, Matrikelnummer und Studiengang. Gleichzeitig kann er Aktionen ausführen wie zur Vorlesung gehen oder sich für Prüfungen anmelden. In Java könnte dies folgendermaßen modelliert werden:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Student {
   private String name;
   private int matrikelnummer;
   private String studiengang;

   // Konstruktor
   public Student(String name, int matrikelnummer, String studiengang) {
      this.name = name;
      this.matrikelnummer = matrikelnummer;
      this.studiengang = studiengang;
   }

   // Eine Methode: Der Student meldet sich an
   public void anmelden() {
      System.out.println(name + &quot; hat sich für den Kurs angemeldet.&quot;);
   }

   // Getter und Setter
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Diese Trennung von Zustand (Attribute) und Verhalten (Methoden) ist ein zentrales Merkmal der Objektorientierten Programmierung. Durch die klare Strukturierung kann der Code übersichtlicher und modularer gestaltet werden.&lt;/p&gt;
&lt;h2&gt;Statische Eigenschaften einer Klasse&lt;/h2&gt;
&lt;p&gt;Die Eigenschaften einer Klasse können mit dem Modifikator &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;static&lt;/span&gt; versehen werden. Auf ein Attribut oder eine Methode, die static ist, kann zugegriffen werden, ohne das ein Objekt von der Klasse erstellt werden muss. Man greift dann über die Klasse und nicht über das Objekt auf die Eigenschaft zu. Statische Eigenschaften werden verwendet, wenn diese Eigenschaften eher zur Klasse, als zum Objekt gehören bzw. nicht einem konkreten Objekt zugeordnet werden. Dazu gehören zum Beispiel folgende Methoden und Eigenschaften aus der Math-Klasse:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;Math.sin(3.64); // Berechnung des Sinus 
Math.max(3, 7); // Ermittlung des Maximalwerts
System.out.println(Math.PI); // Ausgabe von PI&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Auf die Methoden und Attribute der Math.Klasse kannst du zugreifen, ohne ein Objekt erstellen zu müssen. Sie werden in der Math-Klasse einfach nur gruppiert. Du selber kannst in deinen eignen Programmen Methoden, die du schreibst und die zu keinem Objekt gehören, in einer eigenen Klasse gruppieren, um einfach auf diese zugreifen zu können.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Ein weitere Vorteil von statischen Eigenschaften ist, dass du auf sie zugreifen kannst, bevor du ein Objekt erstellst und, dass sich Änderungen statischen Attributen, auf alle Objekte auswirken. Stell dir vor, wir haben eine Klasse für eine Semestergruppe. Die maximale Teilnehmerzahl für eine Semestergruppe liegt bei 15 Studierenden. Diese Eigenschaft gehört eher zu der Klasse Semestergruppe, anstatt zu jeder einzelnen Semestergruppe indiviuell. Daher kann man dieses Attribut statisch machen. Falls sich die Zahl doch einmal ändern sollte, kann man sie einfach in der Klasse ändern und diese Auswirkung betrifft dann alle Objekte.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-4&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;class Semestergruppe {
    
    // Öffentliches statisches Attribut
    public static int MAX_TN = 15;
    private int tn;
    private String id;
    
    Semestergruppe (int tn, String id) {
        if(tn &amp;gt; MAX_TN) {
            System.out.println(&quot;Fehler bei der Teilnehmerzahl! Setze Anzahl auf &quot; + MAX_TN);
        } else {
            this.tn = tn;
        }
        this.id = id;
    }
}

public class Main {
    public static void main(String[] args) {
        // Zugriff auf das Attribut MAX_TN über den Klassennamen
        System.out.println(&quot;Maximale Anzahl an Studierenden pro Gruppe: &quot;+Semestergruppe.MAX_TN);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1&lt;/strong&gt;: Implementierung einer Klasse
&lt;ul&gt;
&lt;li&gt;Erstelle eine Klasse „Auto“ mit den Attributen: marke, modell und baujahr.&lt;/li&gt;
&lt;li&gt;Implementiere einen Konstruktor, der alle Attribute initialisiert.&lt;/li&gt;
&lt;li&gt;Füge eine Methode hinzu, die eine einfache Nachricht ausgibt, z. B. „[Marke] [Modell] startet!“&lt;/li&gt;
&lt;li&gt;Erstelle in einer Main-Methode ein Objekt der Klasse Auto und rufe die Methode auf.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 2&lt;/strong&gt;: Implementierung von Kapselung
&lt;ul&gt;
&lt;li&gt;Nimm die Klasse „Student“ und deklariere die Attribute (z. B. name, matrikelnummer, studiengang) als private.&lt;/li&gt;
&lt;li&gt;Implementiere jeweils passende Getter und Setter-Methoden.&lt;/li&gt;
&lt;li&gt;Füge Logik in den Setter für die Matrikelnummer ein, sodass nur positive Werte und Werte mit einer länge von 6 Zeichen akzeptiert werden.&lt;/li&gt;
&lt;li&gt;Teste deine Implementierung in einer einfachen Main-Methode, indem du versuchst, ungültige Werte zu setzen, und überprüfe, ob deine Validierung wirkt.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Was versteht man unter einer Klasse in der objektorientierten Programmierung?&lt;/li&gt;
&lt;li&gt;Was ist der Unterschied zwischen einer Klasse und einem Objekt?&lt;/li&gt;
&lt;li&gt;Wie unterscheiden sich ein Konstruktor und eine normale Methode?&lt;/li&gt;
&lt;li&gt;Was bedeutet es, wenn eine Methode in einer Klasse statisch ist?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Eine Klasse ist ein Bauplan, der Attribute und Methoden definiert, während ein Objekt eine konkrete Instanz dieser Klasse darstellt.
&lt;ul&gt;
&lt;li&gt;Die Attribute und Methoden werden als die Eigenschaften einer Klasse bezeichnet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Die Eigenschaften einer Klasse können statisch oder nicht statisch sein
&lt;ul&gt;
&lt;li&gt;Dies wird mithilfe des Modifikators &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;static&lt;/span&gt; festgelegt&lt;/li&gt;
&lt;li&gt;Statische Eigenschaften gehören zur Klasse und es kann auf sie zugegriffen werden, ohne eine Objekt der Klasse erstellen zu müssen.&lt;/li&gt;
&lt;li&gt;Nicht statische Eigenschaften können nur über ein Objekt der Klasse verwendet werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Konstruktoren initialisieren Objekte und können überladen werden, um flexible Initialisierungen zu ermöglichen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                          <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                          <int value="4"></int>
                          <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                          <int value="2"></int>
                          <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                          <int value="3"></int>
                          <string role="key" value="htmlTag"></string>
                          <string value="div"></string>
                          <string role="key" value="images"></string>
                          <instance class="exe.engine.galleryidevice.GalleryImages">
                           <dictionary>
                            <string role="key" value=".listitems"></string>
                            <list></list>
                            <string role="key" value="idevice"></string>
                            <reference key="8"></reference>
                           </dictionary>
                          </instance>
                          <string role="key" value="intlinks_to_anchors"></string>
                          <dictionary></dictionary>
                          <string role="key" value="nextImageId"></string>
                          <int value="0"></int>
                          <string role="key" value="parentNode"></string>
                          <reference key="9"></reference>
                         </dictionary>
                        </instance>
                       </list>
                       <string role="key" value="icon"></string>
                       <unicode value=""></unicode>
                       <string role="key" value="id"></string>
                       <unicode value="15"></unicode>
                       <string role="key" value="ideviceCategory"></string>
                       <unicode value="Text and Tasks"></unicode>
                       <string role="key" value="lastIdevice"></string>
                       <bool value="0"></bool>
                       <string role="key" value="nextFieldId"></string>
                       <int value="3"></int>
                       <string role="key" value="originalicon"></string>
                       <string value=""></string>
                       <string role="key" value="parentNode"></string>
                       <reference key="9"></reference>
                       <string role="key" value="systemResources"></string>
                       <list></list>
                       <string role="key" value="undo"></string>
                       <bool value="1"></bool>
                       <string role="key" value="userResources"></string>
                       <list></list>
                       <string role="key" value="version"></string>
                       <int value="0"></int>
                      </dictionary>
                     </instance>
                    </list>
                    <string role="key" value="_id"></string>
                    <unicode value="3"></unicode>
                    <string role="key" value="_package"></string>
                    <reference key="4"></reference>
                    <string role="key" value="anchor_fields"></string>
                    <list></list>
                    <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                    <int value="2"></int>
                    <string role="key" value="exportType"></string>
                    <string value="website"></string>
                    <string role="key" value="last_full_node_path"></string>
                    <string value="exe-node:Objektorientierte%20Programmierung:Klassen%20und%20Objekte"></string>
                    <string role="key" value="parent"></string>
                    <reference key="3"></reference>
                    <string role="key" value="top_anchors_linked_from_fields"></string>
                    <list>
                     <reference key="6"></reference>
                     <instance class="exe.engine.field.TextAreaField" reference="10">
                      <dictionary>
                       <string role="key" value="_id"></string>
                       <unicode value="132_2"></unicode>
                       <string role="key" value="_idevice"></string>
                       <instance class="exe.engine.jsidevice.JsIdevice" reference="11">
                        <dictionary>
                         <string role="key" value="_title"></string>
                         <unicode value=""></unicode>
                         <string role="key" value="_attributes"></string>
                         <list>
                          <tuple>
                           <string value="title"></string>
                           <list>
                            <string value="Title"></string>
                            <int value="0"></int>
                            <int value="0"></int>
                           </list>
                          </tuple>
                          <tuple>
                           <string value="category"></string>
                           <list>
                            <string value="Category"></string>
                            <int value="0"></int>
                            <int value="1"></int>
                           </list>
                          </tuple>
                          <tuple>
                           <string value="css-class"></string>
                           <list>
                            <string value="CSS class"></string>
                            <int value="0"></int>
                            <int value="2"></int>
                           </list>
                          </tuple>
                          <tuple>
                           <string value="icon"></string>
                           <list>
                            <string value="Icon"></string>
                            <int value="0"></int>
                            <int value="3"></int>
                           </list>
                          </tuple>
                         </list>
                         <string role="key" value="_author"></string>
                         <string value=""></string>
                         <string role="key" value="_iDeviceDir"></string>
                         <string value="text"></string>
                         <string role="key" value="_purpose"></string>
                         <string value=""></string>
                         <string role="key" value="_tip"></string>
                         <string value=""></string>
                         <string role="key" value="_typeName"></string>
                         <unicode value="Text"></unicode>
                         <string role="key" value="_valid"></string>
                         <bool value="1"></bool>
                         <string role="key" value="class_"></string>
                         <unicode value="text"></unicode>
                         <string role="key" value="edit"></string>
                         <bool value="0"></bool>
                         <string role="key" value="emphasis"></string>
                         <int value="0"></int>
                         <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                         <int value="1"></int>
                         <string role="key" value="fields"></string>
                         <list>
                          <reference key="10"></reference>
                         </list>
                         <string role="key" value="icon"></string>
                         <unicode value=""></unicode>
                         <string role="key" value="id"></string>
                         <unicode value="5"></unicode>
                         <string role="key" value="ideviceCategory"></string>
                         <unicode value="Text and Tasks"></unicode>
                         <string role="key" value="lastIdevice"></string>
                         <bool value="0"></bool>
                         <string role="key" value="nextFieldId"></string>
                         <int value="3"></int>
                         <string role="key" value="originalicon"></string>
                         <string value=""></string>
                         <string role="key" value="parentNode"></string>
                         <instance class="exe.engine.node.Node" reference="17">
                          <dictionary>
                           <string role="key" value="_title"></string>
                           <unicode value="Abstraktion"></unicode>
                           <string role="key" value="idevices"></string>
                           <list>
                            <reference key="11"></reference>
                           </list>
                           <string role="key" value="_id"></string>
                           <unicode value="5"></unicode>
                           <string role="key" value="_package"></string>
                           <reference key="4"></reference>
                           <string role="key" value="anchor_fields"></string>
                           <list></list>
                           <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                           <int value="2"></int>
                           <string role="key" value="exportType"></string>
                           <string value="website"></string>
                           <string role="key" value="last_full_node_path"></string>
                           <string value="exe-node:Objektorientierte%20Programmierung:Abstraktion"></string>
                           <string role="key" value="parent"></string>
                           <reference key="3"></reference>
                           <string role="key" value="top_anchors_linked_from_fields"></string>
                           <list>
                            <instance class="exe.engine.field.TextAreaField" reference="12">
                             <dictionary>
                              <string role="key" value="_id"></string>
                              <unicode value="127_2"></unicode>
                              <string role="key" value="_idevice"></string>
                              <instance class="exe.engine.jsidevice.JsIdevice" reference="13">
                               <dictionary>
                                <string role="key" value="_title"></string>
                                <unicode value=""></unicode>
                                <string role="key" value="_attributes"></string>
                                <list>
                                 <tuple>
                                  <string value="title"></string>
                                  <list>
                                   <string value="Title"></string>
                                   <int value="0"></int>
                                   <int value="0"></int>
                                  </list>
                                 </tuple>
                                 <tuple>
                                  <string value="category"></string>
                                  <list>
                                   <string value="Category"></string>
                                   <int value="0"></int>
                                   <int value="1"></int>
                                  </list>
                                 </tuple>
                                 <tuple>
                                  <string value="css-class"></string>
                                  <list>
                                   <string value="CSS class"></string>
                                   <int value="0"></int>
                                   <int value="2"></int>
                                  </list>
                                 </tuple>
                                 <tuple>
                                  <string value="icon"></string>
                                  <list>
                                   <string value="Icon"></string>
                                   <int value="0"></int>
                                   <int value="3"></int>
                                  </list>
                                 </tuple>
                                </list>
                                <string role="key" value="_author"></string>
                                <string value=""></string>
                                <string role="key" value="_iDeviceDir"></string>
                                <string value="text"></string>
                                <string role="key" value="_purpose"></string>
                                <string value=""></string>
                                <string role="key" value="_tip"></string>
                                <string value=""></string>
                                <string role="key" value="_typeName"></string>
                                <unicode value="Text"></unicode>
                                <string role="key" value="_valid"></string>
                                <bool value="1"></bool>
                                <string role="key" value="class_"></string>
                                <unicode value="text"></unicode>
                                <string role="key" value="edit"></string>
                                <bool value="0"></bool>
                                <string role="key" value="emphasis"></string>
                                <int value="0"></int>
                                <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                                <int value="1"></int>
                                <string role="key" value="fields"></string>
                                <list>
                                 <reference key="12"></reference>
                                </list>
                                <string role="key" value="icon"></string>
                                <unicode value=""></unicode>
                                <string role="key" value="id"></string>
                                <unicode value="16"></unicode>
                                <string role="key" value="ideviceCategory"></string>
                                <unicode value="Text and Tasks"></unicode>
                                <string role="key" value="lastIdevice"></string>
                                <bool value="0"></bool>
                                <string role="key" value="nextFieldId"></string>
                                <int value="3"></int>
                                <string role="key" value="originalicon"></string>
                                <string value=""></string>
                                <string role="key" value="parentNode"></string>
                                <instance class="exe.engine.node.Node" reference="21">
                                 <dictionary>
                                  <string role="key" value="_title"></string>
                                  <unicode value="Vererbung"></unicode>
                                  <string role="key" value="idevices"></string>
                                  <list>
                                   <reference key="13"></reference>
                                  </list>
                                  <string role="key" value="_id"></string>
                                  <unicode value="11"></unicode>
                                  <string role="key" value="_package"></string>
                                  <reference key="4"></reference>
                                  <string role="key" value="anchor_fields"></string>
                                  <list></list>
                                  <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                                  <int value="2"></int>
                                  <string role="key" value="exportType"></string>
                                  <string value="website"></string>
                                  <string role="key" value="last_full_node_path"></string>
                                  <string value="exe-node:Objektorientierte%20Programmierung:Vererbung"></string>
                                  <string role="key" value="parent"></string>
                                  <reference key="3"></reference>
                                  <string role="key" value="top_anchors_linked_from_fields"></string>
                                  <list>
                                   <instance class="exe.engine.field.TextAreaField" reference="14">
                                    <dictionary>
                                     <string role="key" value="_id"></string>
                                     <unicode value="128_2"></unicode>
                                     <string role="key" value="_idevice"></string>
                                     <instance class="exe.engine.jsidevice.JsIdevice" reference="15">
                                      <dictionary>
                                       <string role="key" value="_title"></string>
                                       <unicode value=""></unicode>
                                       <string role="key" value="_attributes"></string>
                                       <list>
                                        <tuple>
                                         <string value="title"></string>
                                         <list>
                                          <string value="Title"></string>
                                          <int value="0"></int>
                                          <int value="0"></int>
                                         </list>
                                        </tuple>
                                        <tuple>
                                         <string value="category"></string>
                                         <list>
                                          <string value="Category"></string>
                                          <int value="0"></int>
                                          <int value="1"></int>
                                         </list>
                                        </tuple>
                                        <tuple>
                                         <string value="css-class"></string>
                                         <list>
                                          <string value="CSS class"></string>
                                          <int value="0"></int>
                                          <int value="2"></int>
                                         </list>
                                        </tuple>
                                        <tuple>
                                         <string value="icon"></string>
                                         <list>
                                          <string value="Icon"></string>
                                          <int value="0"></int>
                                          <int value="3"></int>
                                         </list>
                                        </tuple>
                                       </list>
                                       <string role="key" value="_author"></string>
                                       <string value=""></string>
                                       <string role="key" value="_iDeviceDir"></string>
                                       <string value="text"></string>
                                       <string role="key" value="_purpose"></string>
                                       <string value=""></string>
                                       <string role="key" value="_tip"></string>
                                       <string value=""></string>
                                       <string role="key" value="_typeName"></string>
                                       <unicode value="Text"></unicode>
                                       <string role="key" value="_valid"></string>
                                       <bool value="1"></bool>
                                       <string role="key" value="class_"></string>
                                       <unicode value="text"></unicode>
                                       <string role="key" value="edit"></string>
                                       <bool value="0"></bool>
                                       <string role="key" value="emphasis"></string>
                                       <int value="0"></int>
                                       <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                                       <int value="1"></int>
                                       <string role="key" value="fields"></string>
                                       <list>
                                        <reference key="14"></reference>
                                       </list>
                                       <string role="key" value="icon"></string>
                                       <unicode value=""></unicode>
                                       <string role="key" value="id"></string>
                                       <unicode value="25"></unicode>
                                       <string role="key" value="ideviceCategory"></string>
                                       <unicode value="Text and Tasks"></unicode>
                                       <string role="key" value="lastIdevice"></string>
                                       <bool value="0"></bool>
                                       <string role="key" value="nextFieldId"></string>
                                       <int value="3"></int>
                                       <string role="key" value="originalicon"></string>
                                       <string value=""></string>
                                       <string role="key" value="parentNode"></string>
                                       <instance class="exe.engine.node.Node" reference="22">
                                        <dictionary>
                                         <string role="key" value="_title"></string>
                                         <unicode value="Grundlagen"></unicode>
                                         <string role="key" value="idevices"></string>
                                         <list>
                                          <reference key="15"></reference>
                                         </list>
                                         <string role="key" value="_id"></string>
                                         <unicode value="16"></unicode>
                                         <string role="key" value="_package"></string>
                                         <reference key="4"></reference>
                                         <string role="key" value="anchor_fields"></string>
                                         <list></list>
                                         <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                                         <int value="2"></int>
                                         <string role="key" value="exportType"></string>
                                         <string value="website"></string>
                                         <string role="key" value="last_full_node_path"></string>
                                         <string value="exe-node:Objektorientierte%20Programmierung:Java%20:Grundlagen"></string>
                                         <string role="key" value="parent"></string>
                                         <reference key="16"></reference>
                                         <string role="key" value="top_anchors_linked_from_fields"></string>
                                         <list></list>
                                         <string role="key" value="children"></string>
                                         <list></list>
                                        </dictionary>
                                       </instance>
                                       <string role="key" value="systemResources"></string>
                                       <list></list>
                                       <string role="key" value="undo"></string>
                                       <bool value="1"></bool>
                                       <string role="key" value="userResources"></string>
                                       <list></list>
                                       <string role="key" value="version"></string>
                                       <int value="0"></int>
                                      </dictionary>
                                     </instance>
                                     <string role="key" value="_instruc"></string>
                                     <string value=""></string>
                                     <string role="key" value="_name"></string>
                                     <string value=""></string>
                                     <string role="key" value="anchor_names"></string>
                                     <list></list>
                                     <string role="key" value="anchors_linked_from_fields"></string>
                                     <dictionary></dictionary>
                                     <string role="key" value="content_w_resourcePaths"></string>
                                     <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;ol&gt;&lt;/ol&gt;
&lt;h1&gt;Einführung in Java&lt;/h1&gt;
&lt;p&gt;In diesem Abschnitt möchten wir uns ansehen, wie man in Java Code schreibt. Vieles davon wird identisch oder ähnlich zu dem sein, wie es in Processing ist. Dennoch schauen wir uns alles einmal an, damit wir wissen, wie man in Java programmiert. Die einzelnen Themen werden nur kurz angeschnitten und nicht ausführlich erklärt, da diese Grundlagen vorausgesetzt werden.&lt;/p&gt;
&lt;p&gt;In diesem Abschnitt lernst du:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Grundlagen von Java
&lt;ul&gt;
&lt;li&gt;Syntax, Datentypen, Konsolenausgabe, Kontrollstrukturen, Arrays, Methoden und Math.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Die Unterschiede und Gemeinsamkeiten von Processing und Java&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Syntax&lt;/h1&gt;
&lt;p&gt;Die Syntax von Java ist identisch mit dem von Processing. Hier einige wichtige Punkte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Groß- und Kleinschreibung muss beachtet werden&lt;/li&gt;
&lt;li&gt;Semikolons (;) beenden Anweisungen.&lt;/li&gt;
&lt;li&gt;Blöcke werden durch geschweifte Klammern {} definiert.&lt;/li&gt;
&lt;li&gt;Bezeichner
&lt;ul&gt;
&lt;li&gt;dürfen nicht mit einem Schlüsselwort der Sprache Java identisch sein, z.B. darf man nicht int oder float als Variablenname verwenden&lt;br /&gt;bestehen aus Ziffern (0-9), Buchstaben (a-z, A-Z) und zwei weiteren Zeichen (Unterstrich und $)&lt;br /&gt;dürfen nicht mit einer Ziffer beginnen&lt;br /&gt;dürfen keine Leerzeichen enthalten und auch keinen Bindestrich (würde als Minus interpretiert werden)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kommentare können einzeilig oder mehrzeilig sein.
&lt;ul&gt;
&lt;li&gt;Einzeilig: &lt;code&gt;// Kommentar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mehrzeilig: &lt;br /&gt;&lt;code&gt;/* &lt;/code&gt;&lt;br /&gt;&lt;code&gt;   Mehrzeiliger Kommentar &lt;/code&gt;&lt;br /&gt;&lt;code&gt;*/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Datentypen&lt;/h1&gt;
&lt;h2&gt;Primitive Datentypen&lt;/h2&gt;
&lt;p&gt;Java unterscheidet zwischen&lt;strong&gt; primitiven Datentypen&lt;/strong&gt; und &lt;strong&gt;Referenzdatentypen&lt;/strong&gt;. Primitive Datentypen zeichnen sich dadurch aus, dass sie einfach nur einen Wert speichern (also eine Zahl oder einen Wahrheitwert). Sie werden daher auch als &lt;strong&gt;Wertetypen&lt;/strong&gt; bezeichnet. Wertetypen kannst du daran erkennen, dass der Datentyp klein geschrieben wird. Dies sind die 8 primitiven Datentypen in Java:&lt;/p&gt;
&lt;table style=&quot;width: 100%;&quot; border=&quot;1&quot; class=&quot;exe-table&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;Primitiver Typ&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;Beschreibung&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;Beispiel&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;byte, short, &lt;strong&gt;int&lt;/strong&gt;, long&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;Ganze Zahlen (unterschiedlicher Wertebereich)&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;int x = 10;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;float, &lt;strong&gt;double&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;Gleitkommazahlen (unterschiedlicher Wertebereich)&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;double y = 5.5;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;char&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;Einzelne Zeichen&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;char c = 'A';&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;boolean&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;Wahrheitswerte&lt;/td&gt;
&lt;td style=&quot;width: 33.3333%;&quot;&gt;boolean b = true;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Alle anderen Datentypen sind &lt;strong&gt;Referenztypen&lt;/strong&gt;. Diesen Namen haben sie, weil sie keine einfachen Werte speichern, sondern eine Referenz (so etwas wie ein Link) zu einer Stelle im Speicher, wo dann ein Objekt gespeichert ist, dass aus mehreren Daten und Methoden besteht. Aus diesem Grund werden Referenztypen auch als &lt;strong&gt;Objekttypen&lt;/strong&gt; bezeichnet. Objekttypen erkennst du daran, dass sie groß geschrieben werden. Objekte werden mithilfe von Klassen (&quot;Bauplänen&quot;) erstellt. Das haben wir bereits in der Einführung gelernt. Was man sonst noch alles über Refenztypen bzw. Objekttypen wissen muss, lernen wir also sobald wir uns dem Thema &quot;Klassen und Objekte&quot; widmen.&lt;/p&gt;
&lt;h2&gt;Enum&lt;/h2&gt;
&lt;p&gt;Ein enum (kurz für &quot;enumeration&quot; = Aufzählung) ist eine besondere Klasse und repräsentiert eine Gruppe von Konstanten, die wir selber festlegen können. Um einen enum zu erstellen, nutzt du das Schlüsselwort enum, wählst einen Bezeichner und ergänzt einen Codeblock. Innerhalb des Codeblocks kannst du deine Konstanten auflisten und diese mithilfe von Kommata trennen. Auf diese Konstanten kannst du dann zugreifen mithilfe der Punktnotation:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;enum Day {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY,
    THURSDAY, FRIDAY, SATURDAY 
}

System.out.println(Day.MONDAY);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Du solltest enum-Typen immer dann verwenden, wenn du einen festen Satz von Konstanten darstellen willst. Dazu gehören natürliche enum-Typen wie die Planeten in unserem Sonnensystem und Datensätze, bei denen du zu Programmstart alle möglichen Werte kennst (z.B. Auswahlmöglichkeiten in einem Menü).&lt;/p&gt;
&lt;p&gt;Hinweis: Gemäß algemeiner Programmierkonventionen werden Konstanten immer in GROßBUCHSTABEN geschrieben und Leerzeichen mit einem Unterstrich _ markiert.&lt;/p&gt;
&lt;h2&gt;Typumwandlung&lt;/h2&gt;
&lt;p&gt;Eine Typumwandlung wird durchgeführt, wenn du den Wert eines primitiven Datentyps einem anderen primitiven Datentyp zuweist. In Java gibt es 2 Arten der Typumwandlung:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Erweiternde Typumwandlung&lt;/strong&gt; (automatisch)
&lt;ul&gt;
&lt;li&gt;In diesem Fall weißt du einen kleineren Datentyp einem größeren Datentyp zu&lt;/li&gt;
&lt;li&gt;byte -&amp;gt; short -&amp;gt; char -&amp;gt; int -&amp;gt; long -&amp;gt; float -&amp;gt; double&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reduzierende Typumwandlung&lt;/strong&gt; (manuell)
&lt;ul&gt;
&lt;li&gt;In diesem Fal weißt du einen größeren Datentyp einem kleineren zu.&lt;/li&gt;
&lt;li&gt;Dies erfolgt manuell, indem der Zieldatentyp in Klammern () vor dem Wert hinzugefügt wird.&lt;/li&gt;
&lt;li&gt;double -&amp;gt; float -&amp;gt; long -&amp;gt; int -&amp;gt; char -&amp;gt; short -&amp;gt; byte&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Beispiele&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;byte myByte = 3;
float myFloat = myByte; // Automatische Typumwandlung, ergibt 3.0

double myDouble = 14.845;
int myInt = (int) myDouble; // Manuelle Typumwandlung, ergibt 14&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Konsolenausgabe&lt;/h1&gt;
&lt;p&gt;Eine einfache Konsolenausgabe erfolgt in Java mit System.out.println().  System ist eine Klasse innerhalb von Java, welche viele wichtige Methoden und Daten bereithält. Sie enthält unter anderem den Abschnitt out (kurz für Output), welcheunter anderen folgende Methoden enthält:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;println(): Kurz für print line - erstellt eine Konsolenausgabe mit Zeilenumbruch am Ende&lt;/li&gt;
&lt;li&gt;print(): Erstellt eine Konsolenausgabe &lt;em&gt;ohne&lt;/em&gt; Zeilenumbruch am Ende&lt;/li&gt;
&lt;li&gt;printf(): Erstellt eine &lt;em&gt;formatierte&lt;/em&gt; Konsolenausgabe (vgl. String.format())&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Kontrollstrukturen&lt;/h1&gt;
&lt;p&gt;Kontrollstrukturen steuern den Ablauf deines Programms. Die wichtigsten Kontrollstrukturen sind Fallunterscheidungen (if und switch) und Schleifen (for, while, do-while).&lt;/p&gt;
&lt;div class=&quot;exe-fx exe-tabs&quot;&gt;
&lt;h2&gt;if-Anweisung&lt;/h2&gt;
&lt;p&gt;Mithilfe einer if-Anweisung kann eine Fallunterscheidung druchgeführt werden. In den gescheiften Klammern mit eine Bedinung angegeben werden (z.B. in Form eines Vergleichs oder einer booleschen Variable). Eine differenzierte Fallunterscheidung erfolgt mithilfe von else und else if.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;int x = 10;
if (x &amp;gt; 5) {
   System.out.println(&quot;x ist größer als 5&quot;);
} else {
   System.out.println(&quot;x ist kleiner oder gleich 5&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Switch&lt;/h2&gt;
Mithilfe eines Switchs kann eine Fallunterscheidung durchgeführt werden, wenn eine Variable auf einen bestimmten Wert überprüft werden soll und die möglichen Optionen bekannt sind.&lt;br /&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;int tag = 3;
        
switch (tag) {
   case 1:
      System.out.println(&quot;Montag&quot;);
      break;
   case 2:
      System.out.println(&quot;Dienstag&quot;);
      break;
   case 3:
      System.out.println(&quot;Mittwoch&quot;);
      break;
   case 4:
      System.out.println(&quot;Donnerstag&quot;);
      break;
   case 5:
      System.out.println(&quot;Freitag&quot;);
      break;
   case 6:
      System.out.println(&quot;Samstag&quot;);
      break;
   case 7:
      System.out.println(&quot;Sonntag&quot;);
      break;
   default:
      System.out.println(&quot;Ungültiger Tag&quot;);
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;h2&gt;For-Schleife&lt;/h2&gt;
&lt;p&gt;For-Schliefen sind Zählschleifen, die im Schleifenkopf eine Laufvariable, ein Abbruchkriterium und eine Schleifenaktion festlegen. Eine Schleife kann mithilfe von &lt;code&gt;break&lt;/code&gt; abgebrochen werden. Ein Schleifendurchlauf kann mithilfe von &lt;code&gt;continue&lt;/code&gt; übersprungen werden.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt; 10; i++) {
   System.out.println(i);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;While-Schleife&lt;/h2&gt;
&lt;p&gt;While-Schleifen sind kopfgesteuerte Schleifen, welche ein Abbruchkriterium im Schleifenkopf enthalten.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;int i = 0;
while (i &amp;lt; 10) {
   System.out.println(i);
   i++;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Do-while-Schleife&lt;/h2&gt;
&lt;p&gt;Do-While-Schleifen sind fußgesteuerte Schleifen, welche ein Abbruchkriterium im Schleifenfuß enthalten.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;int i = 0;
do {
   System.out.println(i);
   i++;
} while (i &amp;lt; 10)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;try-Catch&lt;/h2&gt;
Ein try-Catch-Block ist eine Struktur, um Ausnahmen (Exceptions) abzufangen:&lt;br /&gt;&lt;br /&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;int a = 3;
int b =  0;

try {

   System.out.println(a / b);

} catch (ArithmeticException e) {

   System.out.println(&quot;Division durch 0 nicht möglich!&quot;);

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
Das Thema Ausnahmebehandlung wird im Abschnitt &quot;&lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Java%20:Ausnahmebehandlung#auto_top&quot; target=&quot;_blank&quot; title=&quot;Ausnahmebehandlung&quot; rel=&quot;noopener&quot;&gt;Ausnahmebehandlung&lt;/a&gt;&quot; ausführlicher erklärt.&lt;/div&gt;
&lt;h1&gt;Arrays&lt;/h1&gt;
&lt;p&gt;Arrays sind Sammlungen von Elementen desselben Datentyps. Arrays können mehrere Dimensionen haben. Das bedeutet, dass in einem Array-Element ein weiterer Array gespeichert ist. Arrays haben in der ersten Dimension eine feste Länge, welche bei der Deklaration angegeben werden muss. Mithilfe des Index, kann auf einzelne Elemente zugegriffen werden. Der Index beginnt bei 0. Bei Arrays handelt es sich um Objekttypen. &lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Kurze Schreibweise
int[] zahlen = {1, 2, 3, 4, 5};
System.out.println(zahlen[0]); // Gibt &quot;1&quot; aus

// Lange Schreibweise
int[][] werte = new int[2][2];
werte[0][0] = 1;
werte[0][1] = 2;
werte[1][0] = 3;
werte[1][1] = 4;

System.out.println(werte[0][1]); // Gibt &quot;2&quot; aus&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Methoden&lt;/h1&gt;
&lt;p&gt;Methoden sind sind Codeblöcke, welche nur dann ausgeführt werden, wenn sie aufgerufen werden. Methoden werden auch häufig als &lt;strong&gt;Funktionen&lt;/strong&gt; bezeichnet. Methoden werden verwendet, um Code zu strukturieren und Code wiederzuverwenden. Sobald eine Reihe von Operationen mehrmals ausgeführt werden soll, ist es sinnvoll sie in einer Methode zusammenzufassen. Methoden können Daten entgegennehmen in Form von Parametern. Außerdem können sie Daten zurückgeben in Form von Rückgabewerten.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wichtig&lt;/strong&gt;: In Java können Methoden nur &lt;em&gt;innerhalb&lt;/em&gt; von Klassen verwendet werden!&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Main {
  public static void main(String[] args) {

    // Aufruf der Methode ohne Parameter und Rückgabewert
    gruesseWelt();

    // Aufruf der Methode addiere mit zwei Parametern
    int ergebnis = addiere(5, 3);
    System.out.println(&quot;Das Ergebnis der Addition ist: &quot; + ergebnis);
  }

  // Definition einer einfachen Methode ohne Parameter und Rückgabewert
  public static void gruesseWelt() {
    // Diese Methode gibt einfach einen Text aus
    System.out.println(&quot;Hallo Welt!&quot;);
  }

  // Definition einer Methode mit zwei Parametern und einem Rückgabewert
  public static int addiere(int zahl1, int zahl2) {
    // Diese Methode addiert zwei Zahlen und gibt das Ergebnis zurück
    int summe = zahl1 + zahl2;
    return summe; // Rückgabe des Ergebnisses
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Überladung&lt;/h2&gt;
&lt;p&gt;Methoden können in Java überladen werden. Das bedeutet, dass mehr als eine Definition für diese Methode vorliegt. Diese Definitionen unterscheiden sich anhand der Parameter (Anzahl und Reihenfolge). Methoden-Überladung wird häufig eingesetzt, um Standardwerte zu setzen, wenn z.B. keine Daten vorliegen.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Main {
  public static void main(String[] args) {

    // Aufruf der Methode ohne Parameter 
    System.out.println(hallo()); // Ausgabe: Hallo du!
    // Aufruf der Methode ohne Parameter 
    System.out.println(hallo(&quot;Ingrid&quot;)); // Ausgabe: Hallo Ingrid!
  }

  // Definition einer Methode ohne Parameter
  public static String hallo() {
    return &quot;Hallo du!&quot;; // Rückgabe der Begrüßung mit Name
  }

  // Definition einer Methode mit Parameter
  public static String hallo(String name) {
    return &quot;Hallo &quot; + name + &quot;!&quot;; // Rückgabe der Begrüßung mit Name
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Modifikatoren&lt;/h1&gt;
&lt;p&gt;Modifikatoren werden in Java verwendet, um die Sichtbarkeit, Lebensdauer und Veränderbarkeit von Elementen festzulegen. Ein paar Modifikatoren sind und bereits begegnet, wie z.B. &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;final, public&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;static.&lt;/span&gt; Modifikatore lassen sich in 2 Gruppen einteilen: &lt;strong&gt;Zugriffsmodifikatoren&lt;/strong&gt; und &lt;strong&gt;Nicht-Zugriffsmodifiaktoren&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Zugriffsmodifikatoren&lt;/h2&gt;
&lt;p&gt;Zugriffsmodifikatoren steuern die Sichbarkeit und Klassen, Methoden und Attributen. In Java gibt es 4 Zugriffsmodifkatoren:&lt;/p&gt;
&lt;table style=&quot;width: 100%;&quot; border=&quot;1&quot; class=&quot;exe-table&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 25%;&quot;&gt;Modifikator&lt;/td&gt;
&lt;td style=&quot;width: 74.437%;&quot;&gt;Beschreibung&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 25.563%;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public&lt;/span&gt; (öffentlich)&lt;/td&gt;
&lt;td style=&quot;width: 74.437%;&quot;&gt;Diese Klasse (bzw. das Attribut, die Methode) ist von jeder anderen Klasse aus zugänglich.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 25.563%;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;protected&lt;/span&gt; (geschützt)&lt;/td&gt;
&lt;td style=&quot;width: 74.437%;&quot;&gt;Diese Klasse (bzw. das Attribut, die Methode) ist innerhalb seines eigenen Pakets und von Unterklassen zugänglich.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 25.563%;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;private&lt;/span&gt; (privat)&lt;/td&gt;
&lt;td style=&quot;width: 74.437%;&quot;&gt;Diese Klasse (bzw. das Attribut, die Methode) ist nur innerhalb seiner eigenen Klasse zugänglich.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;width: 25.563%;&quot;&gt;&lt;em&gt;default&lt;/em&gt; (kein Schlüsselwort)&lt;/td&gt;
&lt;td style=&quot;width: 74.437%;&quot;&gt;Diese Klasse (bzw. das Attribut, die Methode) ist nur innerhalb seines eigenen Pakets zugänglich.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Öffentliche Zahl
public class Beispiel {
    public int oeffentlicheZahl;
    protected int geschuetzteZahl;
    int defaultZahl; // Standard Zugriff
    private int privateZahl;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;listed-menu css-1kkg4t3&quot;&gt;In diesem Beispiel ist &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;oeffentlicheZahl&lt;/span&gt; von überall zugänglich, &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;geschuetzteZahl&lt;/span&gt; ist innerhalb des Pakets und der Subklassen zugänglich, &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;defaultZahl&lt;/span&gt; ist innerhalb des Pakets zugänglich und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;privateZahl&lt;/span&gt; ist nur innerhalb der Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Beispiel&lt;/span&gt; zugänglich.&lt;/span&gt;&lt;span class=&quot;listed-menu css-1kkg4t3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Nicht-Zugriffsmodifikatoren&lt;/h2&gt;
&lt;p class=&quot;p-margin&quot;&gt;Nicht-Zugriffsmodifikatoren bieten zusätzliche Funktionen wie die Kontrolle der Vererbung, die Gewährleistung der Unveränderlichkeit und die Definition besonderer Eigenschaften.&lt;/p&gt;
&lt;p&gt;Für Klassen gibt es die Modifikatoren final und abstract:&lt;/p&gt;
&lt;table style=&quot;width: 100%; height: 100px;&quot; border=&quot;1&quot; class=&quot;exe-table&quot;&gt;
&lt;thead&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 25%; height: 25px;&quot;&gt;Modifikator&lt;/td&gt;
&lt;td style=&quot;width: 72.6856%; height: 25px;&quot;&gt;Beschreibung&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr style=&quot;height: 50px;&quot;&gt;
&lt;td style=&quot;width: 27.3144%; height: 50px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;final&lt;/span&gt; (final)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 72.6856%; height: 50px;&quot;&gt;
&lt;p&gt;Die Klasse kann nicht von anderen Klassen vererbt werden.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Mehr zumThema Vererbung lernen wir im Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top&quot;&gt;Vererbung&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 27.3144%; height: 25px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;abstract&lt;/span&gt; (abstrakt)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 72.6856%; height: 25px;&quot;&gt;
&lt;p&gt;Die Klasse kann nicht verwendet werden, um Objekte zu erstellen (Um auf eine abstrakte Klasse zuzugreifen, muss sie von einer anderen Klasse vererbt werden.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Mehr zum Thema Vererbung und Abstraktion lernen wir im Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top&quot;&gt;Vererbung&lt;/a&gt; und &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Abstraktion#auto_top&quot;&gt;Abstrakte Klassen und Interfaces&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Für Attribute und Methoden gibt es folgden Modifikatoren:&lt;/p&gt;
&lt;table style=&quot;width: 100%; height: 201px;&quot; border=&quot;1&quot; class=&quot;exe-table&quot;&gt;
&lt;thead&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 25%; height: 25px;&quot;&gt;Modifikator&lt;/td&gt;
&lt;td style=&quot;width: 71.9349%; height: 25px;&quot;&gt;Beschreibung&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr style=&quot;height: 28px;&quot;&gt;
&lt;td style=&quot;width: 28.0651%; height: 28px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;final&lt;/span&gt; (final)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 71.9349%; height: 28px;&quot;&gt;Attribute und Methoden können nicht überschrieben/verändert werden&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 23px;&quot;&gt;
&lt;td style=&quot;width: 28.0651%; height: 23px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;static&lt;/span&gt; (statisch)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 71.9349%; height: 23px;&quot;&gt;Attribute und Methoden gehören zur Klasse, nicht zum Objekt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 28.0651%; height: 25px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;abstract&lt;/span&gt; (abstrakt)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 71.9349%; height: 25px;&quot;&gt;
&lt;p&gt;Kann nur in einer abstrakten Klasse verwendet werden und kann nur auf Methoden verwendet werden. Die Methode hat keinen Codeblock, zum Beispiel abstract void run();. Der Codeblockwird in der Subklasse erstellt.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Mehr zum Thema Vererbung und Abstraktion lernen wir im Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top&quot;&gt;Vererbung&lt;/a&gt; und &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Abstraktion#auto_top&quot;&gt;Abstrakte Klassen und Interfaces&lt;/a&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 28.0651%; height: 25px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;transient&lt;/span&gt; (&lt;/strong&gt;&lt;strong&gt;transient)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 71.9349%; height: 25px;&quot;&gt;Verhindert die Serialisierung von Klassenfeldern.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 50px;&quot;&gt;
&lt;td style=&quot;width: 28.0651%; height: 50px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;synchronized&lt;/span&gt; (synchronisiert)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 71.9349%; height: 50px;&quot;&gt;Wird im Multithreading verwendet, um sicherzustellen, dass immer nur ein Thread auf eine Methode oder einen Block zugreifen kann.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 28.0651%; height: 25px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;volatile&lt;/span&gt; (flüchtig)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 71.9349%; height: 25px;&quot;&gt;Stellt sicher, dass der Wert einer Variablen immer aus dem Hauptspeicher gelesen wird.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Hinweis: Die Themen Serialisierung und Multithreading werden wir in diesem Modul nicht behandeln.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Beispiel {
    public static final int KONSTANTE = 100;

    public static void main(String[] args) {
        System.out.println(&quot;Constant Value: &quot; + CONSTANT);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Math&lt;/h1&gt;
&lt;p&gt;Die Klasse Math enthält viele Methoden mit deren Hilfe mathematische Operationen durchgeführt werden können. Hier sind einige Beispiele:&lt;/p&gt;
&lt;table class=&quot;exe-table&quot; style=&quot;margin: 0;&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th style=&quot;width: 22%;&quot;&gt;Methode&lt;/th&gt;
&lt;th style=&quot;width: 57%;&quot;&gt;Beschreibung&lt;/th&gt;
&lt;th style=&quot;width: 21%;&quot;&gt;Rückgabetyp&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;abs(x)&lt;/td&gt;
&lt;td&gt;Gibt den absoluten Wert von x zurück&lt;/td&gt;
&lt;td&gt;double|float|int|long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;atan2(y,x)&lt;/td&gt;
&lt;td&gt;Gibt den Winkel Theta aus der Umwandlung von rechtwinkligen Koordinaten (x, y) in Polarkoordinaten (r, Theta) zurück.&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ceil(x)&lt;/td&gt;
&lt;td&gt;Gibt den nach oben als Ganzzahl gerundeten Wert von x zurück&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cos(x)&lt;/td&gt;
&lt;td&gt;Gibt den Cosinus von x (im Bogenmaß) zurück&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;floor(x)&lt;/td&gt;
&lt;td&gt;Gibt den nach unten als Ganzzahl gerundeten Wert von x zurück&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max(x, y)&lt;/td&gt;
&lt;td&gt; Gibt den größeren Wert  zurück&lt;/td&gt;
&lt;td&gt;double|float|int|long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min(x, y)&lt;/td&gt;
&lt;td&gt;Gibt den kleineren Wert zurück&lt;/td&gt;
&lt;td&gt;double|float|int|long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pow(x, y)&lt;/td&gt;
&lt;td&gt;Gibt denWert von x hoch y zurück&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;random()&lt;/td&gt;
&lt;td&gt;Gibt eine Zufallszahl zwischen 0 und 1 zurück&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;round(x)&lt;/td&gt;
&lt;td&gt;Gibt den als Ganzzahl gerundeten Wert von x zurück&lt;/td&gt;
&lt;td&gt;long|int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sin(x)&lt;/td&gt;
&lt;td&gt;Gibt den Sinus von x (x is im Bogenmaß) zurück&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sqrt(x)&lt;/td&gt;
&lt;td&gt;Gibt Wurzel von x zurück&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tan(x)&lt;/td&gt;
&lt;td&gt;Gibt den Tangens x (in Bogenmaß) zurück&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Schreibe ein Programm, das zwei Zahlen einliest und ihre Summe berechnet.&lt;/li&gt;
&lt;li&gt;Erstelle ein Array mit den Zahlen von 1 bis 10 und gib alle Zahlen in umgekehrter Reihenfolge aus.&lt;/li&gt;
&lt;li&gt;Schreibe ein Programm, das überprüft, ob eine eingegebene Zahl gerade oder ungerade ist.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Wie unterscheidet sich ein Array von einer normalen Variablen?&lt;/li&gt;
&lt;li&gt;Worin unterscheiden sich die verschiedenen Befehle, mit denen eine Konsolenausgabe erstellt werden kann?&lt;/li&gt;
&lt;li&gt;Worin unterscheiden sich Methoden/Funktionen in Processing und Java?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Die Syntaxregeln in Java sind identisch mit den Regeln von Processing und müssen zwingend eingehalten werden, damit dein Programm ausführbar ist.&lt;/li&gt;
&lt;li&gt;In Java werden Datentypen unterschieden nach primitiven Datentypen und Referenztypen.
&lt;ul&gt;
&lt;li&gt;Primitve Datentypen speichern einfache Werte und werden klein geschrieben. Daher werden sie auch als &lt;strong&gt;Wertetyp&lt;/strong&gt; bezeichnet&lt;/li&gt;
&lt;li&gt;Referenztypen speichern Objekte und werde groß geschrieben. Daher werden sie auch als &lt;strong&gt;Objekttyp&lt;/strong&gt; bezeichnet.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mithilfe des Datentyp enum kann ein Set von Konstanten definiert werden.&lt;/li&gt;
&lt;li&gt;Die Konsolenausgabe erfolgt in Java mithilfe von System.out.println() (alternativ geht auch print() oder printf() am Ende)&lt;/li&gt;
&lt;li&gt;In Java gibt es 2 Arten der Typumwandlung für pirmitive Datentypen
&lt;ul&gt;
&lt;li&gt;Die erweiternde Typumwandlung in einen größeren Datentyp erfolgt autmatisch.&lt;/li&gt;
&lt;li&gt;Die reduzierende Typumwandlung in einen kleineren Datentyp erfolgt manuell, in dem der Ziel-Datentyp in Klammern () vor den zu konvertierenden Wert gesetzt wird.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In Java gibt es Fallunterscheidungen und Schleifen
&lt;ul&gt;
&lt;li&gt;Fallunterscheidung: if und switch&lt;/li&gt;
&lt;li&gt;Schleifen: for, while und do-while&lt;/li&gt;
&lt;li&gt;Diese Kontrollstrukturen sind identisch mit denen in Processing.&lt;/li&gt;
&lt;li&gt;Ausnahmebehandlungen funktionieren in Java, so wie in Processing, allerdings steigen wir in diesem Skript etwas tiefer in das Thema ein.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arrays sind Sammlungen gleichartiger Elemente und müssen in ihrem Typ definiert werden.
&lt;ul&gt;
&lt;li&gt;Es gibt ein-und mehrdimensionale Arrays&lt;/li&gt;
&lt;li&gt;Auf die einzelnen Elemente kann mithilfe des Index zugegriffen werden, welcher bei 0 beginnt&lt;/li&gt;
&lt;li&gt;Arrays in JAva sind identisch mit Arrays in Processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Methoden sind Gruppen von Befehlen, die in einem Coeblock zusammengefasst werden, um Struktur und Wiederverwendbarkeit zu schaffen.
&lt;ul&gt;
&lt;li&gt;Methoden haben wir in Processing immer als Funktionen bezeichnet, sind aber dasselbe&lt;/li&gt;
&lt;li&gt;In Java können Methoden nur innerhalb von Klasser erstellt werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Die Klasse Math bietet eine Reihe von vorgefertigten Befehlen, mit denen gängige arithmetische Operationen durchgeführt werden können.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                                     <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                     <int value="4"></int>
                                     <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                                     <int value="2"></int>
                                     <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                                     <int value="3"></int>
                                     <string role="key" value="htmlTag"></string>
                                     <string value="div"></string>
                                     <string role="key" value="images"></string>
                                     <instance class="exe.engine.galleryidevice.GalleryImages">
                                      <dictionary>
                                       <string role="key" value=".listitems"></string>
                                       <list></list>
                                       <string role="key" value="idevice"></string>
                                       <reference key="14"></reference>
                                      </dictionary>
                                     </instance>
                                     <string role="key" value="intlinks_to_anchors"></string>
                                     <dictionary>
                                      <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Abstraktion#auto_top"></unicode>
                                      <reference key="17"></reference>
                                      <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Java%20:Ausnahmebehandlung#auto_top"></unicode>
                                      <instance class="exe.engine.node.Node" reference="20">
                                       <dictionary>
                                        <string role="key" value="_title"></string>
                                        <unicode value="Ausnahmebehandlung"></unicode>
                                        <string role="key" value="idevices"></string>
                                        <list>
                                         <instance class="exe.engine.jsidevice.JsIdevice" reference="18">
                                          <dictionary>
                                           <string role="key" value="_title"></string>
                                           <unicode value=""></unicode>
                                           <string role="key" value="_attributes"></string>
                                           <list>
                                            <tuple>
                                             <string value="title"></string>
                                             <list>
                                              <string value="Title"></string>
                                              <int value="0"></int>
                                              <int value="0"></int>
                                             </list>
                                            </tuple>
                                            <tuple>
                                             <string value="category"></string>
                                             <list>
                                              <string value="Category"></string>
                                              <int value="0"></int>
                                              <int value="1"></int>
                                             </list>
                                            </tuple>
                                            <tuple>
                                             <string value="css-class"></string>
                                             <list>
                                              <string value="CSS class"></string>
                                              <int value="0"></int>
                                              <int value="2"></int>
                                             </list>
                                            </tuple>
                                            <tuple>
                                             <string value="icon"></string>
                                             <list>
                                              <string value="Icon"></string>
                                              <int value="0"></int>
                                              <int value="3"></int>
                                             </list>
                                            </tuple>
                                           </list>
                                           <string role="key" value="_author"></string>
                                           <string value=""></string>
                                           <string role="key" value="_iDeviceDir"></string>
                                           <string value="text"></string>
                                           <string role="key" value="_purpose"></string>
                                           <string value=""></string>
                                           <string role="key" value="_tip"></string>
                                           <string value=""></string>
                                           <string role="key" value="_typeName"></string>
                                           <unicode value="Text"></unicode>
                                           <string role="key" value="_valid"></string>
                                           <bool value="1"></bool>
                                           <string role="key" value="class_"></string>
                                           <unicode value="text"></unicode>
                                           <string role="key" value="edit"></string>
                                           <bool value="0"></bool>
                                           <string role="key" value="emphasis"></string>
                                           <int value="0"></int>
                                           <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                                           <int value="1"></int>
                                           <string role="key" value="fields"></string>
                                           <list>
                                            <instance class="exe.engine.field.TextAreaField" reference="19">
                                             <dictionary>
                                              <string role="key" value="_id"></string>
                                              <unicode value="134_2"></unicode>
                                              <string role="key" value="_idevice"></string>
                                              <reference key="18"></reference>
                                              <string role="key" value="_instruc"></string>
                                              <string value=""></string>
                                              <string role="key" value="_name"></string>
                                              <string value=""></string>
                                              <string role="key" value="anchor_names"></string>
                                              <list></list>
                                              <string role="key" value="anchors_linked_from_fields"></string>
                                              <dictionary></dictionary>
                                              <string role="key" value="content_w_resourcePaths"></string>
                                              <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung&lt;/h1&gt;
&lt;p&gt;Stell dir vor, du möchtest dir morgens um 6:23 Uhr einen Kaffee mit deiner Kaffeemaschine machen: Im besten Fall drückst du den richtigen Knopf, und der Kaffee wird zubereitet. Bist du jedoch übermüdet und drückst einen falscher Knopf gedrückt oder ist eine Komponente defekt (Wassertank leer, Schlauch verkalkt), muss das System den Fehler erkennen und darüber informieren, ohne komplett auszuschalten - oder gar kaputt zu gehen. In der Softwareentwicklung funktioniert die Ausnahmebehandlung ähnlich: Statt dass bei einem Fehler das Programm abrupt beendet wird, werden potenziell fehleranfällige Codeabschnitte in einem geschützten Bereich – dem try‑Block – ausgeführt, und auftretende Fehler werden gezielt abgefangen.&lt;/p&gt;
&lt;p&gt;Die Ausnahmebehandlung ist ein zentraler Bestandteil der Softwareentwicklung, da sie es ermöglicht, unerwartete Fehler – sei es durch falsche Nutzereingaben, fehlende Ressourcen oder defekte Hardware – kontrolliert abzufangen und zu behandeln, ohne dass das gesamte Programm abstürzt. Im Kapitel vertiefen wir hier die Konzepte von try‑catch‑Blöcken, throw, throws, finally und die Definition eigener Exceptions und bauen damit auf den Grundlagen aus dem Modul Programmieren auf.&lt;/p&gt;
&lt;p&gt;In diese Kapitel lernst du:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Den Aufbau und Einsatz von try-catch-Blöcken&lt;/li&gt;
&lt;li&gt;Das manuelle Werfen einer Exception mithilfe von throw&lt;/li&gt;
&lt;li&gt;Das definieren eigener Exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Try‑Catch-Blöcke&lt;/h1&gt;
&lt;p&gt;Der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;try&lt;/span&gt;‑Block fasst alle Codezeilen zusammen, bei denen ein Fehler auftreten könnte. Kommt ein Fehler (eine &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Exception)&lt;/span&gt; vor, wird der reguläre Kontrollfluss unterbrochen, und die Kontrolle springt zur passenden &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;catch&lt;/span&gt;‑Klausel, die den Fehler behandelt.&lt;/p&gt;
&lt;p&gt;Ein einfaches Beispiel ist das Teilen durch Null, das zu einer &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;ArithmeticException&lt;/span&gt; führt:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;try {
   int result = 10 / 0; // Dieser Ausdruck löst eine Exception aus
   System.out.println(&quot;Das Ergebnis ist: &quot; + result);
} catch (ArithmeticException e) {
   System.out.println(&quot;Fehler: Division durch Null ist nicht erlaubt. &quot; + e.getMessage());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In diesem Beispiel verhindert der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;catch&lt;/span&gt;‑Block, dass das Programm abstürzt, und gibt stattdessen eine verständliche Fehlermeldung aus.&lt;/p&gt;
&lt;h1&gt;Das Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;throw&lt;/span&gt; und die Deklaration mit &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;throws&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;Manchmal möchte man eine &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Exception&lt;/span&gt; aktiv auslösen – etwa wenn eine Eingabe ungültig ist oder ein bestimmter Zustand nicht erfüllt wird. Hier kommt das Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;throw&lt;/span&gt; zum Einsatz. Es ermöglicht, eine &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Exception&lt;/span&gt; manuell zu „werfen“. Zudem kann eine Methode mit dem Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;throws&lt;/span&gt; deklarieren, welche Exception(s) sie möglicherweise an den aufrufenden Code weitergibt.&lt;/p&gt;
&lt;p&gt;Ein kompaktes Beispiel:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public void checkAge(int age) throws IllegalArgumentException {
   if (age &amp;lt; 0) {
      throw new IllegalArgumentException(&quot;Das Alter kann nicht negativ sein!&quot;);
   }
   System.out.println(&quot;Das Alter ist: &quot; + age);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Beim Aufruf der Methode muss dann entweder eine &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Exception&lt;/span&gt; behandelt oder erneut weitergereicht werden.&lt;/p&gt;
&lt;h1&gt;Der finally-Block&lt;/h1&gt;
&lt;p&gt;Unabhängig davon, ob im &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;try&lt;/span&gt;‑Block eine &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Exception&lt;/span&gt; auftritt oder nicht, soll oft abschließender Code ausgeführt werden, beispielsweise zum Freigeben von Ressourcen wie geöffnete Dateien oder Datenbankverbindungen. Hier kommt der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;finally&lt;/span&gt;‑Block ins Spiel, der &lt;em&gt;immer&lt;/em&gt; ausgeführt wird, bevor der Programmfluss fortgesetzt wird.&lt;/p&gt;
&lt;p&gt;Ein Beispiel:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;try {
   int result = 10 / 2;
   System.out.println(&quot;Das Ergebnis ist: &quot; + result);
} catch (ArithmeticException e) {
   System.out.println(&quot;Fehler: &quot; + e.getMessage());
} finally {
   System.out.println(&quot;Aufräumarbeiten werden ausgeführt (z. B. Datei schließen).&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Dieser Block stellt sicher, dass wichtige Aufräumaufgaben unabhängig vom Ausgang des &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;try&lt;/span&gt;‑Blocks durchgeführt werden.&lt;/p&gt;
&lt;h1&gt;Eigene Ausnahmen definieren (Custom Exceptions)&lt;/h1&gt;
&lt;p&gt;Oft ist es sinnvoll, eigene Ausnahmen zu definieren, um spezifische Fehlerfälle klar benennen zu können, wie z. B. fehlerhafte Nutzereingaben oder den Ausfall eines Sensors in eingebetteten Systemen. Die Definition einer eigenen Exception erfolgt in Java, indem man die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Exception&lt;/span&gt; erweitert:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt; // Definition einer benutzerdefinierten Exception
public class InvalidInputException extends Exception {
   public InvalidInputException(String message) {
      super(message);
   }
}

// Verwendung der benutzerdefinierten Exception in einer Methode
public void validateInput(int input) throws InvalidInputException {
   if (input &amp;lt; 0) {
      throw new InvalidInputException(&quot;Ungültiger Wert: Das Input darf nicht negativ sein.&quot;);
   }
   System.out.println(&quot;Eingabe ist gültig: &quot; + input);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Durch den gezielten Einsatz eigener Exceptions können Entwickler Fehlerfälle präziser abfangen und dem Benutzer aussagekräftige Rückmeldungen geben – beispielsweise in einer Benutzeroberfläche, die auf defekte Hardware oder nicht erfüllte Systemvoraussetzungen reagiert.&lt;/p&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1&lt;/strong&gt;: Falsche Eingabe&lt;br /&gt;Schreibe ein Programm, das den Benutzer zur Eingabe einer Zahl auffordert. Wenn der Benutzer einen ungültigen (z. B. nicht-numerischen) Wert eingibt, soll eine benutzerdefinierte Exception „InvalidInputException“ geworfen und in einem catch‑Block abgefangen werden, sodass eine entsprechende Fehlermeldung ausgegeben wird.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 2&lt;/strong&gt;: Falscher Messwert&lt;br /&gt;Simuliere eine einfache Hardware-Komponente – zum Beispiel einen Sensorsimulator –, der einen Messwert zurückgibt. Falls der Messwert einen bestimmten Schwellenwert unterschreitet oder überschreitet, wirf eine Exception (z. B. SensorMalfunctionException) und fange diese in einem try‑catch‑Block ab, um eine Warnung auszugeben.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Was passiert, wenn im try‑Block eine Exception auftritt, und wie wird diese im catch‑Block verarbeitet?&lt;/li&gt;
&lt;li&gt;Erkläre den Unterschied zwischen throw und throws.&lt;/li&gt;
&lt;li&gt;Welche Aufgabe übernimmt der finally‑Block, und warum ist er nützlich?&lt;/li&gt;
&lt;li&gt;Wie und warum würdest eine eigene Exception definieren?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;try&lt;/span&gt;‑Block: Enthält Code, der potenziell Fehler verursachen kann.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;catch&lt;/span&gt;‑Block: Fängt spezifische Exception-Typen ab und behandelt sie, um den Programmfluss aufrechtzuerhalten.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;throw:&lt;/span&gt; Ermöglicht das manuelle Auslösen von Exceptions.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;throws&lt;/span&gt;: Deklariert in der Methodensignatur, dass eine Methode eine Exception werfen kann.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;finally:&lt;/span&gt; Ein Block, der immer ausgeführt wird – ideal für Aufräumarbeiten.&lt;/li&gt;
&lt;li&gt;Custom Exceptions: Erlauben eine präzisere Fehlerbehandlung, indem spezifische Fehlerfälle benannt und behandelt werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                                              <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                              <int value="4"></int>
                                              <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                                              <int value="2"></int>
                                              <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                                              <int value="3"></int>
                                              <string role="key" value="htmlTag"></string>
                                              <string value="div"></string>
                                              <string role="key" value="images"></string>
                                              <instance class="exe.engine.galleryidevice.GalleryImages">
                                               <dictionary>
                                                <string role="key" value=".listitems"></string>
                                                <list></list>
                                                <string role="key" value="idevice"></string>
                                                <reference key="19"></reference>
                                               </dictionary>
                                              </instance>
                                              <string role="key" value="intlinks_to_anchors"></string>
                                              <dictionary></dictionary>
                                              <string role="key" value="nextImageId"></string>
                                              <int value="0"></int>
                                              <string role="key" value="parentNode"></string>
                                              <reference key="20"></reference>
                                             </dictionary>
                                            </instance>
                                           </list>
                                           <string role="key" value="icon"></string>
                                           <unicode value=""></unicode>
                                           <string role="key" value="id"></string>
                                           <unicode value="7"></unicode>
                                           <string role="key" value="ideviceCategory"></string>
                                           <unicode value="Text and Tasks"></unicode>
                                           <string role="key" value="lastIdevice"></string>
                                           <bool value="0"></bool>
                                           <string role="key" value="nextFieldId"></string>
                                           <int value="3"></int>
                                           <string role="key" value="originalicon"></string>
                                           <string value=""></string>
                                           <string role="key" value="parentNode"></string>
                                           <reference key="20"></reference>
                                           <string role="key" value="systemResources"></string>
                                           <list></list>
                                           <string role="key" value="undo"></string>
                                           <bool value="1"></bool>
                                           <string role="key" value="userResources"></string>
                                           <list></list>
                                           <string role="key" value="version"></string>
                                           <int value="0"></int>
                                          </dictionary>
                                         </instance>
                                        </list>
                                        <string role="key" value="_id"></string>
                                        <unicode value="7"></unicode>
                                        <string role="key" value="_package"></string>
                                        <reference key="4"></reference>
                                        <string role="key" value="anchor_fields"></string>
                                        <list></list>
                                        <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                                        <int value="2"></int>
                                        <string role="key" value="exportType"></string>
                                        <string value="website"></string>
                                        <string role="key" value="last_full_node_path"></string>
                                        <string value="exe-node:Objektorientierte%20Programmierung:Java%20:Ausnahmebehandlung"></string>
                                        <string role="key" value="parent"></string>
                                        <reference key="16"></reference>
                                        <string role="key" value="top_anchors_linked_from_fields"></string>
                                        <list>
                                         <reference key="14"></reference>
                                        </list>
                                        <string role="key" value="children"></string>
                                        <list></list>
                                       </dictionary>
                                      </instance>
                                      <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top"></unicode>
                                      <reference key="21"></reference>
                                     </dictionary>
                                     <string role="key" value="nextImageId"></string>
                                     <int value="0"></int>
                                     <string role="key" value="parentNode"></string>
                                     <reference key="22"></reference>
                                    </dictionary>
                                   </instance>
                                   <reference key="10"></reference>
                                   <instance class="exe.engine.field.TextAreaField" reference="23">
                                    <dictionary>
                                     <string role="key" value="_id"></string>
                                     <unicode value="131_2"></unicode>
                                     <string role="key" value="_idevice"></string>
                                     <instance class="exe.engine.jsidevice.JsIdevice" reference="24">
                                      <dictionary>
                                       <string role="key" value="_title"></string>
                                       <unicode value=""></unicode>
                                       <string role="key" value="_attributes"></string>
                                       <list>
                                        <tuple>
                                         <string value="title"></string>
                                         <list>
                                          <string value="Title"></string>
                                          <int value="0"></int>
                                          <int value="0"></int>
                                         </list>
                                        </tuple>
                                        <tuple>
                                         <string value="category"></string>
                                         <list>
                                          <string value="Category"></string>
                                          <int value="0"></int>
                                          <int value="1"></int>
                                         </list>
                                        </tuple>
                                        <tuple>
                                         <string value="css-class"></string>
                                         <list>
                                          <string value="CSS class"></string>
                                          <int value="0"></int>
                                          <int value="2"></int>
                                         </list>
                                        </tuple>
                                        <tuple>
                                         <string value="icon"></string>
                                         <list>
                                          <string value="Icon"></string>
                                          <int value="0"></int>
                                          <int value="3"></int>
                                         </list>
                                        </tuple>
                                       </list>
                                       <string role="key" value="_author"></string>
                                       <string value=""></string>
                                       <string role="key" value="_iDeviceDir"></string>
                                       <string value="text"></string>
                                       <string role="key" value="_purpose"></string>
                                       <string value=""></string>
                                       <string role="key" value="_tip"></string>
                                       <string value=""></string>
                                       <string role="key" value="_typeName"></string>
                                       <unicode value="Text"></unicode>
                                       <string role="key" value="_valid"></string>
                                       <bool value="1"></bool>
                                       <string role="key" value="class_"></string>
                                       <unicode value="text"></unicode>
                                       <string role="key" value="edit"></string>
                                       <bool value="0"></bool>
                                       <string role="key" value="emphasis"></string>
                                       <int value="0"></int>
                                       <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                                       <int value="1"></int>
                                       <string role="key" value="fields"></string>
                                       <list>
                                        <reference key="23"></reference>
                                       </list>
                                       <string role="key" value="icon"></string>
                                       <unicode value=""></unicode>
                                       <string role="key" value="id"></string>
                                       <unicode value="4"></unicode>
                                       <string role="key" value="ideviceCategory"></string>
                                       <unicode value="Text and Tasks"></unicode>
                                       <string role="key" value="lastIdevice"></string>
                                       <bool value="0"></bool>
                                       <string role="key" value="nextFieldId"></string>
                                       <int value="3"></int>
                                       <string role="key" value="originalicon"></string>
                                       <string value=""></string>
                                       <string role="key" value="parentNode"></string>
                                       <instance class="exe.engine.node.Node" reference="32">
                                        <dictionary>
                                         <string role="key" value="_title"></string>
                                         <unicode value="Polymorphismus"></unicode>
                                         <string role="key" value="idevices"></string>
                                         <list>
                                          <reference key="24"></reference>
                                         </list>
                                         <string role="key" value="_id"></string>
                                         <unicode value="4"></unicode>
                                         <string role="key" value="_package"></string>
                                         <reference key="4"></reference>
                                         <string role="key" value="anchor_fields"></string>
                                         <list></list>
                                         <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                                         <int value="2"></int>
                                         <string role="key" value="exportType"></string>
                                         <string value="website"></string>
                                         <string role="key" value="last_full_node_path"></string>
                                         <string value="exe-node:Objektorientierte%20Programmierung:Polymorphismus"></string>
                                         <string role="key" value="parent"></string>
                                         <reference key="3"></reference>
                                         <string role="key" value="top_anchors_linked_from_fields"></string>
                                         <list>
                                          <instance class="exe.engine.field.TextAreaField" reference="25">
                                           <dictionary>
                                            <string role="key" value="_id"></string>
                                            <unicode value="127_2"></unicode>
                                            <string role="key" value="_idevice"></string>
                                            <instance class="exe.engine.jsidevice.JsIdevice" reference="26">
                                             <dictionary>
                                              <string role="key" value="_title"></string>
                                              <unicode value=""></unicode>
                                              <string role="key" value="_attributes"></string>
                                              <list>
                                               <tuple>
                                                <string value="title"></string>
                                                <list>
                                                 <string value="Title"></string>
                                                 <int value="0"></int>
                                                 <int value="0"></int>
                                                </list>
                                               </tuple>
                                               <tuple>
                                                <string value="category"></string>
                                                <list>
                                                 <string value="Category"></string>
                                                 <int value="0"></int>
                                                 <int value="1"></int>
                                                </list>
                                               </tuple>
                                               <tuple>
                                                <string value="css-class"></string>
                                                <list>
                                                 <string value="CSS class"></string>
                                                 <int value="0"></int>
                                                 <int value="2"></int>
                                                </list>
                                               </tuple>
                                               <tuple>
                                                <string value="icon"></string>
                                                <list>
                                                 <string value="Icon"></string>
                                                 <int value="0"></int>
                                                 <int value="3"></int>
                                                </list>
                                               </tuple>
                                              </list>
                                              <string role="key" value="_author"></string>
                                              <string value=""></string>
                                              <string role="key" value="_iDeviceDir"></string>
                                              <string value="text"></string>
                                              <string role="key" value="_purpose"></string>
                                              <string value=""></string>
                                              <string role="key" value="_tip"></string>
                                              <string value=""></string>
                                              <string role="key" value="_typeName"></string>
                                              <unicode value="Text"></unicode>
                                              <string role="key" value="_valid"></string>
                                              <bool value="1"></bool>
                                              <string role="key" value="class_"></string>
                                              <unicode value="text"></unicode>
                                              <string role="key" value="edit"></string>
                                              <bool value="0"></bool>
                                              <string role="key" value="emphasis"></string>
                                              <int value="0"></int>
                                              <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                                              <int value="1"></int>
                                              <string role="key" value="fields"></string>
                                              <list>
                                               <reference key="25"></reference>
                                              </list>
                                              <string role="key" value="icon"></string>
                                              <unicode value=""></unicode>
                                              <string role="key" value="id"></string>
                                              <unicode value="28"></unicode>
                                              <string role="key" value="ideviceCategory"></string>
                                              <unicode value="Text and Tasks"></unicode>
                                              <string role="key" value="lastIdevice"></string>
                                              <bool value="0"></bool>
                                              <string role="key" value="nextFieldId"></string>
                                              <int value="3"></int>
                                              <string role="key" value="originalicon"></string>
                                              <string value=""></string>
                                              <string role="key" value="parentNode"></string>
                                              <instance class="exe.engine.node.Node" reference="33">
                                               <dictionary>
                                                <string role="key" value="_title"></string>
                                                <unicode value="Konzeption und Dokumentation"></unicode>
                                                <string role="key" value="idevices"></string>
                                                <list>
                                                 <reference key="26"></reference>
                                                </list>
                                                <string role="key" value="_id"></string>
                                                <unicode value="19"></unicode>
                                                <string role="key" value="_package"></string>
                                                <reference key="4"></reference>
                                                <string role="key" value="anchor_fields"></string>
                                                <list></list>
                                                <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                                                <int value="2"></int>
                                                <string role="key" value="exportType"></string>
                                                <string value="website"></string>
                                                <string role="key" value="last_full_node_path"></string>
                                                <string value="exe-node:Objektorientierte%20Programmierung:Konzeption%20und%20Dokumentation"></string>
                                                <string role="key" value="parent"></string>
                                                <reference key="3"></reference>
                                                <string role="key" value="top_anchors_linked_from_fields"></string>
                                                <list></list>
                                                <string role="key" value="children"></string>
                                                <list></list>
                                               </dictionary>
                                              </instance>
                                              <string role="key" value="systemResources"></string>
                                              <list></list>
                                              <string role="key" value="undo"></string>
                                              <bool value="1"></bool>
                                              <string role="key" value="userResources"></string>
                                              <list>
                                               <instance class="exe.engine.resource.Resource" reference="27">
                                                <dictionary>
                                                 <string role="key" value="_idevice"></string>
                                                 <reference key="26"></reference>
                                                 <string role="key" value="_package"></string>
                                                 <reference key="4"></reference>
                                                 <string role="key" value="_storageName"></string>
                                                 <string value="aktivitatsdiagramm.png"></string>
                                                 <string role="key" value="_userName"></string>
                                                 <string value="c:\\users\\jdittrib\\appdata\\local\\temp\\tmp3iv5m_\\aktivitatsdiagramm.png"></string>
                                                 <string role="key" value="checksum"></string>
                                                 <string value="bea5be8e6c5f6bb1e4149a0242b97fb7"></string>
                                                 <string role="key" value="exe.engine.resource.Resource.persistenceVersion"></string>
                                                 <int value="2"></int>
                                                 <string role="key" value="exe.engine.resource._Resource.persistenceVersion"></string>
                                                 <int value="2"></int>
                                                 <string role="key" value="warningMsg"></string>
                                                 <string value=""></string>
                                                </dictionary>
                                               </instance>
                                               <instance class="exe.engine.resource.Resource" reference="28">
                                                <dictionary>
                                                 <string role="key" value="_idevice"></string>
                                                 <reference key="26"></reference>
                                                 <string role="key" value="_package"></string>
                                                 <reference key="4"></reference>
                                                 <string role="key" value="_storageName"></string>
                                                 <string value="klassendiagramm_beispiel2.png"></string>
                                                 <string role="key" value="_userName"></string>
                                                 <string value="c:\\users\\jdittrib\\appdata\\local\\temp\\tmp3iv5m_\\klassendiagramm_beispiel2.png"></string>
                                                 <string role="key" value="checksum"></string>
                                                 <string value="9204c0b50abec03c0414d7426fbd5a7a"></string>
                                                 <string role="key" value="exe.engine.resource.Resource.persistenceVersion"></string>
                                                 <int value="2"></int>
                                                 <string role="key" value="exe.engine.resource._Resource.persistenceVersion"></string>
                                                 <int value="2"></int>
                                                 <string role="key" value="warningMsg"></string>
                                                 <string value=""></string>
                                                </dictionary>
                                               </instance>
                                              </list>
                                              <string role="key" value="version"></string>
                                              <int value="0"></int>
                                             </dictionary>
                                            </instance>
                                            <string role="key" value="_instruc"></string>
                                            <string value=""></string>
                                            <string role="key" value="_name"></string>
                                            <string value=""></string>
                                            <string role="key" value="anchor_names"></string>
                                            <list></list>
                                            <string role="key" value="anchors_linked_from_fields"></string>
                                            <dictionary></dictionary>
                                            <string role="key" value="content_w_resourcePaths"></string>
                                            <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung - Hausbau nach Plan&lt;/h1&gt;
&lt;p&gt;Stell dir vor, du möchtest ein Haus bauen - wie gehst du vor? Was machst du als erstes? Wahrscheinlich würdest du nicht direkt mit dem bauen anfangen, sondern zunächst einen Plan erstellen. Du machst dir Gedanken, welche Anforderungen das Haus erfüllen muss, dann würdest du einen Grundriss zeichnen, das Material besorgen und dann erst anfangen das Haus zu bauen. Fertig, oder? Nein, am Ende würdest du noch dafür sorgen, dass alles gut dokumentiert ist. Denn wenn du in ein paar Jahren einen Wasserrohrbruch hast, möchtest du wissen, wo genau die Rohre entlang laufen oder wenn du die Zimmertüre an einer anderen Stelle haben möchtest, dann musst du wissen, wo genau in der Wand ide Kabel entlang laufen.&lt;/p&gt;
&lt;p&gt;Dieses Vorgehen lässt sich genau so auf die Softwareentwicklung übertragen. Wenn du ein Software-Projekt umsetzen möchtest, ist es nicht sonderlich sinnvoll direkt mit dem Programmieren anzufangen, ohne einen Plan zu haben. wie beim Hausbau muss erst eine Analyse der Anforderungen an die Software erstellt werden. Danach kann ein Konzept erstellt werden, welches anschließend im Code umgesetzt wird. Abschließend (oder am besten währenddessen) muss eine Dokumentation erstellt werden, damit man auch nach einiger Zeit das Programm noch erweitern oder korrigieren kann.&lt;/p&gt;
&lt;p&gt;In diesem Abschnitt beschäftigen wir uns mit dem Konzeption und der Dokumentation von objektorientierter Software. Du lernst in diesem Abschnitt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wie man bei der Konzeption von Software vorgeht&lt;/li&gt;
&lt;li&gt;Was es mit der Unified Markup Language (kurz: UML) auf sich hat&lt;/li&gt;
&lt;li&gt;Wie du Klassendiagramme zur Konzeption und Dokumentation einsetzten kannst&lt;/li&gt;
&lt;li&gt;Wie du mithilfe von Aktivitätsdiagrammen den Programmablauf konzipieren und darstellen kannst&lt;/li&gt;
&lt;li&gt;Wie du mithilfe von Javadoc deinen Code automatisiert dokumentieren kannst&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Einführung in die strukturierte Softwareentwicklung&lt;/h1&gt;
&lt;p&gt;Als Programmieranfänger habt ihr bisher vielleicht schon einige Erfahrungen mit dem Schreiben von Code gesammelt. Möglicherweise sah euer Vorgehen dabei so aus:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Eine Idee für ein Programm haben&lt;/li&gt;
&lt;li&gt;Direkt anfangen zu coden&lt;/li&gt;
&lt;li&gt;Wenn etwas nicht funktioniert, durch Ausprobieren eine Lösung finden&lt;/li&gt;
&lt;li&gt;Das Programm so lange anpassen, bis es irgendwie läuft&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Diese Herangehensweise mag für kleine Projekte ausreichen. Bei größeren und komplexeren Softwareprojekten stößt man damit jedoch schnell an Grenzen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der Code wird unübersichtlich und schwer zu warten&lt;/li&gt;
&lt;li&gt;Änderungen und Erweiterungen sind aufwändig&lt;/li&gt;
&lt;li&gt;Fehler schleichen sich leicht ein und sind schwer zu finden&lt;/li&gt;
&lt;li&gt;Die Zusammenarbeit im Team wird erschwert&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Um diese Probleme zu vermeiden, haben sich in der professionellen Softwareentwicklung strukturierte Vorgehensweisen etabliert. Zwei zentrale Konzepte dabei sind die Anforderungsanalyse und der Softwareentwurf. Bei der Anforderungsanalyse geht es darum zunächst die Anforderungen an das Programm zu ermitteln und diese einfach zu modellieren. Beim Softwareentwurfgeht es darum, die Ergebnisse der Analyse zu nutzen, um die technische Umsetzung zu modellieren bzw. entwerfen.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel beschäftigen wir uns mit der &lt;em&gt;Objektorientierten&lt;/em&gt; Analyse (OOA) und dem &lt;em&gt;Objektorientierten&lt;/em&gt; Design (OOD). Dabei handelt es sich um objektorientierte Varianten der Anforderungsanalyse und des Softwareentwurfs. Beide Phasen nutzen objektorientierte Prinzipien wie &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Kapselung#auto_top&quot;&gt;Kapselung&lt;/a&gt;, &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top&quot;&gt;Vererbung&lt;/a&gt; und &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Polymorphismus#auto_top&quot;&gt;Polymorphismus&lt;/a&gt;, um bereits in der Analyse- und Design-Phase einen odjektorientierten Entwurf zu entwickeln. Indem bereits bei der Analyse und im Design objektorientierte Prinzipien angewendet werden, ist der Übergang zur Umsetzung in einem objektorientierten Programm später einfacher.&lt;/p&gt;
&lt;p&gt;Es gibt verschiedene Vorgehensmodelle für Softwareentwicklung. Einige davon wirst du im Laufe des Studium ausführlich kennenlernen. Für den Anfang folgen wir diesem einfachen Ablauf:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Konzeption: &lt;/strong&gt;In der Konzeption geht es darum, die Anforderungen an die Software zu analysieren und einen Softwareentwurf zu entwickeln.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementierung: &lt;/strong&gt;Bei der Implementierung geht es darum, den Softwareentwurf umzusetzen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dokumentation: &lt;/strong&gt;Bei der Dokumentation geht es darum den Aufbau der Software zu dokumentieren. Dies kann während oder nach dem Implementierung erfolgen.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Konzeption&lt;/h1&gt;
&lt;h2&gt;Objektorientierte Analyse&lt;/h2&gt;
&lt;p&gt;Der erste Schritt in der Softwareentwicklung ist die Anforderungsanalyse. Die Objektorientierte Analyse konzentriert sich darauf, die Anforderungen eines Systems zu verstehen und in ein Modell zu übersetzen, das die reale Welt widerspiegelt. Dabei werden Objekte, ihre Eigenschaften und Beziehungen identifiziert, die das zu entwickelnde System repräsentieren. Diese Phase hilft dir, ein klares Verständnis des Problems zu erlangen, bevor du mit der technischen Umsetzung beginnen.&lt;/p&gt;
&lt;p&gt;Der Prozess der OOA umfasst folgende Schritte:&lt;/p&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;1. Anforderungserhebung&lt;/h2&gt;
&lt;p&gt;Bei der Anforderungserhebung geht es darum, die Anforderungen an die Software zu sammeln, zu definieren und zu verstehen. Dies erfolgt zum Beispiel durch Interviews mit den Stakeholdern (Auftraggeber/Kunden) oder späteren Nutzern der Software.&lt;/p&gt;
&lt;p&gt;Stell dir vor, du erhältst den Auftrag einen Taschenrechner zu programmieren. Bevor du anfängst, musst du erstmal mit dem Auftraggeber klären, was der Taschenrechner alles können soll. Reichen die einfachen arithmetischen Operationen (Addition, Subtraktion, Multiplikation und Division) oder sollen weitere Funktionen hinzugefügt werden? Welche Designvorgaben gibt es für den Taschenrechner? Wer wird den Taschenrechner später nutzen? ...&lt;/p&gt;
&lt;h2&gt;2. Identifikation von Objekten und Klassen&lt;/h2&gt;
&lt;p&gt;Bei diesem Schritt geht es darum aus den Anforderungen Objekte abzuleiten, die deine Software braucht. Ähnliche Objekte können und Klassen gruppiert werden. Außerdem können bereits Attribute und Methoden für Klassen definiert werden. Bei diesem Schritt müssen noch nicht alle technischen Details geklärt sein. Ziel ist es einen ersten Überblick und eine erste Struktur zu erstellen - die auch noch Lücken haben kann.&lt;/p&gt;
&lt;p&gt;Bei unserem Taschenrechner könnte das folgendermaßen aussehen: Wir erinnern uns - die Objektorientierte Programmierung versucht Programme so zu entwicklen, dass sie echte Objekte aus der realen Welt beschreibt. Aus welchen Objekten besteht ein Taschenrechner? Mehrere Tasten (Zahlen 0-9, +, -, *, :, Komma, =, Eingabe löschen, ...), ein Display und eine Fläche auf der alles angeordnet ist. Eine erste Übersicht könnte somit folgendermaßen aussehen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fläche
&lt;ul&gt;
&lt;li&gt;Attribut: Tasten[] tasten&lt;/li&gt;
&lt;li&gt;Attribut: Display display&lt;/li&gt;
&lt;li&gt;Methode: void anzeigen()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Display
&lt;ul&gt;
&lt;li&gt;Attribut: String text&lt;/li&gt;
&lt;li&gt;Methode: void anzeigen()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Taste
&lt;ul&gt;
&lt;li&gt;Attribut: String label&lt;/li&gt;
&lt;li&gt;Methode: void anzeigen()&lt;/li&gt;
&lt;li&gt;Methode: void drücken()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In dieser Liste habe ich mir einen ersten Überblick über den Aufbau des Programms geschaffen. Ich habe die Klassen Fläche, Display und Taste mit diversen Attributen und Methoden definiert. Diese Liste ist nicht vollständig ausgearbeitet, aber ein guter erster Entwurf.&lt;/p&gt;
&lt;h2&gt;3. Modellierung von Beziehungen&lt;/h2&gt;
&lt;p&gt;Im nächsten Schritt geht es darum Beziehungen zwischen den einzelnen Klassen herauszuarbeiten. Dabei gibt es 4 Arten von Beziehungen: Assoziation, Vererbung, Aggregation und Komposition. Mehr zu diesen Beziehung erfährst du weiter unten im Abschnitt &lt;a href=&quot;#Beziehungen&quot;&gt;Beziehungen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bei unserem Taschenrechner liegt eine sogenannte Komposition vor. Die Komposition beschreibt eine Beziehung zwischen einen Ganzen und seinen Teilen, wobei das Ganze nur zusammen mit seinen Teilen, wobei weder das Ganze noch die Teile unabhängig voneinander existieren können. Das Ganze ist bei dem Taschenrechner die Fläche und die Teile aus denen die Fläche besteht, sind die Tasten und das Display. Ohne Tasten und Display ergibt die Fläche keinen Sinn - und einzeln ergeben weder Tasten noch Display einen Sinn.&lt;/p&gt;
&lt;h2&gt;4. Erstellen von UML-Diagrammen&lt;/h2&gt;
&lt;p&gt;Nachdem eine erste Struktur in Form von Auflistung der einzelnen Klassen und deren Eigenschaften und Beziehungen erfolgt ist, geht es im nächsten Schritt darum, diese Struktur zu visualisieren. Dies erfolgt mithilfe von sogenannten UML-Diagrammen. Dabei handelt es sich um Diagramme, die nach einen gewissen einheitlichen Schema erstellt wurden. Dieses Schema wird ist die Unified Markup Language. Zwei sinvolle Diagramme, welche erstellt werden sollten, sind das &lt;strong&gt;Klassendiagramm&lt;/strong&gt; für die statische Struktur und das &lt;strong&gt;Aktivitätsdiagramm&lt;/strong&gt; für die dynamische Struktur. Mehr zu den Themen UML, Klassendiagramm und Aktivitätsdiagramm erfährst du im Abschnitt &lt;a href=&quot;#UML&quot;&gt;UML-Diagramme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ein sehr einfaches Klassendiagramm für unseren Taschenrechner könnte zum Beispiel folgendermaßen aussehen:&lt;/p&gt;
&lt;div class=&quot;pre-code&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;|--------------------| |--------------------| |--------------------|
|       Fläche       | |      Display       | |       Taste        |
|--------------------| |--------------------| |--------------------|
| tasten: Tasten[]   | | text: String       | | label: String      |
| display: Display   | |                    | |                    |
|--------------------| |--------------------| |--------------------| 
| anzeigen(): void   | | anzeigen(): void   | | anzeigen(): void   |
|                    | |                    | | drücken(): void    |
|--------------------| |--------------------| |--------------------|&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;5. Verfeinerung des Modells&lt;/h2&gt;
&lt;p&gt;Der letzte Schritt der Objektorientierten Analyse ist die &lt;a href=&quot;#t534f9633-cb9c-ba95-2b93-b9153d3d656a&quot; id=&quot;link534f9633-cb9c-ba95-2b93-b9153d3d656a&quot; class=&quot;exe-tooltip definition-tt blue-tt&quot;&gt;iterative&lt;/a&gt; Überarbeitung und Verfeinerung der Modelle. Dies erfolgt zum Beispiel in Abbsprache mit den Stakeholdern oder durch Absprache innerhalb des Teams. In mehreren Durchläufen werden die Modelle basierend auf dem Feedback und den neuen Erkenntnissen angepasst.&lt;/p&gt;
&lt;p&gt;Eine Erkenntnis bei unserem Taschenrechner könnte zum Beispiel sein, dass alle drei Klassen eine Methode gemeinsam haben: anzeigen(). Hier wäre es möglich &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top&quot; title=&quot;Zum Kapitel Vererbung&quot;&gt;Vererbung&lt;/a&gt; anzuwenden und eine (&lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Abstraktion#auto_top&quot; title=&quot;Zum Kapitel Abstraktion&quot;&gt;abstrakte&lt;/a&gt;) Klasse AnzeigbaresObjekt zu erstellen, welche die Methode anzeigen() an die Unterklassen vererbt.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;a id=&quot;UML&quot;&gt;&lt;/a&gt;UML-Diagramme&lt;/h2&gt;
&lt;p&gt;UML-Diagramme ist ein Sammelbegriff für verschiedene Arten von Diagrammen, welche eingesetzt werden um verschiedene Aspekte (wie z.B. Struktur, Ablauf, Zusammenhänge, ...) im Bereich der Softwareentwicklung zu visualisieren. UML steht dabei für Unified Modeling Language. Dabei handelt es sich um eine visuelle Modellierungssprache für die Architektur ud das Design von Softwareprojekten. Die UML legt dabei fest, wie die einzelnen Elemente grafisch darstellt und angeordnet werden sollen. Wir kennen das bereits aus dem Programmablaufplan (PAP). Hier ist zum Beispiel festlegt, dass eine Verzweigung durch eine Raute dargestellt wird und eine Ein- oder Ausgabe durch ein Paralellogramm. Die Vorgaben für den Programmablaufplan stammen aber nicht aus der UML, sondern aus der DIN-Norm 66001.&lt;/p&gt;
&lt;p&gt;Diese Vereinheitlichung der Darstellung (egal ob nach DIN-Norm oder UML) hat den Vorteil, dass unsere Diagramme und Visualisierungen einheitlich sind und auch von anderen Personen gelesen und verstanden werden können. Die UML legt nicht fest, womit du diese Diagramme erstellst. Du kannst sie von Hand mit Papier und Bleistift erstellen, einen Text-Editor verwenden (so wie in manchen Beispielen hier) oder Tools einsetzen, welche dir etwas Arbeit abnehmen, wie z.B. &lt;a href=&quot;https://www.lucidchart.com/pages/de&quot;&gt;Lucidchart&lt;/a&gt;, &lt;a href=&quot;https://app.diagrams.net/&quot;&gt;draw.io&lt;/a&gt; oder &lt;a href=&quot;https://plantuml.com/de/&quot;&gt;PlantUML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Zwei wichtige Diagramm-Typen sind das Klassendiagramm, zur Visualisierung des statischen Struktur, und das Aktivitätsdiagramm, zur Visualisierung des dynamischen Struktur.&lt;/p&gt;
&lt;h3&gt;Klassendiagramme&lt;/h3&gt;
&lt;p&gt;Bei Klassendiagrammen handelt es sich um Strukturdiagramme der Unified Modeling Language (UML). Mithilfe von Klassendiagrammen können Klassen und deren Beziehungen visuell dargestellt werden. Ein UML-Klassendiagramm visualisiert somit die statische Struktur eines Systems. Es zeigt, welche Klassen (als Baupläne von Objekten) im System existieren, welche Attribute und Methoden sie besitzen und wie sie zueinander in Beziehung stehen.&lt;/p&gt;
&lt;p&gt;Der Aufbau von einem Klassendiagramm ist im Prinzip recht simpel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Klassen werden mithilfe von Boxen dargestellt&lt;/li&gt;
&lt;li&gt;Beziehungen zwischen den Klassen werden mithilfe von Pfeilen/Verbindungen dargestellt&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Klassen&lt;/h2&gt;
&lt;p&gt;&quot;Klassenboxen&quot; bestehen aus den 3 Teilen Name, Attribute und Methoden.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name:
&lt;ul&gt;
&lt;li&gt;Enthält den Namen der Klasse.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attribute:
&lt;ul&gt;
&lt;li&gt;Bei Attributen wird der Name des Attribut angegeben, gefolgt vom Datentyp&lt;/li&gt;
&lt;li&gt;Attribute können bei der Deklaration auch direkt initialisiert werden, dann wird der Wert mit angegeben&lt;/li&gt;
&lt;li&gt;Beispiel: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;name : String&lt;/span&gt; oder &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;alter : int = 18&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Methoden:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Bei Methoden wird der Name, ggf. Parameter und ggf. Rückgabewerte angegeben&lt;/li&gt;
&lt;li&gt;Beispiel: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;getName():String&lt;/span&gt; oder &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;setAlter(param:int):void&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neben den drei Hauptteilen, sind die Sichtbarkeitkeitsmodifikatoren ein weiterer wichtiger Aspekt, welcher in Klassendiagrammen dargestellt wird. Die Sichtbarkeitsmodifikatoren in Klassendiagrammen sind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public (+)&lt;/li&gt;
&lt;li&gt;private (-)&lt;/li&gt;
&lt;li&gt;protected (#)&lt;/li&gt;
&lt;li&gt;package (~)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Statische Eigenschaften einer Klasse (im Programmcode mit static gekennzeichnet) werden im Klassendiagramm dargestellt, indem das jeweilige Attribut oder die Methode &lt;span style=&quot;text-decoration: underline;&quot;&gt;unterstrichen&lt;/span&gt; wird.&lt;/p&gt;
&lt;h2&gt;Beziehungen&lt;/h2&gt;
&lt;p&gt;Neben den inneren Elementen definieren Klassendiagramme auch die Beziehungen zwischen den Klassen. Zu den gängigen Beziehungstypen zählen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assoziation:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Eine einfache Verbindung zwischen zwei Klassen, z. B. kann ein Student an mehreren Kursen teilnehmen, die Klassen Student und Kurs können aber unabhängig voneinander exisitieren.&lt;/li&gt;
&lt;li&gt;Dargestellt durch eine Linie, welche beide Klassen verbindet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vererbung:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Zeigt an, dass eine Unterklasse von einer Oberklasse erbt&lt;/li&gt;
&lt;li&gt;Dargestellt durch einen Pfeil, der von der Unterklasse zur Oberklasse zeigt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aggregation:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Steht für eine Beziehung zwischen einem Ganzen und seinen Teilen, bei der die Teilobjekte auch unabhängig existieren können, z.B. besteht ein Wald aus mehreren Bäumen (Teilobjekte). Der Wald kann ohne Bäume nicht existieren, ein Baum kann aber ohne einen Wald exisitieren.&lt;/li&gt;
&lt;li&gt;Dargestellt durch eine Linie mit einer nicht ausgefüllten Raute am Ende des Ganzen.&lt;br /&gt;Komposition hingegen drückt eine starke Bindung aus, bei der das Teil ohne das Ganze nicht existieren kann.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Komposition:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Drückt eine Beziehung zwischen einem Ganzen und seinen Teilen, bei der weder das Ganze noch die Teile unabhängig voneinander existieren können, wie z.B. ein Gebäude voller Räume. Ohne Räume gibt es keine Gebäude und ohne Gebäude keine Räume.&lt;/li&gt;
&lt;li&gt;Dargestellt durch eine Linie mit einer ausgefüllten Raute am Ende des Ganzen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Beispiele&lt;/h3&gt;
&lt;p&gt;Wie genau wird so ein Diagramm nun dargestellt? Hier hast du einiges an Freiheit: Du kannst es von Hand zeichnen (am besten mit Lineal), ein einem Texteditor erstellen oder spezielle Programm dafür verwenden: Hauptsache du hältst dich an die UML-Regeln für Klassendiagramme.&lt;/p&gt;
&lt;h4&gt;Beispiel: Mediaplayer&lt;/h4&gt;
&lt;p&gt;Hier siehst du ein Beispiel für ein einfaches Klassendiagramm für einen Mediaplayer, das in einem Texteditor erstellt wurde. Es zeigt die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;MediaPlayer&lt;/span&gt; und die Subklasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;AdvancedPlayer&lt;/span&gt;, welche von &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;MediaPlayer&lt;/span&gt; erbt.&lt;/p&gt;
&lt;div class=&quot;pre-code&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;+-----------------------+
|      MediaPlayer      |
+-----------------------+
| - volume: int         |
| - isPlaying: boolean  |
+-----------------------+
| + play(): void        |
| + pause(): void       |
| + stop(): void        |
+-----------------------+
            ▲
            │
+--------------------------+
|      AdvancedPlayer      |
+--------------------------+
| - equalizerSettings: int |
+--------------------------+
| + adjustEqualizer(): void|
+--------------------------+&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Beispiel: Tier-Hierarchie&lt;/h4&gt;
&lt;p&gt;Folgendes Beispiel ergänzt die Tierhierarchie aus dem Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top&quot;&gt;Vererbung&lt;/a&gt;. Ich habe sie ergänzt um die Klassen Ball, Ei und Forellenscharm. Ball und Hund haben eine Assoziation da sie jeweils auch unabhängig voneinerander exisitieren können. Ei und Vogel verbindet eine Aggregation, da es ohne Vogel kein Ei geben kann.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;resources/klassendiagramm_beispiel2.png&quot; alt=&quot;&quot; width=&quot;1181&quot; height=&quot;526&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Dieses Diagramm habe ich mit draw.io erstellt - ein kostenloses Programm, dass du im Browser nutzen oder herunterladen kannst und viele vorgefertigte Formen für verschiedene Anwendungsfälle enthält - unter anderem das Erstellen von UML-Klassendiagrammen.&lt;/p&gt;
&lt;h3&gt;Aktivitätsdiagramm&lt;/h3&gt;
&lt;div class=&quot; table-div&quot;&gt;Bei einem UML-Aktivitätsdiagramm handelt es sich um ein Flussdiagramm ähnlich wie ein Programmablaufplan. Das Ziel das Aktivitätsdiagramms ist es, die von einem System aausgeführten Aktivitäten abzubilden. Aktivitätsdiagramm visualisieren die dynamische Struktur und die Abläufe innerhalb eines Systems.&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;Aktivitätsdiagramm bestehen aus folgenden Grundelementen:&lt;/div&gt;
&lt;ul&gt;
&lt;li class=&quot; table-div&quot;&gt;Start- und Endknoten: Stellen den Beginn und das Ende einer Aktivität dar.&lt;/li&gt;
&lt;li class=&quot; table-div&quot;&gt;Aktionen: Stellen einen Schritt in der Aktivität dar, welche von dem Benutzer oder der Software durchgeführt werden&lt;/li&gt;
&lt;li class=&quot; table-div&quot;&gt;Entscheidungsknoten: Stellen eine Verzeigung dar, welche an eine Bedinung geknüpft ist&lt;/li&gt;
&lt;li class=&quot; table-div&quot;&gt;Kontrollflüsse: Werden dargestellt durch Verbindungen zwischen dein einzelnen Elementen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dies sind einige der am häufigsten verwendeten Symbole in einem Aktivitätsdiagramm:&lt;/p&gt;
&lt;div class=&quot;exe-fx exe-tabs&quot;&gt;
&lt;h2&gt;Startknoten&lt;/h2&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;img data-element-page-location=&quot;body&quot; data-element-type=&quot;image&quot; alt=&quot;Anfangssymbol&quot; class=&quot;overwrite-css css-1s3yuia-imageContainer&quot; loading=&quot;lazy&quot; src=&quot;https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/uml/activity-diagram/initial-state-33x31.PNG&quot; width=&quot;50&quot; height=&quot;50&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;Steht am Anfang eines jeden Aktivitätsdiagrammes und stell den Start dar. Der Startknoten kann alleine stehen oder durch ein Notizsymbol ergänzt werden.&lt;/div&gt;
&lt;h2&gt;Aktion&lt;/h2&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;img data-element-page-location=&quot;body&quot; data-element-type=&quot;image&quot; alt=&quot;Aktivitätssymbol&quot; class=&quot;overwrite-css css-1s3yuia-imageContainer&quot; loading=&quot;lazy&quot; src=&quot;https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/uml/activity-diagram/activity-66x35.PNG&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Zeigt einen einzlenen Schritt innerhalb der Aktivität an und enthalten kurze Beschreibungen des jeweiligen Schritts.&lt;/p&gt;
&lt;h2&gt;Kontrollflüsse/Verbindungen&lt;/h2&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;img data-element-page-location=&quot;body&quot; data-element-type=&quot;image&quot; alt=&quot;Konnektorsymbol&quot; class=&quot;overwrite-css css-1s3yuia-imageContainer&quot; loading=&quot;lazy&quot; src=&quot;https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/uml/activity-diagram/arrow-66x11.PNG&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;Verbindungslinien mit Pfeilen stellen den Kontrollfluss innerhalb der Aktivität dar.&lt;/div&gt;
&lt;h2&gt;Synchronisierung&lt;/h2&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;img data-element-page-location=&quot;body&quot; data-element-type=&quot;image&quot; alt=&quot;Verbindungssymbol&quot; class=&quot;overwrite-css css-1s3yuia-imageContainer&quot; loading=&quot;lazy&quot; src=&quot;https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/uml/activity-diagram/join-66x57.PNG&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;Stellt eine Verbindung zwischen zwei paralell ablaufenden Aktivitäten dar, welche an dieser Stelle zusammengeführt werden.&lt;/div&gt;
&lt;h2&gt;Verzweigung&lt;/h2&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;img data-element-page-location=&quot;body&quot; data-element-type=&quot;image&quot; alt=&quot;Verzweigungssymbol&quot; class=&quot;overwrite-css css-1s3yuia-imageContainer&quot; loading=&quot;lazy&quot; src=&quot;https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/uml-activity-diagram-symbols-meaning/UML_activity_diagram_notation6-60x63.PNG&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;Spaltet die Aktivität auf in zwei Aktivitäten, welche paralell ablaufen.&lt;/div&gt;
&lt;h2&gt;Entscheidung&lt;/h2&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;img data-element-page-location=&quot;body&quot; data-element-type=&quot;image&quot; alt=&quot;Entscheidungssymbol&quot; class=&quot;overwrite-css css-1s3yuia-imageContainer&quot; loading=&quot;lazy&quot; src=&quot;https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/uml/activity-diagram/decision-33x30.PNG&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;Stellt eine Entscheidung dar, welche an eine Bedinung geknüpft ist.&lt;/div&gt;
&lt;h2&gt;Hinweis/Notiz&lt;/h2&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;img data-element-page-location=&quot;body&quot; data-element-type=&quot;image&quot; alt=&quot;Hinweissymbol&quot; class=&quot;overwrite-css css-1s3yuia-imageContainer&quot; loading=&quot;lazy&quot; src=&quot;https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/uml/activity-diagram/note-33x26@2x.PNG&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;Bietet die Möglichkeit zusätzliche Informationen zu ergänzen, welche nicht Teil der Aktivität selber sind.&lt;/div&gt;
&lt;h2&gt;Endknoten&lt;/h2&gt;
&lt;div class=&quot; table-div&quot;&gt;&lt;img data-element-page-location=&quot;body&quot; data-element-type=&quot;image&quot; alt=&quot;Endsymbol&quot; class=&quot;overwrite-css css-1s3yuia-imageContainer&quot; loading=&quot;lazy&quot; src=&quot;https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/uml/activity-diagram/end-state-33x32.PNG&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot; table-div&quot;&gt;Stellt das Ende einer Aktivität dar.&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Swimlanes&lt;/h4&gt;
&lt;p&gt;Aktivitätsdiagramme können Swimlanes enthalten, um Aktionen, die von verschiedenen Akteuren durchgeführt werden in sogenannten Threads zu gruppieren. Dabei können diese Akteure Benutzer sein, aber auch verschiedene Programme oder Teile eines Programms.&lt;/p&gt;
&lt;p&gt;Das Aktivitätsdiagramms eines Taschenrechners mit einer einfachen Rechenoperation könnte zum Beispiel folgendermaßen aussehen:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;resources/aktivitatsdiagramm.png&quot; alt=&quot;&quot; width=&quot;402&quot; height=&quot;642&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Vorgehen&lt;/h4&gt;
&lt;p&gt;Bei der Erstellung eines Aktivitätsdiagramms gehst du am besten folgendermaßen vor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Finde alle einzelnen Handlungsschritte für diese Aktivität&lt;/li&gt;
&lt;li&gt;Überlege dir, welche Akteure beteiligt sind&lt;/li&gt;
&lt;li&gt;Finde heraus, in welcher Reihenfolge die einzelnen Schritte haben&lt;/li&gt;
&lt;li&gt;Füge die Swimlanes hinzu&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Objektorientiertes Design&lt;/h2&gt;
&lt;p&gt;Das OOD baut auf den Ergebnissen der OOA auf und übersetzt das konzeptuelle Modell in eine konkrete Softwarearchitektur. OOD konzentriert sich dabei darauf, wie das System technisch umgesetzt werden soll. Folgende Aspekte sind dabei wichtig:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Architekturentwurf&lt;/strong&gt;&lt;br /&gt;Hier geht es um die Festlegung der Systemarchitektur. Haben wir ein monlithisches Programm, das aus einer Einheit besteht oder haben wir ein Programm, das z.B. eine Client-Server-Struktur hat?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Detaillierung der Klassen&lt;/strong&gt;&lt;br /&gt;Hierbei werden die Klassenstrukturen aus der OOA verfeinert, z.B. durch das Hinzufügen von Attributen und Methoden, des Festlegen von Zugriffmodifikatoren und das Bestimmen von Interfaces und abstrakten Klassen. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anwendung von Entwurfsprinzipien&lt;/strong&gt;&lt;br /&gt;Hier geht es um die bewusste Anwendung von Kapselung, Polymorphismus, Abstraktion und Vererbung. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Einsatz von Entwurfsmustern&lt;/strong&gt;&lt;br /&gt;Bei diesem Punkt geht es um die Verwendung von Design Pattern als Lösungsansatz für wiederkehrende Probleme&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Das OOD baut auf den Ergebnissen der OOA auf und verfeinert und konkretiert diese solange, bis mit der Implementierung der Software begonnen werden kann. Der Übergang von OOA zu OOD ist meist fließend. OOA und OOD unterscheiden sich dahingehend, dass mithilfe von OOA ein erstes Modell erstellt werden soll, das dabei hilft die Anforderungen an die Software zu verstehen und in eine Struktur zu übersetzen. OOD wiederum hat den Fokus den Schritt vom Modell hin zur Implementierung zu gehen und legt den Schwerpunkt dadurch auf die technische Ausarbeitung des Modells.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;Dokumentation&lt;/h1&gt;
&lt;p&gt;Dokuentation der Software ist ein zentraler Aspekt der Softwareentwicklung. Sie hilft dabei, dass Software auch nach der Entwicklung noch wartbar und erweiterbar ist. Stell dir vor, nach ein paar Jahren stellt sich heraus, dass in deiner Software eine gravierende Sicherheitslücke ist. Nun geht es darum möglichst schnell und zuverlässig diese Lücke zu schließen, auch wenn du nicht mehr weißt, was du dir damals bei der Entwicklung der Software alles gedacht hast. Aus diesem Grund muss Software dokumentiert werden - damit du und andere damit langfristig arbeiten können.&lt;/p&gt;
&lt;h2&gt;Javadoc&lt;/h2&gt;
&lt;p&gt;Ein wichtiges Tool zur Dokumentation von Java-Programmen ist Javadoc. Javadoc ist das standardisierte Tool zur Erzeugung von API-Dokumentationen aus Java-Quellcode. Eine API-Dokumentation ist eine umfassende Anleitung, die Entwicklern detaillierte Informationen zur Integration und Nutzung einer Programmierschnittstelle bereitstellt, einschließlich Beschreibungen von Endpunkten, Methoden, Parametern, Rückgabewerten und Fehlercodes.&lt;/p&gt;
&lt;h3&gt;Wie funktioniert Javadoc?&lt;/h3&gt;
&lt;p&gt;Die Dokumentation mit Javadoc erfolgt mithilfe von Javadoc Kommentaren im Quellcode. Diese Kommentare enthalten Informationen zu Klassen, Attributen und Methoden. Das Hilfsprogramm javadoc liest den Quellcode und erzeugt daraus HTML-Seiten mit der Dokumentation der Software.&lt;/p&gt;
&lt;h3&gt;Javadoc Kommentare&lt;/h3&gt;
&lt;p&gt;Der Syntax für Javadoc Kommentare ist ein Sonderfall des mehrzeiligen Kommentars in Java und sieht folgendemaßen aus:&lt;/p&gt;
&lt;div class=&quot;pre-code&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;/**
  * Das ist ein Javadoc Kommentar
  * In der obersten Zeile befinden sich zwei Sternchen - das Erkennungsmerkmal
  * von Javadoc Kommentaren
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Javadoc Kommentare können mithilfe von HTML beliebig formatiert werden.&lt;/p&gt;
&lt;p&gt;Javadoc Kommentare werden vor die Klasse, Methode oder das Attribut geschrieben, welches sie dokumentieren. In folgendem Beispiel soll die Dokumentation einer Methode erfolgen. Somit wird das Javadoc Kommentar vor die Methode geschrieben:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;/**
* Diese Methode berechnet die Summe von zwei Ganzzahlen.
*
* @param a Die erste Zahl.
* @param b Die zweite Zahl.
* @return Die Summe von a und b.
*/&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;   return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Das Javadoc Kommentar besteht aus einer Beschreibung und aus sogenannten Tags inklusive Beschreibung. Die hier verwendeten Tags sind &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@param,&lt;/span&gt; welche die Beschreibung eines Parameters der Methode einleitet und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@return,&lt;/span&gt; welches die Beschreibung des Rückgabewerts einer Methode einleitet.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;strong&gt;TIP:&lt;/strong&gt; In IntelliJ können Javadoc Kommentare automatisch und über das Kontextmenü erstellt werden. Um ein Javadoc Kommentar automatisch zu erstellen, tippst du /** ein und drückst danach ENTER. IntelliJ vervollständigt dann deinen Javadoc Kommentar. Alternativ kannst du auch den Textcursor innerhalb des Bezeichners platzieren und ALT + ENTER (oder OPTION + ENTER) drücken, um das Kontextmenü zu öffnen und dort &quot;Add Javadoc&quot; auswählen.&lt;/p&gt;
&lt;h3&gt;Tags in Javadoc&lt;/h3&gt;
&lt;p&gt;Neben den oben genannten Tags &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@param&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@return&lt;/span&gt; gibt es noch weitere Tags. Die folgende Tabelle listet die häufigsten und wichtigsten Tags auf:&lt;/p&gt;
&lt;table class=&quot;exe-table&quot; style=&quot;height: 275px;&quot;&gt;
&lt;thead&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;height: 25px; width: 647.4px;&quot;&gt;&lt;strong&gt;Beschreibung&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@param&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Beschreibt einen Parameter einer Methode oder eines Konstruktors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@return&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Beschreibt den Rückgabewert einer Methode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@throws&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Beschreibt eine Ausnahme, die von einer Methode geworfen werden kann&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@see&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Erstellt einen &quot;Siehe auch&quot;-Verweis auf andere Elemente der Dokumentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@deprecated&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px; text-align: left;&quot;&gt;Kennzeichnet eine Klasse, Methode oder ein Feld als veraltet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;{@link}&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Erstellt einen Link zu einer anderen Klasse oder Methode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@since&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Gibt die Version an, seit der ein Feature verfügbar ist&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@author&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Identifiziert den Autor des Codes (nur für Klassen und Schnittstellen)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@version&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Versionsinformation (nur für Klassen und Schnittstellen)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 110.817px;&quot;&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;{@code}&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;border-borderMain px-sm dark:border-borderMainDark min-w-[48px] break-normal border&quot; style=&quot;height: 25px; width: 647.4px;&quot;&gt;Formatiert Text in Codefont und maskiert HTML-Sonderzeichen&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Javadoc Dokumentation generieren&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Option 1: Javadoc mithilfe der Koemmandozeile generieren&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wechsle in das Verzeichnis, in dem sich dein Quellcode befindet. Führe folgenden Befehl aus, um die Dokumentation zu erstellen:&lt;/p&gt;
&lt;div class=&quot;highlighted-code code-style-2 language-markup&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-markup&quot;&gt;&lt;code class=&quot;  language-markup&quot;&gt;javadoc -d doc -sourcepath src -subpackages com.meineprojekt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;-d doc&lt;/span&gt; gibt an, dass die HTML-Dateien im Ordner „doc“ erstellt werden sollen.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;-sourcepath src&lt;/span&gt; zeigt den Pfad zu deinem Quellcode.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;-subpackages com.meineprojekt&lt;/span&gt; sorgt dafür, dass alle Unterpakete des angegebenen Pakets dokumentiert werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Weitere mögliche Optionen, welche du zu diesem Befehl hinzufügen kannst, sind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;-author &lt;/em&gt;Generierung der Dokumentation unter Berücksichtigung des &lt;em&gt;@author&lt;/em&gt; tag&lt;/li&gt;
&lt;li&gt;&lt;em&gt;-help &lt;/em&gt;zeigt die online Hilfe&lt;/li&gt;
&lt;li&gt;&lt;em&gt;-private&lt;/em&gt; generiert Dokumentation auch für private Attribute&lt;/li&gt;
&lt;li&gt;&lt;em&gt;-version&lt;/em&gt; Generierung der Dokumentation unter Berücksichtigung des &lt;em&gt;@version&lt;/em&gt; tag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Option 2: Javadoc in der IDE generieren (IntelliJ IDEA)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Öffne dein Projekt in IntelliJ IDEA.&lt;/li&gt;
&lt;li&gt;Gehe zu Tools &amp;gt; Generate JavaDoc….&lt;/li&gt;
&lt;li&gt;Wähle die zu dokumentierenden Module und lege den Zielordner für die HTML-Dokumentation fest.&lt;/li&gt;
&lt;li&gt;Du kannst hier auch erweiterte Optionen anpassen (z. B. Sichtbarkeitsstufen), um festzulegen, welche Klassen und Methoden dokumentiert werden sollen.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Praktische Hinweise und Tipps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Regelmäßige Aktualisierung:&lt;/strong&gt; Füge Javadoc-Kommentare von &lt;em&gt;Beginn an in deinen Code ein&lt;/em&gt; und aktualisiere sie bei Änderungen, um eine stets aktuelle Dokumentation zu gewährleisten.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vollständigkeit:&lt;/strong&gt; Jede öffentliche und geschützte Methode sollte kommentiert sein. Dies unterstützt den Wissensaustausch und ist für die spätere Nutzung und Erweiterung unerlässlich.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Überprüfe die generierte Dokumentation:&lt;/strong&gt; Oftmals können Tippfehler oder unvollständige Parameterangaben die automatische Dokumentation stören. Schaue dir im Anschluss immer die HTML-Dokumentation an, um Fehler zu erkennen und zu beheben.&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1&lt;/strong&gt;: Klassendiagramm&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Erstelle ein Klassendiagramm für ein einfaches Bibliothekssystem mit folgenden Klassen:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Buch (mit Attributen: Titel, Autor, ISBN&lt;/li&gt;
&lt;li&gt;Benutzer (mit Attributen: Name, Ausweisnummer)&lt;/li&gt;
&lt;li&gt;Ausleihe (mit Attributen: Ausleihdatum, Rückgabedatum)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Berücksichtige folgende Beziehung: Eine Ausleihe bezieht sich auf ein Buch und einen Benutzer&lt;/li&gt;
&lt;li&gt;Füge den Klassen jeweils mindestens eine Methode hinzu und verwende die korrekten UML-Notationen für Attribute, Methoden und Beziehungen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 2&lt;/strong&gt;: Aktivitätsdiagramm
&lt;ul&gt;
&lt;li&gt;Erstelle ein Aktivitätsdiagramm für den Prozess der Geldabhebung an einem Geldautomaten. Berücksichtige dabei folgende Schritte:
&lt;ul&gt;
&lt;li&gt;Karte einschieben&lt;/li&gt;
&lt;li&gt;PIN eingeben&lt;/li&gt;
&lt;li&gt;Betrag wählen&lt;/li&gt;
&lt;li&gt;Kontostand prüfen&lt;/li&gt;
&lt;li&gt;Geld ausgeben (wenn Kontostand ausreichend)&lt;/li&gt;
&lt;li&gt;Karte zurückgeben&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Füge eine Entscheidung hinzu, die prüft, ob der Kontostand ausreichend ist. Falls nicht, soll eine Fehlermeldung angezeigt werden. Verwende die korrekten UML-Symbole für Start, Ende, Aktionen, Entscheidungen und Kontrollflüsse.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 3&lt;/strong&gt;: Javadoc
&lt;ul&gt;
&lt;li&gt;Schreibe Javadoc-Kommentare für die folgende Klasse und Methode:
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Taschenrechner {
   public double addiere(double a, double b) {
      return a + b;
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Dein Javadoc-Kommentar sollte Folgendes enthalten:
&lt;ul&gt;
&lt;li&gt;Eine Beschreibung der Klasse&lt;/li&gt;
&lt;li&gt;Eine Beschreibung der Methode&lt;/li&gt;
&lt;li&gt;@param Tags für beide Parameter&lt;/li&gt;
&lt;li&gt;Ein @return Tag für den Rückgabewert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Achte auf die korrekte Syntax und Formatierung der Javadoc-Kommentare.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wie unterscheiden sich die Objektorientierte Analyse (OOA) und das Objektorientierte Design (OOD) in ihren Zielen und Schwerpunkten? Erläutere die Hauptunterschiede und erkläre, warum beide Phasen für die Softwareentwicklung wichtig sind.&lt;/li&gt;
&lt;li&gt;Stell dir vor, du sollst ein Klassendiagramm für ein einfaches Banksystem erstellen. Welche Klassen würdest du definieren und welche Beziehungen (z.B. Vererbung, Aggregation, Komposition) würdest du zwischen diesen Klassen darstellen? Begründen deine Entscheidungen.&lt;/li&gt;
&lt;li&gt;Erkläre den Zweck und die Vorteile von Aktivitätsdiagrammen in der Softwareentwicklung. Wie können diese Diagramme dazu beitragen, den Ablauf eines Programms besser zu verstehen und zu planen?&lt;/li&gt;
&lt;li&gt;Warum ist die Dokumentation von Code durch Javadoc so wichtig für die langfristige Wartbarkeit und Erweiterbarkeit von Software? Nenne mindestens drei konkrete Vorteile und erläutere, wie diese die Zusammenarbeit in einem Entwicklerteam verbessern können.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Strukturierte Softwareentwicklung ist für komplexe Projekte von großer Bedeutung, da sie Probleme wie unübersichtlichen Code und schwierige Wartung vermeidet.&lt;/li&gt;
&lt;li&gt;Der Prozess der Softwareentwicklung umfasst die Phasen Konzeption, Implementierung und Dokumentation, wobei jede Phase eine wichtige Rolle für den Erfolg des Projekts spielt.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objektorientierte Analyse (OOA): &lt;/strong&gt;Verständnis der Anforderungen und Erstellen eines Modells
&lt;ul&gt;
&lt;li&gt;Die &lt;strong&gt;Anforderungserhebung&lt;/strong&gt; bildet den ersten Schritt der OOA, bei dem alle funktionalen und nicht-funktionalen Anforderungen gesammelt und definiert werden.&lt;/li&gt;
&lt;li&gt;Bei der &lt;strong&gt;Identifikation von Objekten und Klassen&lt;/strong&gt; werden relevante Entitäten aus den Anforderungen extrahiert und in Klassen gruppiert.&lt;/li&gt;
&lt;li&gt;Die Modellierung von &lt;strong&gt;Beziehungen&lt;/strong&gt; zwischen den Klassen ist ein wichtiger Schritt, um die Struktur des Systems zu erfassen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UML-Diagramme&lt;/strong&gt; werden erstellt, um die Systemstruktur und -funktionen visuell darzustellen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Klassendiagramme&lt;/strong&gt; zeigen die statische Struktur des Systems, indem sie Klassen, deren Attribute und Methoden sowie die Beziehungen zwischen den Klassen darstellen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aktivitätsdiagramme&lt;/strong&gt; visualisieren die dynamische Struktur und die Abläufe innerhalb eines Systems, indem sie Aktionen, Entscheidungen und Kontrollflüsse abbilden.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objektorientiertes Design (OOD): &lt;/strong&gt;Verfeinern des Modells und Entwurf der technischen Umsetzung
&lt;ul&gt;
&lt;li&gt;Der &lt;strong&gt;Architekturentwurf&lt;/strong&gt; legt die grundlegende Struktur des Systems fest, wie beispielsweise eine Client-Server-Architektur oder eine Microservices-Architektur.&lt;/li&gt;
&lt;li&gt;Bei der &lt;strong&gt;Detaillierung der Klassen&lt;/strong&gt; werden die Strukturen aus der OOA verfeinert und zentrale Prinzipien wie Kapselung, Abstraktion und Vererbung umgesetzt.&lt;/li&gt;
&lt;li&gt;Der &lt;strong&gt;Einsatz von Design Patterns&lt;/strong&gt; hilft dabei, bewährte Lösungsansätze für wiederkehrende Probleme zu nutzen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dokumentation&lt;/strong&gt;&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Javadoc&lt;/strong&gt; ist ein wichtiges Tool zur Erstellung von API-Dokumentationen aus Java-Quellcode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Javadoc-Kommentare&lt;/strong&gt; werden im Quellcode verwendet, um Klassen, Attribute und Methoden zu dokumentieren.&lt;/li&gt;
&lt;li&gt;Die Verwendung von Tags wie @param, @return und @throws strukturiert die Dokumentation und macht sie leichter verständlich.&lt;/li&gt;
&lt;li&gt;Die Generierung der Javadoc-Dokumentation kann über die Kommandozeile oder integrierte Entwicklungsumgebungen erfolgen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;t534f9633-cb9c-ba95-2b93-b9153d3d656a&quot; class=&quot;exe-tooltip-text&quot;&gt;
&lt;p&gt;iterativ = sich schrittweise in wiederholten Vorgängen der exakten Lösung annähernd&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;"></unicode>
                                            <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                            <int value="4"></int>
                                            <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                                            <int value="2"></int>
                                            <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                                            <int value="3"></int>
                                            <string role="key" value="htmlTag"></string>
                                            <string value="div"></string>
                                            <string role="key" value="images"></string>
                                            <instance class="exe.engine.galleryidevice.GalleryImages">
                                             <dictionary>
                                              <string role="key" value=".listitems"></string>
                                              <list>
                                               <instance class="exe.engine.galleryidevice.GalleryImage">
                                                <dictionary>
                                                 <string role="key" value="_caption"></string>
                                                 <instance class="exe.engine.field.TextField">
                                                  <dictionary>
                                                   <string role="key" value="_id"></string>
                                                   <int value="307"></int>
                                                   <string role="key" value="_idevice"></string>
                                                   <none></none>
                                                   <string role="key" value="_instruc"></string>
                                                   <string value=""></string>
                                                   <string role="key" value="_name"></string>
                                                   <string value=""></string>
                                                   <string role="key" value="content"></string>
                                                   <string value=""></string>
                                                   <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                                   <int value="4"></int>
                                                  </dictionary>
                                                 </instance>
                                                 <string role="key" value="_id"></string>
                                                 <unicode value="28_127_2.9"></unicode>
                                                 <string role="key" value="_imageResource"></string>
                                                 <reference key="27"></reference>
                                                 <string role="key" value="_parent"></string>
                                                 <reference key="25"></reference>
                                                 <string role="key" value="_thumbnailResource"></string>
                                                 <none></none>
                                                 <string role="key" value="exe.engine.galleryidevice.GalleryImage.persistenceVersion"></string>
                                                 <int value="3"></int>
                                                 <string role="key" value="makeThumbnail"></string>
                                                 <bool value="0"></bool>
                                                </dictionary>
                                               </instance>
                                               <instance class="exe.engine.galleryidevice.GalleryImage">
                                                <dictionary>
                                                 <string role="key" value="_caption"></string>
                                                 <instance class="exe.engine.field.TextField">
                                                  <dictionary>
                                                   <string role="key" value="_id"></string>
                                                   <int value="308"></int>
                                                   <string role="key" value="_idevice"></string>
                                                   <none></none>
                                                   <string role="key" value="_instruc"></string>
                                                   <string value=""></string>
                                                   <string role="key" value="_name"></string>
                                                   <string value=""></string>
                                                   <string role="key" value="content"></string>
                                                   <string value=""></string>
                                                   <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                                   <int value="4"></int>
                                                  </dictionary>
                                                 </instance>
                                                 <string role="key" value="_id"></string>
                                                 <unicode value="28_127_2.10"></unicode>
                                                 <string role="key" value="_imageResource"></string>
                                                 <reference key="28"></reference>
                                                 <string role="key" value="_parent"></string>
                                                 <reference key="25"></reference>
                                                 <string role="key" value="_thumbnailResource"></string>
                                                 <none></none>
                                                 <string role="key" value="exe.engine.galleryidevice.GalleryImage.persistenceVersion"></string>
                                                 <int value="3"></int>
                                                 <string role="key" value="makeThumbnail"></string>
                                                 <bool value="0"></bool>
                                                </dictionary>
                                               </instance>
                                              </list>
                                              <string role="key" value="idevice"></string>
                                              <reference key="25"></reference>
                                             </dictionary>
                                            </instance>
                                            <string role="key" value="intlinks_to_anchors"></string>
                                            <dictionary>
                                             <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Abstraktion#auto_top"></unicode>
                                             <reference key="17"></reference>
                                             <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Kapselung#auto_top"></unicode>
                                             <instance class="exe.engine.node.Node" reference="31">
                                              <dictionary>
                                               <string role="key" value="_title"></string>
                                               <unicode value="Kapselung"></unicode>
                                               <string role="key" value="idevices"></string>
                                               <list>
                                                <instance class="exe.engine.jsidevice.JsIdevice" reference="29">
                                                 <dictionary>
                                                  <string role="key" value="_title"></string>
                                                  <unicode value=""></unicode>
                                                  <string role="key" value="_attributes"></string>
                                                  <list>
                                                   <tuple>
                                                    <string value="title"></string>
                                                    <list>
                                                     <string value="Title"></string>
                                                     <int value="0"></int>
                                                     <int value="0"></int>
                                                    </list>
                                                   </tuple>
                                                   <tuple>
                                                    <string value="category"></string>
                                                    <list>
                                                     <string value="Category"></string>
                                                     <int value="0"></int>
                                                     <int value="1"></int>
                                                    </list>
                                                   </tuple>
                                                   <tuple>
                                                    <string value="css-class"></string>
                                                    <list>
                                                     <string value="CSS class"></string>
                                                     <int value="0"></int>
                                                     <int value="2"></int>
                                                    </list>
                                                   </tuple>
                                                   <tuple>
                                                    <string value="icon"></string>
                                                    <list>
                                                     <string value="Icon"></string>
                                                     <int value="0"></int>
                                                     <int value="3"></int>
                                                    </list>
                                                   </tuple>
                                                  </list>
                                                  <string role="key" value="_author"></string>
                                                  <string value=""></string>
                                                  <string role="key" value="_iDeviceDir"></string>
                                                  <string value="text"></string>
                                                  <string role="key" value="_purpose"></string>
                                                  <string value=""></string>
                                                  <string role="key" value="_tip"></string>
                                                  <string value=""></string>
                                                  <string role="key" value="_typeName"></string>
                                                  <unicode value="Text"></unicode>
                                                  <string role="key" value="_valid"></string>
                                                  <bool value="1"></bool>
                                                  <string role="key" value="class_"></string>
                                                  <unicode value="text"></unicode>
                                                  <string role="key" value="edit"></string>
                                                  <bool value="0"></bool>
                                                  <string role="key" value="emphasis"></string>
                                                  <int value="0"></int>
                                                  <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                                                  <int value="1"></int>
                                                  <string role="key" value="fields"></string>
                                                  <list>
                                                   <instance class="exe.engine.field.TextAreaField" reference="30">
                                                    <dictionary>
                                                     <string role="key" value="_id"></string>
                                                     <unicode value="127_2"></unicode>
                                                     <string role="key" value="_idevice"></string>
                                                     <reference key="29"></reference>
                                                     <string role="key" value="_instruc"></string>
                                                     <string value=""></string>
                                                     <string role="key" value="_name"></string>
                                                     <string value=""></string>
                                                     <string role="key" value="anchor_names"></string>
                                                     <list></list>
                                                     <string role="key" value="anchors_linked_from_fields"></string>
                                                     <dictionary></dictionary>
                                                     <string role="key" value="content_w_resourcePaths"></string>
                                                     <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Kapselung und das Prinzip der Datenkapselung&lt;/h1&gt;
&lt;p&gt;Ein wesentliches Prinzip der objektorientierten Programmierung ist die Kapselung (Encapsulation). Mit ihr werden die inneren Details (Die Daten und das Verhalten) eines Objekts verborgen und nur über definierte Schnittstellen (Methoden) zugänglich gemacht. Dies schützt die Daten vor ungewollten Zugriffen und Manipulationen.&lt;/p&gt;
&lt;h2&gt;Modifikatoren&lt;/h2&gt;
&lt;p&gt;Um den Zugriff auf die Attribute und Methoden einer Klasse zu steuern, kommen sogenannte Modifikatoren zum Einsatz. Folgende Modifikatoren regeln, wer auf die Mitglieder einer Klasse (Attribute und Methoden) zugreifen darf:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public:&lt;/span&gt; Mitglieder sind von überall zugreifbar.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;private:&lt;/span&gt; Mitglieder sind nur innerhalb der gleichen Klasse sichtbar.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;protected:&lt;/span&gt; Mitglieder sind innerhalb der gleichen Klasse und deren Subklassen zugänglich.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In der Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Auto&lt;/span&gt; wird beispielsweise das Attribut marke als &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;private&lt;/span&gt; deklariert:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; String marke&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Dadurch wird verhindert, dass außerhalb der Klasse direkt darauf zugegriffen wird. Das bedeutet, dass dieses Attribut von außerhalb weder gelesen noch bearbeitet werden darf.&lt;/p&gt;
&lt;h2&gt;Getter und Setter&lt;/h2&gt;
&lt;p&gt;Stattdessen werden &lt;strong&gt;Getter- und Setter-Methoden&lt;/strong&gt; angeboten, um kontrolliert Änderungen vorzunehmen. Getter sind dafür da Informationen zu lesen, Setter sind dafür da Informationen zu bearbeiten. Durch die Trennung in Getter und Setter, habe ich die Möglichkeit z.B. das Lesen der Daten durch andere Klassen zu ermöglichen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;(public),&lt;/span&gt; das Ändern der Daten aber nur von innerhalb der Klasse zu emöglichen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;(private).&lt;/span&gt; Setter können außerdem dafür verwendet werden, um Daten zu prüfen oder zu bearbeiten, bevor der alte Wert des Attributs überschrieben wird.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Getter&lt;/strong&gt; sind Methoden, die auf ein bestimmtes Attribut zugreifen und dieses als Rückgabewert zurückgeben&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Setter&lt;/strong&gt; sind Methoden, die einen Wert als Parameter übergeben bekommen, diesen ggf. prüfen oder bearbeiten und dann (bei erfolgreicher Prüfung bzw. nach der Bearbeitung) den Wert einem Attribut zuweisen.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Öffentliche Methode zum lesen der Marke&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;token function&quot;&gt;getMarke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; marke&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Öffentliche Methode zum ändern der Marke inkl. Bearbeitung&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setMarke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String marke&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Hier wird sichergestellt, dass die Marke klein geschrieben wird.&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marke &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; marke&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mit dieser Technik sorgt man dafür, dass die Objektdaten konsistent bleiben und nicht unbeabsichtigt verändert werden.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beispiel&lt;/strong&gt;: Student/in&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; matrikelnummer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Getter-Methode&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getMatrikelnummer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; matrikelnummer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Setter-Methode&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setMatrikelnummer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; matrikelnummer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Beispiel: Prüfung, dass die Matrikelnummer positiv ist&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matrikelnummer &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matrikelnummer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; matrikelnummer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ungültige Matrikelnummer!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In diesem Beispiel wird überprüft, ob die Matrikelnummer, die an die Methode setMatrikelnummer() übergeben wurde, größer als 0 ist. Falls nicht, wird der Wert nicht verändert und eine Fehlermeldung in der Konsole ausgegeben.&lt;/p&gt;
&lt;h2&gt;Relevanz von Kapselung&lt;/h2&gt;
&lt;p&gt;In den einfachen Beispielen, die wir hier in dem Modul behandeln, mag die Wichtigkeit von Kapselung nicht sonderlich groß sein. Bei Softwareprojekten in der Wirtschaft ist dies allerdings enorm wichtig. Wenn keine oder eine schlechte Kapselung in einer Klasse vorliegen, kann das gravierende Folgen haben. &lt;/p&gt;
&lt;h3&gt;Unbeabsichtigte Datenmanipulation&lt;/h3&gt;
&lt;p&gt;Ohne angemessene Kapselung können externe Klassen direkt auf interne Daten zugreifen und diese möglicherweise auf unerwünschte Weise verändern.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt; Bankkonto-Klasse&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; balance&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      balance &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In diesem Fall könnte eine andere Klasse den Kontostand direkt manipulieren:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;Account myAccount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
myAccount&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Unerlaubte direkte Manipulation&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Verletzung der Datenintegrität&lt;/h3&gt;
&lt;p&gt;Ohne Kapselung können Daten in einen ungültigen Zustand versetzt werden, da Validierungslogik umgangen werden kann.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt; Personenklasse&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hier könnte ein ungültiges Alter gesetzt werden:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;Person person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Ungültiges Alter&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Verletzung des Geheimnisprinzips&lt;/h3&gt;
&lt;p&gt;Ohne Kapselung wird das Innenleben einer Klasse offengelegt, was dem Prinzip der Informationsverbergung widerspricht4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt; Datenbankverbindungsklasse&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre class=&quot;  language-java&quot;&gt;&lt;code class=&quot;  language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DatabaseConnection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; String username&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; String password&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; Connection connection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Sensible Informationen wie Benutzername und Passwort sind hier direkt zugänglich.&lt;/p&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1&lt;/strong&gt;: Beispiele korrigieren
&lt;ul&gt;
&lt;li&gt;Im Abschnitt &quot;Relevanz von Kapselung&quot; wurden drei Negativ-Beispiel für schlechte Kapselung aufgezeigt&lt;/li&gt;
&lt;li&gt;Passe alle drei Beispiel mithilfe von Modifikatoren, Gettern oder Settern so an, dass eine gute und sinnvolle Kapselung vorliegt.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Erkläre den Begriff der Kapselung und nenne zwei Vorteile, die sich daraus ergeben.&lt;/li&gt;
&lt;li&gt;Was ist eine Getter und was ist ein Setter?&lt;/li&gt;
&lt;li&gt;Wozu werden Getter und Setter  eingesetzt?&lt;/li&gt;
&lt;li&gt;Warum werden Attribute in der Regel als &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;private&lt;/span&gt; deklariert und über Getter/Setter zugänglich gemacht?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kapselung verbirgt die internen Details eines Objekts und sorgt für kontrollierten Zugriff über Getter und Setter.
&lt;ul&gt;
&lt;li&gt;Ein &lt;strong&gt;Getter&lt;/strong&gt; ist eine öffentliche Funktion, welcher den Wert eines Attributs zurückgibt. Mithilfe eines Getters kann ein reiner Lesezugriff umgesetzt werden.&lt;/li&gt;
&lt;li&gt;Ein &lt;strong&gt;Setter&lt;/strong&gt; ist eine öffentliche Funktion, welche den Wert eines Attributs ändert. Der Setter ermöglicht die Einbindung einer Überprüfung oder Anpassung des Wertes oder die Ausführung weiterer Aktionen, bevor der Wert geändert wird.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;class OnlineShop {

   private int bestand;

   public in getBestand () {
      return bestand;
   }

   public void setBestand (int menge) {

      if (menge &amp;gt;= 0) {
         bestand = menge;
      } else {
         System.out.println(&quot;Bestand darf nicht negativ sein!&quot;);
      }
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zugriffsmodifikatoren&lt;/strong&gt; (private, public, protected) steuern, wer welche Klassenmitglieder einsehen und verändern darf.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                                                     <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                                     <int value="4"></int>
                                                     <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                                                     <int value="2"></int>
                                                     <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                                                     <int value="3"></int>
                                                     <string role="key" value="htmlTag"></string>
                                                     <string value="div"></string>
                                                     <string role="key" value="images"></string>
                                                     <instance class="exe.engine.galleryidevice.GalleryImages">
                                                      <dictionary>
                                                       <string role="key" value=".listitems"></string>
                                                       <list></list>
                                                       <string role="key" value="idevice"></string>
                                                       <reference key="30"></reference>
                                                      </dictionary>
                                                     </instance>
                                                     <string role="key" value="intlinks_to_anchors"></string>
                                                     <dictionary></dictionary>
                                                     <string role="key" value="nextImageId"></string>
                                                     <int value="0"></int>
                                                     <string role="key" value="parentNode"></string>
                                                     <reference key="31"></reference>
                                                    </dictionary>
                                                   </instance>
                                                  </list>
                                                  <string role="key" value="icon"></string>
                                                  <unicode value=""></unicode>
                                                  <string role="key" value="id"></string>
                                                  <unicode value="26"></unicode>
                                                  <string role="key" value="ideviceCategory"></string>
                                                  <unicode value="Text and Tasks"></unicode>
                                                  <string role="key" value="lastIdevice"></string>
                                                  <bool value="0"></bool>
                                                  <string role="key" value="nextFieldId"></string>
                                                  <int value="3"></int>
                                                  <string role="key" value="originalicon"></string>
                                                  <string value=""></string>
                                                  <string role="key" value="parentNode"></string>
                                                  <reference key="31"></reference>
                                                  <string role="key" value="systemResources"></string>
                                                  <list></list>
                                                  <string role="key" value="undo"></string>
                                                  <bool value="1"></bool>
                                                  <string role="key" value="userResources"></string>
                                                  <list></list>
                                                  <string role="key" value="version"></string>
                                                  <int value="0"></int>
                                                 </dictionary>
                                                </instance>
                                               </list>
                                               <string role="key" value="_id"></string>
                                               <unicode value="17"></unicode>
                                               <string role="key" value="_package"></string>
                                               <reference key="4"></reference>
                                               <string role="key" value="anchor_fields"></string>
                                               <list></list>
                                               <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                                               <int value="2"></int>
                                               <string role="key" value="exportType"></string>
                                               <string value="website"></string>
                                               <string role="key" value="last_full_node_path"></string>
                                               <string value="exe-node:Objektorientierte%20Programmierung:Kapselung"></string>
                                               <string role="key" value="parent"></string>
                                               <reference key="3"></reference>
                                               <string role="key" value="top_anchors_linked_from_fields"></string>
                                               <list>
                                                <reference key="25"></reference>
                                               </list>
                                               <string role="key" value="children"></string>
                                               <list></list>
                                              </dictionary>
                                             </instance>
                                             <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Polymorphismus#auto_top"></unicode>
                                             <reference key="32"></reference>
                                             <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top"></unicode>
                                             <reference key="21"></reference>
                                            </dictionary>
                                            <string role="key" value="nextImageId"></string>
                                            <int value="11"></int>
                                            <string role="key" value="parentNode"></string>
                                            <reference key="33"></reference>
                                           </dictionary>
                                          </instance>
                                         </list>
                                         <string role="key" value="children"></string>
                                         <list></list>
                                        </dictionary>
                                       </instance>
                                       <string role="key" value="systemResources"></string>
                                       <list></list>
                                       <string role="key" value="undo"></string>
                                       <bool value="1"></bool>
                                       <string role="key" value="userResources"></string>
                                       <list></list>
                                       <string role="key" value="version"></string>
                                       <int value="0"></int>
                                      </dictionary>
                                     </instance>
                                     <string role="key" value="_instruc"></string>
                                     <string value=""></string>
                                     <string role="key" value="_name"></string>
                                     <string value=""></string>
                                     <string role="key" value="anchor_names"></string>
                                     <list></list>
                                     <string role="key" value="anchors_linked_from_fields"></string>
                                     <dictionary></dictionary>
                                     <string role="key" value="content_w_resourcePaths"></string>
                                     <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung&lt;/h1&gt;
&lt;p&gt;Die letzte Säule der Objektorientierten Programmierung ist der Polymorphismus (oder auch Polymorphie). Polymorphismus bedeutet so viel wie &quot;Vielgestaltigkeit&quot; - also das ein und dieselbe Sache viele unterschiedliche Gestalten annehmen kann. Dabei kann es sich um Objekte oder auch um Verhalten handeln. Stell dir eine Reihe von Personen vor, die arbeiten gehen. Bei jeder dieser Personen wird &quot;arbeiten gehen&quot; unterschiedlich aussehen, da sie unterschiedliche Berufe ausführen - dasselbe &quot;allgemeine&quot; Verhalten nimmt viele verschiedene Gestalten an.&lt;/p&gt;
&lt;p&gt;In unserem Tier Beispiel aus den vorherigen Kapiteln ist das Prinzip des Polymorphismus ebenfalls gut zu erkennen: Ein Tier (bzw. ein Objekt der Klasse Tier) kann verschiedene Gestalten annehmen, nämlich Säugtier, Fisch, Hund, Wal, etc., obwohl alles Tiere sind. Und auch ihr Verhalten kann unterschiedliche Formen annehmen: jedes Tier macht ein anderes Geräusch, obwohl der Verhalten geraeuschMachen() dasselbe ist.&lt;/p&gt;
&lt;p&gt;Polymorphismus ist eine der zentralen Säulen der objektorientierten Programmierung. Wir sind dem Polymorphismus an einigen Stellen bereits begegnet.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel lernst du:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Was Polymorphismus ist&lt;/li&gt;
&lt;li&gt;Die Unterschiede zwischen statischem und dynamischen Polymorphismus&lt;/li&gt;
&lt;li&gt;Die konkrete Anwendung von Polymorphismus im Code&lt;/li&gt;
&lt;li&gt;Die Vor- und Nachteile von Polymorphismus&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Grundlagen des Polymorphismus&lt;/h1&gt;
&lt;p&gt;Polymorphismus ist eines der grundlegenden Konzepte der objektorientierten Programmierung in Java. Der Begriff leitet sich vom griechischen &quot;poly&quot; (viele) und &quot;morph&quot; (Form) ab und bedeutet &quot;Vielgestaltigkeit&quot;. In der Java-Programmierung bezieht sich Polymorphismus auf die Fähigkeit von Objekten, in verschiedenen Formen aufzutreten und auf unterschiedliche Weise zu reagieren. Dabei hat Polymorphismus in Java drei Hauptaspekte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Behandlung von Objekten als Instanzen ihrer Oberklasse&lt;/strong&gt;:&lt;br /&gt;Polymorphismus erlaubt es, Objekte verschiedener Unterklassen als Instanzen ihrer gemeinsamen Oberklasse zu behandeln3 Dies erhöht die Flexibilität und Wiederverwendbarkeit des Codes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Überschreiben von Methoden&lt;/strong&gt;:&lt;br /&gt;Eine zentrale Technik des Polymorphismus ist das Überschreiben (@Override) von Methoden. Unterklassen können Methoden ihrer Oberklassen neu implementieren, um spezifisches Verhalten zu definieren.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamische Bindung&lt;/strong&gt;:&lt;br /&gt;Polymorphismus ermöglicht es, dass der konkrete Typ eines Objekts erst zur Laufzeit bestimmt wird. Dies wird als dynamische Bindung bezeichnet. Wenn eine Methode aufgerufen wird, entscheidet die Java Virtual Machine (JVM) zur Laufzeit, welche spezifische Implementierung der Methode ausgeführt werden soll, basierend auf dem &lt;em&gt;tatsächlichen&lt;/em&gt; Objekttyp.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Diese 3 Aspekte lassen sich sehr gut an unserem Tier Beispiel veranschaulichen:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-24and33and37&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;abstract class Tier {
    protected String name;

    public Tier(String name) {
        this.name = name;
    }

    public abstract void geraeuschMachen();
}

abstract class Saeugetier extends Tier {
    public Saeugetier(String name) {
        super(name);
    }
}

class Hund extends Saeugetier {
    public Hund(String name) {
        super(name);
    }

     // Überschreiben von Methoden mit eigener Implementierung
    @Override
    public void geraeuschMachen() {
        System.out.println(name + &quot; bellt: Wuff!&quot;);
    }
}

public class Main {
    public static void main(String[] args) {
         // Behandlung von Objekten als Instanzen ihrer Oberklasse:
         // Ein Objekt vom Typ Hund kann als Objekt vom Typ Tier behandelt werden
        Tier meinTier = new Hund(&quot;Bello&quot;);

        // Dynamische Bindung: Hier wird zu Laufzeit entschieden, welche 
        // Implementierung der Methode geraeuschMachen genau verwendet wird.
        meinTier.geraeuschMachen(); // Ausgabe: Bello bellt: Wuff!
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Arten des Polymorphismus in Java&lt;/h1&gt;
&lt;p&gt;Polymorphismus in Java lässt sich in zwei Arten unterteilen: statischer und dynamischer Polymorphismus.&lt;/p&gt;
&lt;h2&gt;Statischer Polymorphismus&lt;/h2&gt;
&lt;p&gt;Statischer Polymorphismus nutzt &lt;strong&gt;Methodenüberladung,&lt;/strong&gt; um eine Methode mit unterschiedlichen Implementierungen zu haben. Aus diesem Grund wird er auch als statisch bezeichnet, da im Code bereits zum Zeitpunkt der Kompilierung festgelegt ist, welche Methode angewendet wird. Die Entscheidung, welche Methode zur Compile-Zeit aufgerufen wird, basiert auf der Signatur der Methode.&lt;/p&gt;
&lt;p&gt;Zum Beipspiel könnten wir in der Tier Klasse die Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;geraeuschMachen()&lt;/span&gt; überladen, indem wir eine Version hinzufügen, bei der man im Parameter angeben kann, wie oft ein Geräusch gemacht werden soll.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-9and29and45&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;abstract class Tier {
    protected String name;

    public Tier(String name) {
        this.name = name;
    }

    public abstract void geraeuschMachen();
    public abstract void geraeuschMachen(int Anzahl);
}

abstract class Saeugetier extends Tier {
    public Saeugetier(String name) {
        super(name);
    }
}

class Hund extends Saeugetier {
    public Hund(String name) {
        super(name);
    }

    @Override
    public void geraeuschMachen() {
        System.out.println(name + &quot; bellt: Wuff!&quot;);
    }
    
    @Override
    public void geraeuschMachen(int Anzahl) {
        String s = name + &quot; bellt: &quot;;

        for (int i = 0; i &amp;lt; Anzahl; i++) {
            s += &quot; Wuff!&quot;;
        }

        System.out.println(s);
    }
}

public class Main {
    public static void main(String[] args) {

        Tier meinTier = new Hund(&quot;Bello&quot;);
        meinTier.geraeuschMachen(); // Ausgabe: Bello bellt: Wuff!
        meinTier.geraeuschMachen(3); // Ausgabe: Bello bellt: Wuff! Wuff! Wuff!
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In Zeile 45 ist bereits zur Comile-Zeit eindeutig festgelegt, welche Implementierung der Methode umgesetzt wird durch die eindeutige Methodensignatur.&lt;/p&gt;
&lt;h2&gt;Dynamischer Polymorphismus&lt;/h2&gt;
&lt;p&gt;Dynamischer Polymorphismus nutzt Methodenüberschreibung und dynamische Bindung. Dabei wird erst zur Laufzeit entschieden, basierend auf dem konkreten Objekttyp, welche Implementierung ausgeführt wird. Aus diesen Grund wird er als dynamisch bezeichnet, da erst zur Laufzeit klar wird, welchen Typ das Objekt hat und welche Implementierung deswegen Anwendung findet.&lt;/p&gt;
&lt;p&gt;Methodenüberschreibung und dynamische Bindung wurden im ersten Beispiel in diesem Kapitel veranschaulicht. Zur Veranschaulichung der dynamischen Bindung ergänzen wir dieses Beispiel noch um die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Katze&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-44and45&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;abstract class Tier {
    protected String name;

    public Tier(String name) {
        this.name = name;
    }

    public abstract void geraeuschMachen();
}

abstract class Saeugetier extends Tier {
    public Saeugetier(String name) {
        super(name);
    }
}

class Hund extends Saeugetier {
    public Hund(String name) {
        super(name);
    }

    @Override
    public void geraeuschMachen() {
        System.out.println(name + &quot; bellt: Wuff!&quot;);
    }
}

class Katze extends Saeugetier {
    public Katze(String name) {
        super(name);
    }

    @Override
    public void geraeuschMachen() {
        System.out.println(name + &quot; miaut: Miau!&quot;);
    }
}

public class Main {
    public static void main(String[] args) {

        Tier meinHund = new Hund(&quot;Bello&quot;);
        Tier meineKatze = new Katze(&quot;Minka&quot;);
        meinHund.geraeuschMachen(); // Ausgabe: Bello bellt: Wuff!
        meineKatze.geraeuschMachen(); // Ausgabe: Minka miaut: Miau!
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Polymorphismus mit Interfaces&lt;/h1&gt;
&lt;p&gt;Das Prinzip der dynamischen Bindung und der Behandlung von Objekten als Instanzen ihrer Oberklasse funktioniert auch in Bezug auf Interfaces. Das bedeutet ich kann ein Objekt auch über den Typ des Interface ansprechen. Das schauen wir uns einmal anhand des Beispiels aus dem Kapitel Abstraktion an, in dem wir die Interfaces Drawable und Movable erstellt haben und diese in die Klassen Player und Wall eingebunden haben. Wir erweitern das Beispiel, indem wir sie in mit Processing in Java kombinieren, damit wir einen draw-Loop haben.&lt;/p&gt;
&lt;p&gt;Dynamischer Polymorphismus ermöglicht mir nun folgendes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In der Window Klasse deklariere ich zunächst eine player Variable, ein wall Variable und einen Array vom Typ Drawable mit der Länge 2. Du siehst: Ich kann auch ein Interface als Datentyp verwenden.&lt;/li&gt;
&lt;li&gt;In settings() initialisiere ich nun player und wall und speichere diese in meinem drawables Array&lt;/li&gt;
&lt;li&gt;Nun kann ich in draw() durch meinen drawbles Array iterieren und diese zeichnen über die draw() Methode aus dem Interface. Das geht, weil durch den Typ des Interfaces festgelegt ist, dass alle Elemente in einem Array vom Typ Drawable eine draw() Methode besitzen. Allerdings kann jedes Element diese draw Methode unterschiedlich umsetzen - das player Objekt setzt die Methode anders um als das wall Objekt.  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import processing.core.PApplet;

public class Window extends PApplet {

    Player player;
    Wall wall;
    Drawable[] drawables = new Drawable[2];

    @Override
    public void settings() {
        size( 400, 400);

        player = new Player(100, 100);
        wall = new Wall(200, 200);

        // Hinzufügen von player und wall zum drawables Array
        drawables[0] = player;
        drawables[1] = wall;
        
    }

    @Override
    public void draw() {
        background(60);

        // Zeichnen aller Elemente im drawbles Array
        for(Drawable drawable : drawables) {
            drawable.draw();
        }

    }
}

interface Movable {
    void move();
}

interface Drawable {
    void draw();
}

class Player implements Movable, Drawable {

    private float x,y;

    public Player(float  x, float y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public void move() {
        System.out.println(&quot;Steuerung per Pfeiltasten&quot;);
    }

    @Override
    public void draw() {
        System.out.println(&quot;Zeichne Spieler bei x: &quot; + x + &quot; y: &quot; + y);

    }
}

class Wall implements Drawable {

    private float x,y;

    public Wall(float x, float y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public void draw() {
        System.out.println(&quot;Zeichne Wand bei x: &quot; + x + &quot; y: &quot; + y);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Vergleich zu Vererbung und Methodenüberladung&lt;/h1&gt;
&lt;p&gt;Polymorphismus basiert wesentlich auf den behandelten Prinzipien der &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top&quot;&gt;Vererbung&lt;/a&gt;. Während Vererbung es erlaubt, allgemeine Eigenschaften und Methoden an Subklassen zu übertragen, geht es beim Polymorphismus darum, dass diese geerbten Methoden in den Subklassen auf unterschiedliche Weise umgesetzt werden können.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vererbung&lt;/strong&gt; liefert den Bauplan und die Übernahme von Eigenschaften.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methodenüberladung&lt;/strong&gt; (statischer Polymorphismus) ermöglicht es, dass innerhalb derselben Klasse mehrere Methoden mit demselben Namen, aber unterschiedlichen Parametern existieren.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methodenüberschreibung&lt;/strong&gt; (dynamischer Polymorphismus) sorgt dafür, dass in einer Vererbungshierarchie eine Methode in der Subklasse neu definiert werden kann.&lt;br /&gt;Die Kombination dieser Konzepte ermöglicht es, Programme zu schreiben, bei denen durch einheitliche Schnittstellen unterschiedliche Implementierungen zur Laufzeit gewählt werden – ein entscheidender Vorteil bei der Erweiterung und Pflege von Software.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Vor- und Nachteile von Polymorphismus in Java&lt;/h1&gt;
&lt;div&gt;Polymorphismus ist ein zentrales Konzept der objektorientierten Programmierung in Java. Es bietet zahlreiche Vorteile, bringt aber auch einige Herausforderungen mit sich. Im Folgenden werden die wichtigsten Vor- und Nachteile erläutert.&lt;/div&gt;
&lt;h2&gt;Vorteile&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Erhöhte Flexibilität:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Ermöglicht die Verwendung desselben Codes für verschiedene Datenstrukturen und Objekttypen.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Macht Software anpassungsfähiger an unterschiedliche Szenarien ohne grundlegende Codeänderungen.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Verbesserte Wiederverwendbarkeit:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Erlaubt die Nutzung von Code für verschiedene Objekttypen ohne Neuschreibung.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Reduziert Redundanzen und optimiert die Codelänge.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Vereinfachte Wartbarkeit:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Führt zu besser strukturiertem und zentralisiertem Code.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Änderungen an einer Stelle können im gesamten Projekt wirksam werden.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Verbesserte Übersichtlichkeit:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Vermeidet Code-Duplikate und fördert die Nutzung abgeleiteter Klassen.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Macht den Quelltext insgesamt nachvollziehbarer, besonders in großen Projekten.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Erhöhte Modularität:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Fördert ein modulares und skalierbares Software-Design.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Ermöglicht die Trennung von Schnittstellen und Implementierungen.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Vereinfachte Erweiterbarkeit:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Erleichtert das Hinzufügen neuer Funktionalitäten ohne Änderung des bestehenden Codes.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Reduziert die Kopplung zwischen Klassen.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Nachteile&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Leistungseinbußen:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Dynamische Polymorphie kann zu Performanceproblemen führen.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Die dynamische Methodenauswahl zur Laufzeit verursacht zusätzlichen Rechenaufwand.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Erhöhte Komplexität:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Kann den Code schwieriger verständlich machen.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Entwickler müssen genau analysieren, welche Methode in welchem Fall aufgerufen wird.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Implementierungsherausforderungen:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Korrekte Anwendung erfordert sorgfältige Planung und Umsetzung.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Unerfahrene Programmierer könnten Polymorphismus falsch anwenden und Laufzeitfehler verursachen.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Debugging-Schwierigkeiten:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Die tatsächlich aufgerufene Methodenimplementierung ist nicht immer offensichtlich.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Nachverfolgung des Programmablaufs kann komplex werden, besonders bei mehrfacher Methodenüberschreibung.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;b&gt;Einschränkungen bei Compiler-Optimierungen:&lt;/b&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Compiler haben Schwierigkeiten, polymorphen Code zu optimieren.&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Besonders problematisch bei dynamischem Klassenladen oder komplexen Vererbungsstrukturen.&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;Trotz dieser Nachteile überwiegen in vielen Fällen die Vorteile von Polymorphismus. Wichtig ist, dass du die Vor- und Nachteile abwägst und Polymorphismus in deinen Programmen angemessen einsetzt. &lt;/div&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1&lt;/strong&gt;: Tierhierarchie erweitern&lt;br /&gt;Erweitere das in Kapitel 4 eingeführte Beispiel. Erstelle zusätzlich zur Klasse Hund und Katze eine weitere Subklasse Vogel, die die Methode geraeuschMachen() überschreibt (z. B. mit der Ausgabe „zwitschert: Zirp,zirp“).&lt;br /&gt;Erstelle in einer Main-Methode ein Array vom Typ Tier, das Objekte aller drei Klassen enthält, und rufe für jedes Objekt die Methode geraeuschMachen() auf.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 2&lt;/strong&gt;: Grafische Anwendung in Processing&lt;br /&gt;Entwickle eine einfache Klassenhierarchie für grafische Formen. Ergänze das Beispiel von Circle und Rectangle um eine weitere Form (z. B. Triangle) und implementiere eine polymorphe draw()-Methode für alle Formen.&lt;br /&gt;Schreibe eine Main-Methode, in der ein Array verschiedener Formen durchlaufen und jede Form gezeichnet wird.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Was versteht man unter dynamischer Bindung im Kontext des Polymorphismus?&lt;/li&gt;
&lt;li&gt;Worin unterscheiden sich statischer und dynamischer Polymorphismus?&lt;/li&gt;
&lt;li&gt;Welche Vorteile bietet der Einsatz von Polymorphismus in der Softwareentwicklung?&lt;/li&gt;
&lt;li&gt;Warum ist es sinnvoll, in grafischen Anwendungen (wie in Processing) polymorphe Methoden einzusetzen?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Polymorphismus bedeutet &quot;Vielgestaltigkeit&quot; und ermöglicht Objekten, in verschiedenen Formen aufzutreten und unterschiedlich zu reagieren&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Hauptaspekte von Polymorphismus:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Behandlung von Objekten als Instanzen ihrer Oberklasse&lt;/strong&gt;: Ein Hund-Objekt kann als Tier-Objekt behandelt werden&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;strong&gt;Überschreiben von Methoden&lt;/strong&gt;: Tier-Objekte können unterschiedliche Geräusche machen&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;strong&gt;Dynamische Bindung:&lt;/strong&gt; Erst zur Laufzeit wird bestimmt, ob es sich um ein Katze-Objekt oder ein Hund-Objekt handelt&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arten des Polymorphismus:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Statischer Polymorphismus&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Nutzt Methodenüberladung&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Entscheidung über aufzurufende Methode erfolgt zur Kompilierzeit&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;strong&gt;Dynamischer Polymorphismus&lt;/strong&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div&gt;Nutzt Methodenüberschreibung und dynamische Bindung&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;Entscheidung über aufzurufende Methode basiert auf konkretem Objekttyp zur Laufzeit&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Objekte können über Interface-Typen angesprochen werden&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;strong&gt;Vorteile:&lt;/strong&gt; Erhöhte Flexibilität, Verbesserte Wiederverwendbarkeit, Vereinfachte Wartbarkeit, Verbesserte Übersichtlichkeit, Erhöhte Modularität, Vereinfachte Erweiterbarkeit&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div&gt;&lt;strong&gt;Nachteile:&lt;/strong&gt; Leistungseinbußen, Erhöhte Komplexität, Implementierungsherausforderungen, Debugging-Schwierigkeiten, Einschränkungen bei Compiler-Optimierungen&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                                     <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                     <int value="4"></int>
                                     <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                                     <int value="2"></int>
                                     <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                                     <int value="3"></int>
                                     <string role="key" value="htmlTag"></string>
                                     <string value="div"></string>
                                     <string role="key" value="images"></string>
                                     <instance class="exe.engine.galleryidevice.GalleryImages">
                                      <dictionary>
                                       <string role="key" value=".listitems"></string>
                                       <list></list>
                                       <string role="key" value="idevice"></string>
                                       <reference key="23"></reference>
                                      </dictionary>
                                     </instance>
                                     <string role="key" value="intlinks_to_anchors"></string>
                                     <dictionary>
                                      <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top"></unicode>
                                      <reference key="21"></reference>
                                     </dictionary>
                                     <string role="key" value="nextImageId"></string>
                                     <int value="0"></int>
                                     <string role="key" value="parentNode"></string>
                                     <reference key="32"></reference>
                                    </dictionary>
                                   </instance>
                                   <reference key="25"></reference>
                                  </list>
                                  <string role="key" value="children"></string>
                                  <list></list>
                                 </dictionary>
                                </instance>
                                <string role="key" value="systemResources"></string>
                                <list></list>
                                <string role="key" value="undo"></string>
                                <bool value="1"></bool>
                                <string role="key" value="userResources"></string>
                                <list>
                                 <instance class="exe.engine.resource.Resource" reference="34">
                                  <dictionary>
                                   <string role="key" value="_idevice"></string>
                                   <reference key="13"></reference>
                                   <string role="key" value="_package"></string>
                                   <reference key="4"></reference>
                                   <string role="key" value="_storageName"></string>
                                   <string value="klassendiagramm_vererbung.drawio.png"></string>
                                   <string role="key" value="_userName"></string>
                                   <string value="c:\\users\\jdittrib\\appdata\\local\\temp\\tmp3iv5m_\\klassendiagramm_vererbung.drawio.png"></string>
                                   <string role="key" value="checksum"></string>
                                   <string value="4f7a7bb81fd5f475baa1dc212cbd4a84"></string>
                                   <string role="key" value="exe.engine.resource.Resource.persistenceVersion"></string>
                                   <int value="2"></int>
                                   <string role="key" value="exe.engine.resource._Resource.persistenceVersion"></string>
                                   <int value="2"></int>
                                   <string role="key" value="warningMsg"></string>
                                   <string value=""></string>
                                  </dictionary>
                                 </instance>
                                </list>
                                <string role="key" value="version"></string>
                                <int value="0"></int>
                               </dictionary>
                              </instance>
                              <string role="key" value="_instruc"></string>
                              <string value=""></string>
                              <string role="key" value="_name"></string>
                              <string value=""></string>
                              <string role="key" value="anchor_names"></string>
                              <list></list>
                              <string role="key" value="anchors_linked_from_fields"></string>
                              <dictionary></dictionary>
                              <string role="key" value="content_w_resourcePaths"></string>
                              <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung – Vererbung im Alltag&lt;/h1&gt;
&lt;p&gt;Das Prinzip der Vererbung lässt sich am einfachsten anhand der Tierwelt veranschaulichen. Nehmen wir eine Reihe von unterschiedlichen Tieren: Hund, Katze, Schlange, Wal, Amsel, und Forelle. Was haben diese Lebewesen alle gemeinsam? Es sind Tiere. Tiere zeichnen sich durch eine Reihe an Eigenschaften und Verhalten aus, welche alle Tiere gemeinsam haben:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eigenschaften: Alter, Gewicht, Größe, ...&lt;/li&gt;
&lt;li&gt;Verhalten: atmen, essen, bewegen, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Da sie diese Eigenschaften gemeinsam haben, kann man sie zusammen in der Gruppe der Tiere zusammenfassen. Sie &quot;erben&quot; diese Eigenschaften quasi von der allgemeinene Gruppe &quot;Tiere&quot;. Allerdings unterscheiden sich diese Tiere auch in ihrer Art: Die Schlange ist ein &lt;strong&gt;Reptil,&lt;/strong&gt; die Amsel ist ein &lt;strong&gt;Vogel,&lt;/strong&gt; Hund, Katze und Wal sind &lt;strong&gt;Säugetiere&lt;/strong&gt; und die Forelle ist ein &lt;strong&gt;Fisch.&lt;/strong&gt; Es gibt hier also noch Untergruppen, die sich unterscheiden. In den Untergruppen wiederum teilen sich Tiere wieder viele Eigenschaften, wie z.B. dass alle Fische mit Kiemen atmen. Jede dieser Untergruppen (Fische, Reptilien, Säugetiere, Vögel) ist eine Klasse und ein Bauplan für Tiere dieser Gruppe und erbt Eigenschaften der allgemeinen Gruppe (oder Klasse) &quot;Tier&quot;.&lt;/p&gt;
&lt;p&gt;Dieses Prinzip der Vererbung findet Anwendung in der Objektorientierten Programmierung. Warum? Wir haben bereits gelernt, wie wir Code wiederverwenden können. Die Vererbung geht diesen Ansatz noch einen großen Schritt weiter: Sie ermöglicht es, allgemeine Funktionalitäten in einer Oberklasse zu definieren und diese in spezialisierten Klassen automatisch zu übernehmen und bei Bedarf anzupassen. Damit wird nicht nur redundanter Code vermieden, sondern auch die Wartbarkeit und Erweiterbarkeit eurer Programme deutlich verbessert. Außerdem sorgt Vererbung auch für eine übersichtliche und nachvollziehbare Struktur in unserem Code.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel lernst du:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Was Vererbung bedeutet&lt;/li&gt;
&lt;li&gt;Wie man Vererbung in Java umsetzt&lt;/li&gt;
&lt;li&gt;Welche Vorteile Vererbung für die Sortwareentwicklung bringt&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Was ist Vererbung?&lt;/h1&gt;
&lt;p&gt;Vererbung beschreibt den Mechanismus, bei dem eine Klasse (die Superklasse) Eigenschaften und Methoden an eine oder mehrere abgeleitete Klassen (Subklassen) weitergibt. Dabei werden gemeinsame Merkmale einmal definiert und müssen nicht in jeder Subklasse erneut implementiert werden. Das Konzept der Vererbung kann in zwei Gruppen kategorisiert werden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Subklasse (Kind): Dies ist die Klasse, die Eigenschaften und Methoden von einer anderen Klasse erbt.&lt;/li&gt;
&lt;li&gt;Die Superklasse (Eltern): Dies ist die Klasse von der Eigenschaften und Methoden weitervererbt werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dabei kann eine Subklasse immer nur Eigenschaften und Methoden von &lt;em&gt;einer&lt;/em&gt; Superklasse direkt erben und &lt;em&gt;nicht&lt;/em&gt; von mehreren.&lt;/p&gt;
&lt;p&gt;Wenn wir dieses Prinzip auf unser Tier-Beispiel anwenden, erhalten wir folgende Unterteilung:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Superklasse „Tier“ enthält allgemeine Eigenschaften wie Alter, Gewicht und Größ sowie Methoden wie atmen(), essen() und bewegen().&lt;/li&gt;
&lt;li&gt;Die Subklassen &quot;Säugetier&quot;, &quot;Reptil&quot;, &quot;Fisch&quot; und &quot;Vogel&quot; übernehmen diese Eigenschaften und Methoden von &quot;Tier&quot;, haben aber auch jeweils eigene Eigenschaften und Methoden, wie Flossenanzahl, Flügelspannweite und eiLegen().
&lt;ul&gt;
&lt;li&gt;Die Subklassen sind gleichzeitig Superklassen für die nächste Vererbungsebene&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Die Subklassen „Hund“, „Amsel“ oder „Wal“ erben die Eigenschaften und Methoden von alle ihren Superklassen und besitzen wiederum eigene Eigenschaften und Methoden, wie z.B. ballHolen().&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Wichtig:&lt;/strong&gt; &quot;Hund&quot; erbt &lt;em&gt;nur&lt;/em&gt; die Eigenschaften und Methoden von &quot;Säugetier&quot;. &lt;em&gt;Indirekt&lt;/em&gt; erbt &quot;Hund&quot; natürlich auch die Eigenschaften und Methoden von &quot;Tier&quot;, aber nur, weil &quot;Säugetier&quot; sie von &quot;Tier&quot; erbt. Das ist gemeint mit: Eine Subklasse kann immer nur Eigenschaften und Methoden &lt;em&gt;einer&lt;/em&gt; Superklasse &lt;em&gt;direkt&lt;/em&gt; erben. &quot;Hund&quot; kann auch keine weiteren Eigenschaften von einer weiteren Klasse &quot;Haustier&quot; erben.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wenn wir nun noch die unterschiedlichen Arten von Tieren hinzufügen (Vogel, Säugetier, etc.), dann sind diese Subklassen von &quot;Tier&quot; und Superklassen von &quot;Hund&quot;, &quot;Amsel&quot;, &quot;Wal&quot; und Co. Diese Vererbungshierarchie kann mithilfe eines Klassendiagramms veranschaulicht werden. Wie man so ein Klassendiagramm erstellt, lernen wir im Abschnitt &quot;Dokumentation&quot;. Alle Tiere erben die Eigenschaften und Methoden von den Klassen auf die der jeweilge Pfeil zeigt. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;resources/klassendiagramm_vererbung.drawio.png&quot; alt=&quot;Dieses Klassendiagramm veranschaulicht Vererbung im Tierreich&quot; title=&quot;Vererbung im Tierreich&quot; width=&quot;1051&quot; height=&quot;492&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Ein anderes Beispiel für Vererbung ist die Vererbung von Stileigenschaften in der Typografie:In Design-Programmen wie InDesign von Adobe können verschiedene Absatzstile festgelegt werden für Fließtext, Stichpunkte, Überschriften, etc. Diese ABsatzstile können so angelegt werden, dass sie aufeinander aufbauen. Das bedeutet, sie übernehmen bestimmte Eigenschaften, wie z.B. die Schriftart, von dem Absatzstil, auf den sie aufbauen. Wenn ich dann im Desgin-Prozess auf die Idee komme doch eine andere Schriftart verwenden zu wollen, muss ich nicht jeden einzelnen Absatzstil anpassen, sondern im besten Fall nur einen, auf den alle anderen aufbauen. &lt;/p&gt;
&lt;p&gt;Die Verwendung von Vererbung bringt zahlreiche Vorteile in der objektorientierten Programmierung mit sich:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Wiederverwendbarkeit:&lt;/strong&gt; Einmal definierte Eigenschaften in der Superklasse werden in allen Subklassen verfügbar, was den Programmieraufwand reduziert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wartbarkeit:&lt;/strong&gt; Änderungen in der Superklasse wirken sich automatisch auf alle abgeleiteten Klassen aus, sofern die vererbten Methoden genutzt werden.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Erweiterbarkeit:&lt;/strong&gt; Neue Klassen können durch Ableiten von bestehenden Klassen schnell erweitert werden, ohne den gesamten Code neu schreiben zu müssen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strukturierung:&lt;/strong&gt; Komplexe Systeme werden in eine logische Hierarchie unterteilt, was das Verständnis und die Modellierung realer Zusammenhänge erleichtert.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Implementierung von Vererbung in Java&lt;/h1&gt;
&lt;p&gt;In Java erfolgt die Vererbung mittels des Schlüsselworts „extends“. Eine Klasse, die eine andere Klasse erweitert, übernimmt damit alle &lt;em&gt;öffentlichen (public)&lt;/em&gt; und &lt;em&gt;geschützten (protected)&lt;/em&gt; Eigenschaften und Methoden der Superklasse.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beispiel: Tierhierarchie&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wir definieren zunächst eine Superklasse Tier:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;class Tier {
   // Geschützte Attribute, damit Subklassen darauf zugreifen können
   protected int alter;
   protected float gewicht;
   protected float größe;

   // Konstruktor der Superklasse
   public Tier(int alter, float gewicht, float größe) {
      this.alter = alter;
      this.gewicht = gewicht;
      this.größe = größe;
   }

   // Methoden, die allgemeines Verhalten beschreibt
   public void atmen() {
      System.out.println(&quot;Das Tier atmet&quot;);
   }

   public void essen() {
      System.out.println(&quot;Das Tier isst&quot;);
   }

   public void bewegen() {
      System.out.println(&quot;Das Tier bewegt sich&quot;);
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Nun erstellen wir eine Subklassen Säugetier und Fisch, die von Tier erben:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;class Säugetier extends Tier {

   // Neues Attribut dieser Klasse
   protected boolean herdenTier;

   // Konstruktor der Subklasse, ruft den Konstruktor der Superklasse auf
   public Säugetier(int alter, int gewicht, int größe, boolean herdenTier) {
      super(alter, gewicht, größe);

      // Initialisieren der Attribute dieser Klasse    
      this.herdenTier = herdenTier ;
   }

   // Neue Methode in der Klasse
   public void säugen() {
      System.out.println(&quot;Das Säugetier säugt ein Tierbaby&quot;);
   }

}

class Fisch extends Tier {

   // Neues Attribut dieser Klasse
   protected int anzahlFlossen;

   // Konstruktor der Subklasse, ruft den Konstruktor der Superklasse auf
   public Fisch(int alter, int gewicht, int größe, int anzahlFlossen) {
      super(alter, gewicht, größe);
 
      // Initialisieren der Attribute dieser Klasse    
      this.anzahlFlossen = anzahlFlossen;
   }

   // Neue Methode in der Klasse
   public void verstecken() {
      System.out.println(&quot;Der Fisch versteckt sich&quot;);
   }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Erklärung:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Das Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;extends&lt;/span&gt; zeigt an, dass Säugetier und Fisch von Tier erben.&lt;/li&gt;
&lt;li&gt;Mit dem Aufruf von&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt; super(alter, gewicht, größe)&lt;/span&gt; im Konstruktor der Subklasse wird der Konstruktor der Oberklasse ausgeführt, sodass die Attribute korrekt initialisiert werden.&lt;/li&gt;
&lt;li&gt;Danach können die weiteren klassenspezifischen Attributen initialisiert werden.&lt;/li&gt;
&lt;li&gt;Abschließend werden die neuen klassenspazifischen Methoden deklariert.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Im nächsten Schritt erstellen wir zwei weitere Subklassen: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Hund&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Forelle.&lt;/span&gt; Diese erben jeweils von &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Säugetier&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Fisch.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;class Hund extends Säugetier {

   // Konstruktor der Subklasse, ruft den Konstruktor der Superklasse auf
   public Hund (int alter, int gewicht, int größe, boolean herdenTier) {
      super(alter, gewicht, größe, herdenTier);
   }

   // Neue Methode in der Klasse
   public void ballHolen() {
      System.out.println(&quot;Der Hund holt einen Ball!&quot;);
   }

   // Überschreiben der Methode aus der Tier-Klasse
   @Override
   public void bewegen() {
      System.out.println(&quot;Der Hund läuft.&quot;);
   }
}

class Forelle extends Fisch {

   // Konstruktor der Subklasse, ruft den Konstruktor der Superklasse auf
   public Fisch(int alter, int gewicht, int größe, int anzahlFlossen) {
      super(alter, gewicht, größe, anzahlFlossen);
   }

   // Überschreiben der Methode aus der Tier-Klasse
   @Override
   public void bewegen() {
      System.out.println(&quot;Die Forelle schwimmt.&quot;);
   }
}

public class Main {
   public static void main(String[] args) {
      // Erstellen einer neuen Instanz von Hund und Forelle
      Hund meinHund = new Hund(8, 9.5f, 62.2f, false);
      Forelle meineForelle = new Forelle(1, 0.2f, 16.4f, 7);

      meinHund.bewegen();
      meineForelle.bewegen();

       /* Ausgabe:
      Der Hund läuft
      Die Forelle schwimmt
      */
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Erklärung: Die Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;bewegen()&lt;/span&gt; wird in der Subklasse überschrieben. Das erfolgt mithilfer der Annotation &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@Override&lt;/span&gt;. Dadurch wird das spezifische Verhalten (Laufen oder Schwimmen) implementiert, während die Grundstruktur aus der Superklasse übernommen wird. Diese Technik der Vererbung ermöglicht es, zunächst allgemeine Verhaltensweisen zu definieren und sie später in den abgeleiteten Klassen zu spezifizieren.&lt;/p&gt;
&lt;p&gt;Die Superklassen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Tier, Fisch&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Säugetier&lt;/span&gt; sind ziemlich abstrakt. Das bedeutet, dass wahrscheinlich zu keinem Zeitpunkt ein Objekt von diesen Klassen erstellt wird, denn kein Tier ist &quot;nur&quot; ein Tier. Bei einem Tier handelt es sich immer um eine konkrete Rasse oder Art, wie z.B. Hund, Katze, Forelle, etc. Das Prinzip der Abstraktion schauen wir uns genauer im Kapitel &quot;&lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Abstraktion#auto_top&quot;&gt;Abstrakte Klassen und Interfaces&lt;/a&gt;&quot; an. Hier kannst du aber bereits erkennen, was mit Abstraktion gemeint ist: Eine Klasse, die zwar Eigenschaften und Methoden definiert, aber nicht dafür gedacht ist, dass Objekte aus ihr erstellt werden.&lt;/p&gt;
&lt;h2&gt;Das Schlüsselwort „super“&lt;/h2&gt;
&lt;p&gt;Das Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;super&lt;/span&gt; spielt in der Vererbung eine &lt;strong&gt;zentrale&lt;/strong&gt; &lt;strong&gt;Rolle&lt;/strong&gt;. Es dient dazu, auf die Mitglieder (Attribute und Methoden) der Superklasse zuzugreifen. super ist quasi ein Verweis auf die Superklasse.&lt;/p&gt;
&lt;p&gt;In erster Linie wird das Schlüsselwort super im &lt;strong&gt;Konstruktor&lt;/strong&gt; einer Subklasse verwendet, um den Konstruktor der Superklasse aufzurufen. Das erfolgt, indem man hinter &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;super&lt;/span&gt; in den Klammern () die Parameter des Konstruktors der Superklasse gibt. Dann wird dieser Konstruktor mit diesen Parametern aufgerufen. Danach kann man die klassenspezifischen Attribute der Subklasse intialisieren. &lt;strong&gt;Wichtig&lt;/strong&gt;: Der Aufruf des Konstruktors der Superklasse mithilfe von &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;super()&lt;/span&gt; muss der erste Befehl innerhalb des Konstruktors der Subklasse sein.&lt;/p&gt;
&lt;p&gt;Ein weiteres Einsatzgebiet ist, &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;super&lt;/span&gt; zu verwenden, um auf Methoden oder Attribute aus der Superklasse zuzugreifen. Dies erfolgt mithilfe der Punktnotation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;class Katze extends Säugetier {

   public Katze(int alter, int gewicht, int größe, boolean herdenTier) {
      super(alter, gewicht, größe, herdenTier);
   }

   @Override
   public void säugen() {
      // Aufruf der ursrprünglichen Implementierung aus der Superklasse,
      // falls gewünscht, bevor der spezifische Code ausgeführt wird
      super.säugen();
      System.out.println(&quot;Die Katze säugt ein kleines Kätzchen&quot;);
   }
}


public class Main {
   public static void main(String[] args) {
      // Erstellen einer neuen Instanz von Katze
      Katze meineKatze = new Katze(4, 5.3, 34, false);
      meineKatze.säugen();

       /* Ausgabe:
      Das Säugetier säugt ein Tierbaby
      Die Katze säugt ein kleines Kätzchen
      */
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In diesem Beispiel wird zunächst die Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;säugen()&lt;/span&gt; der Superklasse aufgerufen und anschließend ein zusätzlicher, spezifischer Teil ausgeführt. Dadurch wird klar, wie Vererbung eine flexible Erweiterung und Anpassung der bestehenden Funktionalitäten ermöglicht. &lt;/p&gt;
&lt;h2&gt;Vererbung verhindern mit &quot;final&quot;&lt;/h2&gt;
&lt;p&gt;Wenn du eine Klasse hast, von der nicht weiter vererbt werden soll, kannst du diese mit dem Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;final&lt;/span&gt; deklarieren. Zum Beispiel könnten wir eine neue Klasse Dackel erstellen, die von Hund erbt und gleichzeitig festlegen, dass nach Dackel &quot;Schluss ist&quot;, wir also keine weiteren Vererbungen mehr zulassen möchten.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-1&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;final class Dackel extends Hund {

   public Dackel (int alter, int gewicht, int größe, boolean herdenTier) {
      super(alter, gewicht, größe, herdenTier);
   }

   // Überschreiben der Methode aus der Hund-Klasse
   @Override
   public void ballHolen() {
      System.out.println(&quot;Der Dackel holt einen Ball!&quot;);
   }

   // Überschreiben der Methode aus der Tier-Klasse
   @Override
   public void bewegen() {
      System.out.println(&quot;Der Dackel läuft.&quot;);
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1&lt;/strong&gt;: Fahrzeug-Vererbungshierarchie implementieren
&lt;ul&gt;
&lt;li&gt;Erstelle eine Superklasse „Fahrzeug“ mit folgenden Attributen und Methoden:
&lt;ul&gt;
&lt;li&gt;Attribute: anzahlRaeder, Baujahr, geschwindigkeit&lt;/li&gt;
&lt;li&gt;Methoden: beschleunigen(), bremsen() (die Methoden sollen eine einfache Konsolenausgabe enthalten).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Erstelle eine Subklasse &quot;MotorisiertesFahrzeug&quot; mit folgenden weiteren Attributen und Methoden:
&lt;ul&gt;
&lt;li&gt;Attribut: tankFuellung&lt;/li&gt;
&lt;li&gt;Methode: tanken(double menge)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Erstelle nun die Subklassen &quot;Fahrrad&quot;, welche direkt von der &quot;Fahzeug&quot;-Klassse erbt und &quot;PKW&quot; und &quot;Motorrad&quot;, welche von &quot;MotorisiertesFahrzeug&quot; erbt. &lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Füge jeder Klasse ein spezifisches Attribut doer eine Methoden hinzu, die für den jeweiligen Fahrzeugtyp charakteristisch sind.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 2&lt;/strong&gt;: Erweiterung mit sinnvoller Kapselung
&lt;ul&gt;
&lt;li&gt;Ergänze deine Klassen, um sinnvolle Zugriffsmodifikatoren. Es sollen so wenig wie möglich Attribute und Methoden public sein.&lt;/li&gt;
&lt;li&gt;Ergänze deine Klassen um sinnvolle Getter und Setter, um die Daten zu schützen und zu prüfen, bevor sie geändert werden.
&lt;ul&gt;
&lt;li&gt;setAnzahlRaeder(int anzahl) soll nur eine Anzahl größer 0 akzeptieren&lt;/li&gt;
&lt;li&gt;tanken(double menge) soll nur eine sinnvolle Menge akzeptieren&lt;/li&gt;
&lt;li&gt;usw.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Was versteht man unter Vererbung in der objektorientierten Programmierung?&lt;/li&gt;
&lt;li&gt;Eelche Vorteile bietet Vererbung?&lt;/li&gt;
&lt;li&gt;Wie wird in Java die Vererbung syntaktisch umgesetzt, und welche Rolle spielt dabei das Schlüsselwort „extends“?&lt;/li&gt;
&lt;li&gt;Erklärt den Zweck des Schlüsselworts „super“ in Konstruktoren und Methoden.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vererbung ermöglicht es, gemeinsame Eigenschaften und Methoden in einer &lt;strong&gt;Superklasse&lt;/strong&gt; zu definieren und diese in allen &lt;strong&gt;abgeleiteten Subklassen&lt;/strong&gt; wiederzuverwenden.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Superklasse:&lt;/strong&gt; diese Klasse vererbt Eigenschaften und Methoden&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subklasse:&lt;/strong&gt; diese Klasse erbt Eigenschaften und Methoden&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In einer Vererbungshierarchie mit mehreren Vererbungsebenen, kann eine Klasse sowohl Super- als auch Subklasse sein.&lt;/li&gt;
&lt;li&gt;In Java wird Vererbung mit dem Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;extends&lt;/span&gt; umgesetzt.&lt;/li&gt;
&lt;li&gt;Das Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;super&lt;/span&gt; wird genutzt, um auf Konstruktoren, Methoden und Attribute der Superklasse zuzugreifen.&lt;/li&gt;
&lt;li&gt;Vererbung fördert &lt;strong&gt;Wiederverwendbarkeit, Wartbarkeit&lt;/strong&gt; und &lt;strong&gt;Erweiterbarkeit&lt;/strong&gt; des Codes&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                              <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                              <int value="4"></int>
                              <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                              <int value="2"></int>
                              <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                              <int value="3"></int>
                              <string role="key" value="htmlTag"></string>
                              <string value="div"></string>
                              <string role="key" value="images"></string>
                              <instance class="exe.engine.galleryidevice.GalleryImages">
                               <dictionary>
                                <string role="key" value=".listitems"></string>
                                <list>
                                 <instance class="exe.engine.galleryidevice.GalleryImage">
                                  <dictionary>
                                   <string role="key" value="_caption"></string>
                                   <instance class="exe.engine.field.TextField">
                                    <dictionary>
                                     <string role="key" value="_id"></string>
                                     <int value="309"></int>
                                     <string role="key" value="_idevice"></string>
                                     <none></none>
                                     <string role="key" value="_instruc"></string>
                                     <string value=""></string>
                                     <string role="key" value="_name"></string>
                                     <string value=""></string>
                                     <string role="key" value="content"></string>
                                     <string value=""></string>
                                     <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                     <int value="4"></int>
                                    </dictionary>
                                   </instance>
                                   <string role="key" value="_id"></string>
                                   <unicode value="16_127_2.18"></unicode>
                                   <string role="key" value="_imageResource"></string>
                                   <reference key="34"></reference>
                                   <string role="key" value="_parent"></string>
                                   <reference key="12"></reference>
                                   <string role="key" value="_thumbnailResource"></string>
                                   <none></none>
                                   <string role="key" value="exe.engine.galleryidevice.GalleryImage.persistenceVersion"></string>
                                   <int value="3"></int>
                                   <string role="key" value="makeThumbnail"></string>
                                   <bool value="0"></bool>
                                  </dictionary>
                                 </instance>
                                </list>
                                <string role="key" value="idevice"></string>
                                <reference key="12"></reference>
                               </dictionary>
                              </instance>
                              <string role="key" value="intlinks_to_anchors"></string>
                              <dictionary>
                               <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Abstraktion#auto_top"></unicode>
                               <reference key="17"></reference>
                              </dictionary>
                              <string role="key" value="nextImageId"></string>
                              <int value="19"></int>
                              <string role="key" value="parentNode"></string>
                              <reference key="21"></reference>
                             </dictionary>
                            </instance>
                            <reference key="14"></reference>
                            <reference key="25"></reference>
                           </list>
                           <string role="key" value="children"></string>
                           <list></list>
                          </dictionary>
                         </instance>
                         <string role="key" value="systemResources"></string>
                         <list></list>
                         <string role="key" value="undo"></string>
                         <bool value="1"></bool>
                         <string role="key" value="userResources"></string>
                         <list></list>
                         <string role="key" value="version"></string>
                         <int value="0"></int>
                        </dictionary>
                       </instance>
                       <string role="key" value="_instruc"></string>
                       <string value=""></string>
                       <string role="key" value="_name"></string>
                       <string value=""></string>
                       <string role="key" value="anchor_names"></string>
                       <list></list>
                       <string role="key" value="anchors_linked_from_fields"></string>
                       <dictionary></dictionary>
                       <string role="key" value="content_w_resourcePaths"></string>
                       <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung - Abstraktion&lt;/h1&gt;
&lt;p&gt;Abstraktion ist ein Vorgang, bestehen aus dem Weglassen von Einzelheiten und dem Überführen in etwas Allgemeines. Im Attag führen wir Abstraktion eigentlich immer dann aus, wenn wir Dinge kategorieseren. Wir nehmen eine Reihe von Dingen, schauen, welche Eigenschaften diese Dinge gemeinsam haben und fassen sie dann in einer Kategorie oder Klasse zusammen. Die Kategorie ist eine Abstraktion der einzelnen Dinge. In unserem Tierbeispiel aus dem Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top&quot;&gt;Vererbung&lt;/a&gt; sind wir bereits der Abstraktion begegnet: Hund, Katze und Wal haben wir alle der Kategorie oder Klasse Säugetier zugeordnet. Die Klasse Säugtier ist somit eine Abstraktion von Hund, Katze und Wal. Wir lassen ein paar Details weg und überführen Hund, Katze und Wal in etwas allgemeineres. Säugtier, Vogel, Reptil und Fisch haben wir der Klasse Tier zugeordnet - eine Klasse die noch abstrakter ist und weniger Details enthält.&lt;/p&gt;
&lt;p&gt;Abstraktion ist ein zentrales Prinzip der objektorientierten Programmierung, das schon in den bisherigen Kapiteln sichtbar wurde. Mithilfe von abstrakten Klassen und Interfaces ist es möglich gemeinsame Eigenschaften und gemeinsames Verhalten festzulegen, ohne dass jedes Detail explizit implementiert werden muss.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel lernst du&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wie man eine abstrakte Klasse erstellt und verwendet.&lt;/li&gt;
&lt;li&gt;Was ein Interface ist&lt;/li&gt;
&lt;li&gt;Wie Interfaces eingesetzt werden können&lt;/li&gt;
&lt;li&gt;Die Stärken und Schwächen von Interfaces und abstrakten Klassen.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Abstrakte Klassen&lt;/h1&gt;
&lt;p&gt;Während eine Klasse ein konkreter Bauplan für ein Objekt ist, ist eine abstrakte Klasse eher eine Vorlage für ein Bauplan für ein Objekt. Aus der Vorlage selber kann kein Objekt erstellt werden, da wichtige Details fehlen. Stell dir das vor, wie bei einem Unternehmen, das Häuser baut. Im Katalog des Unternehmens sind ein paar Standard-Grundrisse, welche definieren, wie die Räume aufgeteilt sind, wo Fenster und Türen sein können und wo das Treppenhaus ist. Aus diesem Standard-Grundriss kann man aber kein Haus bauen, da die Kunden noch festlegen müssen, welche Türen sie genau möchten, ob sie lieber ein großes, breites Fenster haben möchten oder 2 kleine, welche Art von Treppe eingebaut werden soll, etc. Sobald das alles festgelegt ist, liegt ein fertiger konkreter Bauplan vor, mit dem ein Haus gebaut werden kann.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition und Eigenschaften&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eine abstrakte Klasse kann sowohl abstrakte Methoden (ohne Implementierung) als auch konkrete Methoden (mit Implementierung) enthalten.&lt;/li&gt;
&lt;li&gt;Sie kann nicht &lt;em&gt;direkt&lt;/em&gt; instanziiert werden. Das bedeutet, es ist nicht möglich, ein Objekt direkt von einer abstrakten Klasse zu erzeugen, sondern nur von ihren konkreten Subklassen.&lt;/li&gt;
&lt;li&gt;Abstrakte Klassen ermöglichen es, Gemeinsames zentral zu definieren und gleichzeitig den Subklassen den Freiraum zu lassen, spezialisierte Implementierungen zu liefern.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstrakte Klassen werden definiert, in dem man den Modifikator &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;abstract&lt;/span&gt; vor das Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;class&lt;/span&gt; setzt&lt;/li&gt;
&lt;li&gt;Abstrakte Methoden werden definiert, in dem den Modifikator &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;abstract&lt;/span&gt; von den Rückgabetyp setzt und den Codeblock {} weglässt. &lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Dies wird auch als &lt;strong&gt;Methodensignatur&lt;/strong&gt; bezeichnet: Sie definiert Rückgabetyp, Name und Anzahl und Reihenfolge der Parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Beispiel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Betrachten wir eine abstrakte Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Tier,&lt;/span&gt; die bereits in früheren Kapiteln zur Veranschaulichung von Vererbung und verwendet wurde. Hier definieren wir eine abstrakte Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;geraeuschMachen() &lt;/span&gt;und eine konkrete Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;schlafen()&lt;/span&gt;, die wir für alle Tiere umsetzen. Die abstrakte Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;geraeuschMachen()&lt;/span&gt; hat &lt;span style=&quot;text-decoration: underline;&quot;&gt;keine&lt;/span&gt; geschweiften Klammern {} (keinen Codeblock bzw. keine Implementierung) und  muss von jeder Subklasse umgesetzt werden, die nicht selber abstrakt ist - sonst hätten wir am Ende ein Objekt mit einer Methode ohne Implementierung.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-2and11and20and25and26and31and37&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Abstrakte Klasse Tier
abstract class Tier {
    protected String name;

    public Tier(String name) {
        this.name = name;
    }

    // Abstrakte Methode: keine Implementierung, muss von jeder 
    // Subklasse, die nicht abstrakt ist konkret umgesetzt werden
    public abstract void geraeuschMachen();

    // Konkrete Methode: bereitgestellte allgemeine Funktionalität
    public void schlafen() {
        System.out.println(name + &quot; schläft.&quot;);
    }
}

// Abstrakte Subklasse Saeugetier
abstract class Saeugetier extends Tier {
    public Saeugetier(String name) {
        super(name);
    }
    
    // Diese klasse muss geraeuschMachen() 
    // nicht umsetzen, da sie auch abstrakt ist

}

// Konkrete Subklasse Hund
class Hund extends Saeugetier {
    public Hund(String name) {
        super(name);
    }

    @Override
    public void geraeuschMachen() {
        System.out.println(name + &quot; bellt: Wuff!&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In diesem Beispiel dient die abstrakte Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Tier&lt;/span&gt; dazu, einen Rahmen vorzugeben, ohne sich auf eine spezifische Implementation des Geräuschmachens festzulegen. Jede Tierart kann dann ihre eigene Variante implementieren – so bleibt der Code flexibel und übersichtlich.&lt;/p&gt;
&lt;p&gt;Abstrakte Klassen nutzen das Prinzip der &lt;strong&gt;Kategorisierung&lt;/strong&gt; bzw. &lt;strong&gt;Klassifizierung&lt;/strong&gt;. In dem Tier-Beispiel wird das gut sichtbar: Ein konkreter Hund (Objekt) gehört zu der Klasse der Hunde, die Klasse Hund gehört zur Klasse der Säugetiere und die Klasse Säugetiere gehört zu der Klasse Tier. Je &quot;höher&quot; man in dieser Klasifizierung geht, desto abstraker werden die Klassen. Hier sind Klassifikation und Abstraktion eng miteinander verbunden.&lt;/p&gt;
&lt;h1&gt;Interfaces&lt;/h1&gt;
&lt;p&gt;Interfaces sind eine Struktur, die es ebenfalls ermöglicht Abstraktion im Code umzusetzen - aber &lt;em&gt;ohne&lt;/em&gt; Klassifikation. Das bedeutet ein Interface kann abstrakte Methoden definieren und Eigenschaften festlegen, ohne dass diese zu einer konkreten Klasse gehören. Viel mehr kann dieses Interface jeder beliebigen Klasse einfach unabhängig von Vererbung und Klassifikation zugeordnet werden.&lt;/p&gt;
&lt;p&gt;Bildlich kannst du dir ein Interface vorstelle wir ein Vertrag: In diesem Vertrag wird festgelegt, welche Methoden ein Objekt bereitstellen (also den Codeblock ergänzen) muss. Das Interface legt fest, um welche Methode(n) es sich handelt, das Objekt definiert, wie diese umgesetzt werden. Abstrakte Klassen bilden häufig ein &quot;ist-ein&quot;-Verhätlnis ab (z.B. ein Hund &lt;em&gt;ist ein&lt;/em&gt; Säugetier), wohingegen Interfaces ein &quot;kann&quot;-Verhältnis abbilden (ein Hund &lt;em&gt;kann&lt;/em&gt; ein Geräusch Machen). &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition und Eigenschaften&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ein Interface definiert primär abstrakte Methoden und kann &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;default&lt;/span&gt; Methoden erhalten.&lt;/li&gt;
&lt;li&gt;Es kann von beliebig vielen Klassen „implementiert“ werden, was eine Art Mehrfachvererbung ermöglicht, da eine Klasse mehrere Interfaces implementieren kann.&lt;/li&gt;
&lt;li&gt;Interfaces dienen zur Entkoppelung: Sie legen fest, welche Funktionalitäten benötigt werden, ohne die konkrete Implementierung vorzugeben.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interfaces werden definiert, indem man anstelle des Schlüsselwortes &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;class,&lt;/span&gt; das Schlüsselwort &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;interface&lt;/span&gt; einsetzt.
&lt;ul&gt;
&lt;li&gt;Interfaces haben keinen Konstruktor&lt;/li&gt;
&lt;li&gt;Interfaces können Felder und Methoden enthalten.
&lt;ul&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Methoden (und Felder) können folgende Modifikatoren haben:
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public&lt;/span&gt; (implizit): Alle Methoden in Interfaces sind standardmäßig &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public.&lt;/span&gt; Der Modifikator kann weggelassen werden.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;abstract&lt;/span&gt; (implizit): Alle Methoden in Interfaces sind standardmäßg &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;abstract.&lt;/span&gt; Der Modifikator kann weggelassen werden.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;default:&lt;/span&gt; Seit Java 8 können Interfaces konkrete Implementierungen mit default-Methoden haben&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;static:&lt;/span&gt; Seit Java 8 sind auch statische Methoden erlaubt.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;private:&lt;/span&gt; Seit Java 9 sind auch private Methoden erlaubt - diese benötigen aber eine Implementierung, da sie von außerhalb des Interfaces nicht überschrieben werden können.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interfaces werden angewendet, indem man hinter dem Klassennamen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;implements [Interfacename]&lt;/span&gt; ergänzt und ...
&lt;ul&gt;
&lt;li&gt;alle (abstrakten) Methoden des Interfaces implementiert, wenn die Klasse selber nicht abstrakt ist&lt;/li&gt;
&lt;li&gt;kein oder einen Teil der (abstrakten) Methoden des Interfaces implementiert, wenn die Klasse selber abstrakt ist.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tier Beispiel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wir nehmen unser Tier Beispiel und wandeln einen Teil davon in ein Interface um, denn: Nicht nur Tiere können ein Geräusch machen: Auch Autos, eine Klingel, ein Lautpsprecher etc. Wir möchten also die Methode geräuschMachen() in ein Interface auslagern, welches wir in verschiedenen Klassen implementieren können.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-2and11and37and43and52&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Hier wird das Interface definiert
interface GeraeuschMachen {

    // Abstrakte Methode, die von nicht abstrakten 
    // Objekten implementiert werden muss
    void geraeuschMachen();
}

// Abstrakte Klasse Tier
// Implementiert GeraeuschMachen
abstract class Tier implements GeraeuschMachen {
    protected String name;

    public Tier(String name) {
        this.name = name;
    }

    public void schlafen() {
        System.out.println(name + &quot; schläft.&quot;);
    }
}

// Abstrakte Subklasse Saeugetier
abstract class Saeugetier extends Tier {
    public Saeugetier(String name) {
        super(name);
    }
}

// Konkrete Subklasse Hund
class Hund extends Saeugetier {
    public Hund(String name) {
        super(name);
    }

    // Implementierung des Interfaces
    public void geraeuschMachen() {
        System.out.println(name + &quot; bellt: Wuff!&quot;);
    }
}

// Auto implementiert GeraeuschMachen
class Auto implements GeraeuschMachen {
    
    @Override
    public void geraeuschMachen() {
        System.out.println(&quot;Tutuuuuu!&quot;);
    }
}

// KLingel implementiert GeraeuschMachen
class Klingel implements GeraeuschMachen {

    @Override
    public void geraeuschMachen() {
        System.out.println(&quot;Ding Dong!&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Beispiel Bewegung und Zeichnen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ein weiteres Beispiel ist die Umsetzung von Interfaces für Bewegung und dem Zeichnen auf dem Bildschirm. Gerade in Programmen gibt es einige Elemente, die bewegbar sind und auf der Bildschirm gezeichnet werden. Aber nicht alle Elemente im Spiel werden auf dem Bildschirm gezeichnet und nicht alle Elemente, die auf dem Bildschirm gezeichnet werden, sind bewegbar. Aus diesem Grund kann es durchaus sinnvoll sein, diese beiden separaten Interfaces zu Nutzen und je nach Bedarf in Klassen einzubinden. Der Spieler wird zum Beispiel gezeichnet und bewegt, ein Wand hingegen wird nur gezeichnet, aber &lt;em&gt;nicht&lt;/em&gt; bewegt.&lt;/p&gt;
&lt;p&gt;Wir erstellen also die Interfaces &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Movable&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Drawble&lt;/span&gt; und implementieren sie in den Klassen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Player&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Wall&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-1and6and12and34&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;interface Movable {
    // Methodensignatur, die von jedem implementierenden Objekt definiert werden muss
    void move();
}

interface Drawable {
    // Methodensignatur, die von jedem implementierenden Objekt definiert werden muss
    void draw();
}

// Klasse Player implementiert Movable und Drawable
class Player implements Movable, Drawable {

    private float x,y;

    public Player(float  x, float y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public void move() {
        System.out.println(&quot;Steuerung per Pfeiltasten&quot;);
    }

    @Override
    public void draw() {
        System.out.println(&quot;Zeichne Spieler bei x: &quot; + x + &quot; y: &quot; + y);
        
    }
}

// Klasse Enemy implementiert das  Movable
class Wall implements Drawable {

    private float x,y;

    public Wall(float x, float y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public void draw() {
        System.out.println(&quot;Zeichne Wand bei x: &quot; + x + &quot; y: &quot; + y);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Du siehst: Player implementiert 2 Interfaces: Weitere Interfaces werden durch Kommata getrennt an das erste Interface angehängt.&lt;/p&gt;
&lt;h2&gt;default-Methoden&lt;/h2&gt;
&lt;p&gt;Wir haben gelernt, dass es der Zweck von Interfaces ist, Verhalten (in Form von Methoden) vorzugeben, die Implementierung aber den Klassen zu überlassen, die das Interface verwendet. Seit Java 8 (also ca. seit 2014) ist es aber auch möglich in einem Interface sogenannte &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;default&lt;/span&gt; Methoden zu erstellen. Hierbei handelt es sich um konkrete Methoden (mit Implementierung), die von den Klassen, die das Interface verwenden, überschrieben werden können - nicht müssen.&lt;/p&gt;
&lt;p&gt;default-Methoden wurden eingeführt um folgendes Problem zu lösen: Stell dir ein großes Java-Projekt vor mit einem Interface, dass in 20+ Klassen verwendet wird. Nun erweiterst du dein Interface um eine neue Methode (die bis vor 2014 abstrakt sein musste) von allen 20+ implementiert werden muss. Das würde bedeuten, dass dein Programm nicht ausführbar ist, bis du in jeder Klasse eine konkrete Implementierung eingebaut ist - was sehr umständlich ist. Mit default-Methoden ist das nicht der Fall. Hier kannst du eine Standard-Implementierung zur Verfügung stellen, welche verwendet wird solange die Klasse diese nicht mit einer eignenen Implementierung überschreibt.&lt;/p&gt;
&lt;p&gt;Dieses Problem tritt häufig auf, wenn eine Bibliothek erweitert wird. Mithilfe von default-Methoden bist du nicht gezwungen, dein ganzes Programm anpassen zu müssen, nur weil eine Bibliothek, die du verwendest, weitere Methoden in seinen Interfaces hinzugefügt hat.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Interface Sortable aus einer Bibliothek für Listen
interface Sortable {
    // &quot;Alte&quot; Methode, ie schon länger vorhanden ist
    void sort();

    // &quot;Neue Methode im Interface, die nach 
    // und nach umgesetzt werden kann
    default void sortDescending() {
        System.out.println(&quot;Sortierung in absteigender Reihenfolge&quot;);
    }
}

// Deine Listenklassen, welche das Interface Sortbale aus der Bibliothek verwendet
class MyList implements Sortable {
    @Override
    public void sort() {
        // Implementierung der Sortierung
    }
    // Keine Notwendigkeit, sortDescending() (sofort) zu implementieren
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;Vergleich: Abstrakte Klassen vs. Interfaces&lt;/h1&gt;
&lt;p&gt;Beide Konzepte dienen der Abstraktion, verfolgen jedoch unterschiedliche Ansätze:&lt;/p&gt;
&lt;table style=&quot;height: 155px; width: 100%;&quot; border=&quot;1&quot; class=&quot;exe-table&quot;&gt;
&lt;thead&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 21.0247%; height: 25px;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;width: 39.0283%; height: 25px;&quot;&gt;&lt;strong&gt;Abstrakte Klasse&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 39.9469%; height: 25px;&quot;&gt;&lt;strong&gt;Interface&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 21.0247%; height: 25px;&quot;&gt;&lt;strong&gt;Instanziierung&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 39.0283%; height: 25px;&quot;&gt;Kann nicht direkt instanziert werden&lt;/td&gt;
&lt;td style=&quot;width: 39.9469%; height: 25px;&quot;&gt;Kann nicht direkt instanziert werden&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 50px;&quot;&gt;
&lt;td style=&quot;width: 21.0247%; height: 50px;&quot;&gt;&lt;strong&gt;Implementierung&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 39.0283%; height: 50px;&quot;&gt;Kann sowohl abstrakte als auch konkrete Methoden enthalten&lt;/td&gt;
&lt;td style=&quot;width: 39.9469%; height: 50px;&quot;&gt;Enthält primär abstrakte Methoden, aber auch (konkrete) default Methoden&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 25px;&quot;&gt;
&lt;td style=&quot;width: 21.0247%; height: 25px;&quot;&gt;&lt;strong&gt;Vererbung&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 39.0283%; height: 25px;&quot;&gt;Eine Klasse kann nur &lt;em&gt;eine&lt;/em&gt; abstrakte Klasse erweitern&lt;/td&gt;
&lt;td style=&quot;width: 39.9469%; height: 25px;&quot;&gt;Eine Klasse kann mehrere Interfaces implementieren&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&quot;height: 30px;&quot;&gt;
&lt;td style=&quot;width: 21.0247%; height: 30px;&quot;&gt;&lt;strong&gt;Verwendungszweck&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;width: 39.0283%; height: 30px;&quot;&gt;
&lt;p&gt;Gemeinsame Basis für &lt;span style=&quot;text-decoration: underline;&quot;&gt;eng verwandte&lt;/span&gt; Klassen, zentraler Code&lt;/p&gt;
&lt;/td&gt;
&lt;td style=&quot;width: 39.9469%; height: 30px;&quot;&gt;Definition eines Vertrages, der von beliebigen Klassen erfüllt werden kann&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;Diese Gegenüberstellung verdeutlicht, dass abstrakte Klassen ideal sind, wenn es eine starke “ist-ein” Beziehung gibt, während Interfaces Flexibilität und lose Kopplung bei der Umsetzung von Fähigkeiten ermöglichen.&lt;/p&gt;
&lt;h1&gt;&lt;br /&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;p&gt;Beide Übungsaugaben basieren auf dem Beispiel mit dem Bewegenden Ball aus dem Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Klassen%20und%20Objekte#auto_top&quot;&gt;Klassen und Objekte&lt;/a&gt;. Nutze den Code als Grundlage. Du sollst von diesem Code&lt;em&gt; 2 Varianten&lt;/em&gt; erstellen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1: Abstrakte Klassen implementieren&lt;br /&gt;&lt;/strong&gt;Der Ball hat zwei wichtige Methoden: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;zeichnen()&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;bewegen().&lt;/span&gt; Lagere beide Methoden inklusive den dafür benötigten Attributen in 2 abstrakte Klassen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;DrawableObject&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;MovableObjekt&lt;/span&gt; aus und erstelle eine sinnvolle Vererbungshierarchie. Die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball&lt;/span&gt; soll von beiden Klassen erben und Implementierungen für die abstrakten Methoden zur Verfügung stellen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 2: Interfaces implementieren&lt;br /&gt;&lt;/strong&gt;Bei dieser Aufgabe sollst du die Methoden &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;zeichnen()&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;bewegen()&lt;/span&gt; nicht in abstrakten Klassen auslagern, sondern in die Interfaces &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Drawable&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Moveable&lt;/span&gt; und diese dann in der Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball&lt;/span&gt; umsetzen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflexion:&lt;/strong&gt;&lt;br /&gt;Schau dir beide Varianten deines Codes an: Die mit den abstrakten Klassen und die mit den Interfaces. Beides sind sinnvolle Strukturen. Welche Variante findest du sinnvoller und nachvollziehbarer?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Erklär's mir als wäre ich 5 Jahre alt: Was sind abstrakte Klassen und was sind Interfaces?&lt;/li&gt;
&lt;li&gt;Warum kann eine abstrakte Klasse nicht direkt instanziiert werden?&lt;/li&gt;
&lt;li&gt;In welchen Situationen würdest du ein Interface einem abstrakten Klasse vorziehen?&lt;/li&gt;
&lt;li&gt;Nenne zwei wesentliche Unterschiede zwischen abstrakten Klassen und Interfaces.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Abstrakte Klassen:
&lt;ul&gt;
&lt;li&gt;Dienen als Basis und Bauplan für verwandte Klassen.&lt;/li&gt;
&lt;li&gt;Können sowohl abstrakte Methoden als auch konkrete Implementierungen enthalten.&lt;/li&gt;
&lt;li&gt;Werden genutzt, um eine “ist-ein” Beziehung zu modellieren.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interfaces:
&lt;ul&gt;
&lt;li&gt;Definieren Verträge, die jede implementierende Klasse erfüllen muss.&lt;/li&gt;
&lt;li&gt;Ermöglichen Mehrfachvererbung in Form von verhaltensbezogener Kopplung.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gemeinsamer Nutzen:
&lt;ul&gt;
&lt;li&gt;Beide Mechanismen unterstützen die Abstraktion und fördern die Wartbarkeit und Erweiterbarkeit von Code.&lt;/li&gt;
&lt;li&gt;Sie ergänzen die Konzepte der Klassen, Objekte, Vererbung und Polymorphismus, die bereits in den vorherigen Kapiteln behandelt wurden.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                       <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                       <int value="4"></int>
                       <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                       <int value="2"></int>
                       <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                       <int value="3"></int>
                       <string role="key" value="htmlTag"></string>
                       <string value="div"></string>
                       <string role="key" value="images"></string>
                       <instance class="exe.engine.galleryidevice.GalleryImages">
                        <dictionary>
                         <string role="key" value=".listitems"></string>
                         <list></list>
                         <string role="key" value="idevice"></string>
                         <reference key="10"></reference>
                        </dictionary>
                       </instance>
                       <string role="key" value="intlinks_to_anchors"></string>
                       <dictionary>
                        <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Klassen%20und%20Objekte#auto_top"></unicode>
                        <reference key="9"></reference>
                        <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Vererbung#auto_top"></unicode>
                        <reference key="21"></reference>
                       </dictionary>
                       <string role="key" value="nextImageId"></string>
                       <int value="0"></int>
                       <string role="key" value="parentNode"></string>
                       <reference key="17"></reference>
                      </dictionary>
                     </instance>
                    </list>
                    <string role="key" value="children"></string>
                    <list>
                     <instance class="exe.engine.node.Node" reference="40">
                      <dictionary>
                       <string role="key" value="_title"></string>
                       <unicode value="Packages und API"></unicode>
                       <string role="key" value="idevices"></string>
                       <list>
                        <instance class="exe.engine.jsidevice.JsIdevice" reference="35">
                         <dictionary>
                          <string role="key" value="_title"></string>
                          <unicode value=""></unicode>
                          <string role="key" value="_attributes"></string>
                          <list>
                           <tuple>
                            <string value="title"></string>
                            <list>
                             <string value="Title"></string>
                             <int value="0"></int>
                             <int value="0"></int>
                            </list>
                           </tuple>
                           <tuple>
                            <string value="category"></string>
                            <list>
                             <string value="Category"></string>
                             <int value="0"></int>
                             <int value="1"></int>
                            </list>
                           </tuple>
                           <tuple>
                            <string value="css-class"></string>
                            <list>
                             <string value="CSS class"></string>
                             <int value="0"></int>
                             <int value="2"></int>
                            </list>
                           </tuple>
                           <tuple>
                            <string value="icon"></string>
                            <list>
                             <string value="Icon"></string>
                             <int value="0"></int>
                             <int value="3"></int>
                            </list>
                           </tuple>
                          </list>
                          <string role="key" value="_author"></string>
                          <string value=""></string>
                          <string role="key" value="_iDeviceDir"></string>
                          <string value="text"></string>
                          <string role="key" value="_purpose"></string>
                          <string value=""></string>
                          <string role="key" value="_tip"></string>
                          <string value=""></string>
                          <string role="key" value="_typeName"></string>
                          <unicode value="Text"></unicode>
                          <string role="key" value="_valid"></string>
                          <bool value="1"></bool>
                          <string role="key" value="class_"></string>
                          <unicode value="text"></unicode>
                          <string role="key" value="edit"></string>
                          <bool value="0"></bool>
                          <string role="key" value="emphasis"></string>
                          <int value="0"></int>
                          <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                          <int value="1"></int>
                          <string role="key" value="fields"></string>
                          <list>
                           <instance class="exe.engine.field.TextAreaField" reference="36">
                            <dictionary>
                             <string role="key" value="_id"></string>
                             <unicode value="128_2"></unicode>
                             <string role="key" value="_idevice"></string>
                             <reference key="35"></reference>
                             <string role="key" value="_instruc"></string>
                             <string value=""></string>
                             <string role="key" value="_name"></string>
                             <string value=""></string>
                             <string role="key" value="anchor_names"></string>
                             <list></list>
                             <string role="key" value="anchors_linked_from_fields"></string>
                             <dictionary></dictionary>
                             <string role="key" value="content_w_resourcePaths"></string>
                             <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung&lt;/h1&gt;
&lt;p&gt;Ein Paket oder auch Package wird in Java verwendet um Klassen zu gruppieren, die zusammengehören. Du kannst dir das am besten vorstellen, wir Ordner in einem Dateisystem. Mithilfe von Packages lassen sich Klassen organisieren und Konflikte bei der Namensgebung vermeiden. Dabei lassen sich Packages in Java in zwei Kategorien einteilen: Pakete aus der Java API und benutzerdefinierte Pakete.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel lernst du:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Was die Java API ist&lt;/li&gt;
&lt;li&gt;Wie man Pakete und Klassen imporiert&lt;/li&gt;
&lt;li&gt;Wie man selber Pakete und Klassen definieren kann.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Java API&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;ILfuVd&quot; lang=&quot;de&quot;&gt;&lt;span class=&quot;hgKElc&quot;&gt;APIs (Application Programming Interfaces) sind sogenannte Programmierschnittstellen. Sie bestehen aus mehreren Definitionen und Protokollen zur Softwareentwicklung. &lt;/span&gt;&lt;/span&gt;Die Java API ist eine Bibliothek und enthält viele Klassen, die du für die Entwicklung deiner Java-Anwendungen kostenlos nutzen darf. Die Java API ist automatisch in deiner Java Entwicklungsumgebung integriert.&lt;/p&gt;
&lt;p&gt;Die Java-Bibliothek ist unterteilt ist Packages und Klassen. Das bedeutet du kannst entweder einzelne Klassen oder ganze Packete (die mehrere Klassen enthalten) importieren. Eine Liste mit allen Paketen und Klassen innerhalb der Java API findest du auf &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Oracle&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Importieren von Klassen und Packages&lt;/h1&gt;
&lt;p&gt;Den &lt;strong&gt;Syntax&lt;/strong&gt; zum einbinden bzw. importieren einer Bibliothek kennen wir bereits aus Processing:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import package.name.Class;   // Klasse importieren
import package.name.*;          //  Paket importieren
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ein konkretes Beispiel ist das importieren des Collection Frameworks aus dem Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Java%20:Collections%20und%20Lambda%20Ausdr%C3%BCcke#auto_top&quot; title=&quot;Zum Kapitel&quot;&gt;Collections und Lambda Ausdrücke&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import java.util.ArrayList;   // Importiert die Klasse ArrayList
import java.util.*;                // Importiert alle Collections
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Erstellen eigener Pakete&lt;/h1&gt;
&lt;p&gt;Am Anfang des Kapitels haben wir gesagt, dass Packages Klassen gruppieren und man sich das vorstellen kann wie Ordner in einem Dateisystem. Tatsächlich kann man sich das nicht nur so vorstellen - es &lt;em&gt;ist&lt;/em&gt; auch so. Java nutzt ein Dateisystem um Packages zu speichern. Das könnte zum Beispiel so aussehen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Haupt-Verzeichnis
&lt;ul&gt;
&lt;li&gt;meinpaket
&lt;ul&gt;
&lt;li&gt;MeineKlasse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Um ein Package zu erstellen hast du in IntelliJ zwei Möglichkeiten. In beiden Fällen klickst du mit der rechten Maustaste auf dein src Ordner wählst dann ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;New &amp;gt; Package&lt;/em&gt;&lt;br /&gt;In diesem Fall gibtst du einfach den Namen deines Pakets unter Beachtung der Bezeichner-Regeln in Java ein. Sobald du einen Namen eingegeben und die Eingabe bestätigt hast, erstellt IntelliJ einen neuen Ordner im src Ordner. Wenn du diesen Ordner nun rechts klickst und in dem Ordner eine neue Java Klasse anlegst, dann wird in der ersten Zeile der Befehl &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;package name;&lt;/span&gt; (wobei name der Name deines Pakets ist) stehen. Dadurch weiß der Compiler, dass diese Klasse zu diesem Paket gehört.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;New &amp;gt; Java Class&lt;/em&gt;&lt;br /&gt;Wer es etwas schneller haben möchte kann die oberen beiden Schritte (erst das Paket, dann die Klasse erstellen) in einem Schritt machen, indem man die Option &lt;em&gt;Java Class&lt;/em&gt; wählt und hier im Eingabefeld den Paketname und den Klassenname getrennt durch einen Punkt angibt (z.B. &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;meinpaket.MeineKlasse&lt;/span&gt;). Dann erstellt IntelliJ erst das Paket (und den Ordner) &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;meinPaket&lt;/span&gt; und direkt danach die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;MeineKlasse.&lt;/span&gt; Auch hier findest du in der ersten Zeile innerhalb der Klasse den package Befehl.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1&lt;/strong&gt;: Math-Klasse
&lt;ul&gt;
&lt;li&gt;Binde die Math Klasse in einer Datei in einem Projekt ein.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 2&lt;/strong&gt;: Eigenes Paket
&lt;ul&gt;
&lt;li&gt;Erstelle ein eigenes Packet innerhalb deines Projekts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In welche zwei Kategorien lassen sich Packages in Java einteilen?&lt;/li&gt;
&lt;li&gt;Warum sind Packages wichtig? Welche Vorteile bringen sie mit?&lt;/li&gt;
&lt;li&gt;Wie werden Packages in einer Datei eingebunden? Welcher Befehl wird benötigt?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Packages gruppieren Klassen in einer sinnvollen Struktur und verhindern Konflikte bei der Namensgebung&lt;/li&gt;
&lt;li&gt;Es gibt vordefinierte und benutzerdefinierte Pakete&lt;/li&gt;
&lt;li&gt;Die Java API ist eine mächtige Bibliothek mit vielen Klassen, die du kostenlos nutzen kannst&lt;/li&gt;
&lt;li&gt;Pakete und Klassen werden mithilfe von import importiert&lt;/li&gt;
&lt;li&gt;Eigene Pakete können über das User-Interface von IntelliJ und mithilfe des &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;package&lt;/span&gt; Schlüsselworts erstellt werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                             <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                             <int value="4"></int>
                             <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                             <int value="2"></int>
                             <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                             <int value="3"></int>
                             <string role="key" value="htmlTag"></string>
                             <string value="div"></string>
                             <string role="key" value="images"></string>
                             <instance class="exe.engine.galleryidevice.GalleryImages">
                              <dictionary>
                               <string role="key" value=".listitems"></string>
                               <list></list>
                               <string role="key" value="idevice"></string>
                               <reference key="36"></reference>
                              </dictionary>
                             </instance>
                             <string role="key" value="intlinks_to_anchors"></string>
                             <dictionary>
                              <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Java%20:Collections%20und%20Lambda%20Ausdr%C3%BCcke#auto_top"></unicode>
                              <instance class="exe.engine.node.Node" reference="39">
                               <dictionary>
                                <string role="key" value="_title"></string>
                                <unicode value="Collections und Lambda Ausdrücke"></unicode>
                                <string role="key" value="idevices"></string>
                                <list>
                                 <instance class="exe.engine.jsidevice.JsIdevice" reference="37">
                                  <dictionary>
                                   <string role="key" value="_title"></string>
                                   <unicode value=""></unicode>
                                   <string role="key" value="_attributes"></string>
                                   <list>
                                    <tuple>
                                     <string value="title"></string>
                                     <list>
                                      <string value="Title"></string>
                                      <int value="0"></int>
                                      <int value="0"></int>
                                     </list>
                                    </tuple>
                                    <tuple>
                                     <string value="category"></string>
                                     <list>
                                      <string value="Category"></string>
                                      <int value="0"></int>
                                      <int value="1"></int>
                                     </list>
                                    </tuple>
                                    <tuple>
                                     <string value="css-class"></string>
                                     <list>
                                      <string value="CSS class"></string>
                                      <int value="0"></int>
                                      <int value="2"></int>
                                     </list>
                                    </tuple>
                                    <tuple>
                                     <string value="icon"></string>
                                     <list>
                                      <string value="Icon"></string>
                                      <int value="0"></int>
                                      <int value="3"></int>
                                     </list>
                                    </tuple>
                                   </list>
                                   <string role="key" value="_author"></string>
                                   <string value=""></string>
                                   <string role="key" value="_iDeviceDir"></string>
                                   <string value="text"></string>
                                   <string role="key" value="_purpose"></string>
                                   <string value=""></string>
                                   <string role="key" value="_tip"></string>
                                   <string value=""></string>
                                   <string role="key" value="_typeName"></string>
                                   <unicode value="Text"></unicode>
                                   <string role="key" value="_valid"></string>
                                   <bool value="1"></bool>
                                   <string role="key" value="class_"></string>
                                   <unicode value="text"></unicode>
                                   <string role="key" value="edit"></string>
                                   <bool value="0"></bool>
                                   <string role="key" value="emphasis"></string>
                                   <int value="0"></int>
                                   <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                                   <int value="1"></int>
                                   <string role="key" value="fields"></string>
                                   <list>
                                    <instance class="exe.engine.field.TextAreaField" reference="38">
                                     <dictionary>
                                      <string role="key" value="_id"></string>
                                      <unicode value="135_2"></unicode>
                                      <string role="key" value="_idevice"></string>
                                      <reference key="37"></reference>
                                      <string role="key" value="_instruc"></string>
                                      <string value=""></string>
                                      <string role="key" value="_name"></string>
                                      <string value=""></string>
                                      <string role="key" value="anchor_names"></string>
                                      <list></list>
                                      <string role="key" value="anchors_linked_from_fields"></string>
                                      <dictionary></dictionary>
                                      <string role="key" value="content_w_resourcePaths"></string>
                                      <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung – Warum Collections?&lt;/h1&gt;
&lt;p&gt;Stell dir vor, du möchtest in einem Mediaplayer eine Playlist verwalten, in der Songs hinzugefügt, gelöscht und sortiert werden können. Oder du entwickelst ein System, das Nutzereingaben speichert und analysiert. Solche Aufgaben erfordern die Verwaltung von Datenstrukturen, die flexibel und effizient sind. Genau hier kommt das Collections Framework von Java ins Spiel. Es bietet eine Vielzahl von Klassen und Interfaces, um Daten zu speichern, zu organisieren und zu verarbeiten.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel lernst du:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die wichtigsten Collection-Typen: ArrayList, LinkedList, HashMap und Stack. Wir betrachten ihre Eigenschaften,&lt;/li&gt;
&lt;li&gt;Einsatzmöglichkeiten von Collections &lt;/li&gt;
&lt;li&gt;Verarbeitung von Collections mithilfe von Iteratoren, erweiterten For-Schleifen und Streams.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Das Collections Framework&lt;/h1&gt;
&lt;p&gt;Das Collections Framework ist eine Sammlung von Interfaces und Klassen, die es ermöglichen, Daten effizient zu speichern und zu verwalten. Es bietet Lösungen für häufige Probleme wie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamische Arrays (z. B. mit ArrayList)&lt;/li&gt;
&lt;li&gt;Schnelle Zuordnung von Schlüsseln zu Werten (z. B. mit HashMap)&lt;/li&gt;
&lt;li&gt;Stapelverarbeitung nach dem Last-In-First-Out-Prinzip (z. B. mit Stack)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vorteile des Collections Frameworks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flexibilität:&lt;/strong&gt; Dynamische Größenanpassung der Datenstrukturen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Effizienz:&lt;/strong&gt; Optimierte Algorithmen für Suchen, Einfügen und Löschen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Einheitlichkeit:&lt;/strong&gt; Gemeinsame Schnittstellen für verschiedene Datenstrukturen.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Wichtige Collection-Typen&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-tabs&quot;&gt;
&lt;h2&gt;ArrayList&lt;/h2&gt;
&lt;p&gt;Die &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;ArrayList&lt;/span&gt; ist eine dynamische Liste, die ähnlich wie ein Array funktioniert, aber ihre Größe automatisch anpasst.&lt;/p&gt;
&lt;p&gt;Eigenschaften:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elemente werden in einer bestimmten Reihenfolge gespeichert.&lt;/li&gt;
&lt;li&gt;Doppelte Werte sind erlaubt.&lt;/li&gt;
&lt;li&gt;Zugriff auf Elemente erfolgt über Indizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beispiel:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import java.util.ArrayList;

public class Main {
   public static void main(String[] args) {
      ArrayList&amp;lt;String&amp;gt; playlist = new ArrayList&amp;lt;&amp;gt;();
      playlist.add(&quot;Song A&quot;);
      playlist.add(&quot;Song B&quot;);
      playlist.add(&quot;Song C&quot;);

      System.out.println(&quot;Erster Song: &quot; + playlist.get(0));

      for (String song : playlist) {
         System.out.println(&quot;Song: &quot; + song);
      }
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;LinkedList&lt;/h2&gt;
&lt;p&gt;Die &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;LinkedList&lt;/span&gt; ist eine Liste, bei der die Elemente als Knoten miteinander verbunden sind.&lt;/p&gt;
&lt;p&gt;Eigenschaften:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gut geeignet für häufiges Einfügen/Löschen von Elementen.&lt;/li&gt;
&lt;li&gt;Schlechtere Zugriffszeit im Vergleich zur ArrayList.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beispiel:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import java.util.LinkedList;

public class Main {
   public static void main(String[] args) {
      LinkedList&amp;lt;String&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
      queue.add(&quot;Task 1&quot;);
      queue.add(&quot;Task 2&quot;);
      queue.addFirst(&quot;Urgent Task&quot;);
   
      for (String task : queue) {
         System.out.println(&quot;Aufgabe: &quot; + task);
      }
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;HashMap&lt;/h2&gt;
&lt;p&gt;Die HashMap ist eine Map-Struktur, die Schlüssel-Wert-Paare speichert.&lt;/p&gt;
&lt;p&gt;Eigenschaften:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schneller Zugriff auf Werte über Schlüssel.&lt;/li&gt;
&lt;li&gt;Keine garantierte Reihenfolge der Elemente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beispiel:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import java.util.HashMap;

public class Main {
   public static void main(String[] args) {
      HashMap&amp;lt;String, String&amp;gt; modulMap = new HashMap&amp;lt;&amp;gt;();
      modulMap.put(&quot;OOP&quot;, &quot;Objektorientierte Programmierung&quot;);
      modulMap.put(&quot;PRG&quot;, &quot;Programmieren&quot;);

      // Zugriff auf Werte
      System.out.println(&quot;Modul mit ID OOP: &quot; + modulMap.get(&quot;OOP&quot;)); // Ausgabe: Modul mit ID OOP: Objektorientierte Programmierung

      // Iteration über Schlüssel-Wert-Paare
      for (var entry : modulMap.entrySet()) {
         System.out.println(&quot;ID: &quot; + entry.getKey() + &quot;, Name: &quot; + entry.getValue());
      }
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Stack&lt;/h2&gt;
&lt;p&gt;Der Stack arbeitet nach dem Last-In-First-Out-Prinzip (LIFO). Dies ist besonders nützlich bei Transformationen oder Rückverfolgungen.&lt;/p&gt;
&lt;p&gt;Eigenschaften:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elemente werden gestapelt (push) und zuletzt hinzugefügte zuerst entfernt (pop).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Processing hast du mit pushMatrix() und popMatrix() bereits einen Stack verwendet, um Transformationen des Koordinatensystems zu speichern:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;Stack&amp;lt;String&amp;gt; stack = new Stack&amp;lt;&amp;gt;();
stack.push(&quot;Transformation 1&quot;);
stack.push(&quot;Transformation 2&quot;);

// Letzte Transformation entfernen
System.out.println(stack.pop()); // Ausgabe: Transformation 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Iteration über Collections&lt;/h2&gt;
&lt;p&gt;Java bietet verschiedene Möglichkeiten zur Iteration über Collections:&lt;/p&gt;
&lt;div class=&quot;exe-fx exe-tabs&quot;&gt;
&lt;h2&gt;Erweiterte for-Schleife&lt;/h2&gt;
&lt;p&gt;Die erweiterte For-Schleife (for-each) ermöglicht eine einfache Iteration über alle Elemente einer Collection. Der Aufbau einer erweiterten for-Schleife ist deutlich einfacher, als der einer normalen for-Schleife:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;for ( Datentyp variable : Liste) {

   // Schleifenkörper

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Beispiel:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In diesem Beispiel werden alle Songtitel innerhalb der ArrayList vom Typ String ausgegeben.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;ArrayList&amp;lt;String&amp;gt; songs = new ArrayList&amp;lt;&amp;gt;();
songs.add(&quot;Song A&quot;);
songs.add(&quot;Song B&quot;);

for (String song : songs) {
   System.out.println(song);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h2&gt;.forEach - Methode inkl. Lambda Ausdruck&lt;/h2&gt;
&lt;p&gt;Collections wie ArrayList, LinkedList und HashMap haben eine Klassen-Methode .forEach(). Innerhalb der Klammern der .forEach()-Methode wird angegeben, was für jedes Element der Liste durgeführt werden soll.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;LinkedList&amp;lt;String&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
queue.add(&quot;Task 1&quot;);
queue.add(&quot;Task 2&quot;);
queue.addFirst(&quot;Urgent Task&quot;);
   
queue.forEach(task -&amp;gt; System.out.println(task));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Das was in den Klammern angegeben ist, ist ein Lambda Ausdruck. Dabei handelt es sich um einen kurzen Codeblock, welcher Parameter entgegen nimmt und einen Wert zurückgibt. Lambda Ausdrücke ähneln Methoden, brauchen aber keinen Namen und können direkt im Codeblock einer anderen Methode implementiert werden. Lambda Ausdrücke sind folgendermaßen aufgebaut:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Ein Parameter
Parameter -&amp;gt; Anweisung

// Mehrere Parameter
(Parameter1, Parameter2) -&amp;gt; Anweisung

// Mehrere Parameter und komplexe Anweisung
(Parameter1, Parameter2) -&amp;gt; { Codeblock }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Iterator&lt;/h2&gt;
&lt;p&gt;Ein Iterator bietet mehr Kontrolle über die Iteration:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import java.util.ArrayList;
import java.util.Iterator;

public class Main {
   public static void main(String[] args) {
      ArrayList&amp;lt;String&amp;gt; songs = new ArrayList&amp;lt;&amp;gt;();
      songs.add(&quot;Song A&quot;);
      songs.add(&quot;Song B&quot;);

      Iterator&amp;lt;String&amp;gt; iterator = songs.iterator();
      while (iterator.hasNext()) {
         System.out.println(iterator.next());
      }
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Aufgabe 1:&lt;br /&gt;Erstelle ein Programm mit einer HashMap, die eine Einkaufsliste sein soll:
&lt;ul&gt;
&lt;li&gt;Der Schlüssel ist das Produkt, das gekauft werden soll und der Wert die Menge (z.B. 5 Tomaten)&lt;/li&gt;
&lt;li&gt;Füge mindestens fünf Produkte zur Einkaufsliste hinzu.&lt;/li&gt;
&lt;li&gt;Ändere die Menge von einem Produkt.&lt;/li&gt;
&lt;li&gt;Iteriere über die Liste und gib alle Produkte aus.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Aufgabe 2:&lt;br /&gt;Simuliere einen Stack für Transformationen in einem Grafikprogramm:
&lt;ul&gt;
&lt;li&gt;Implementiere einen Stack mit Transformationen wie „Translation“ oder „Rotation“.&lt;/li&gt;
&lt;li&gt;Füge Transformationen hinzu und entferne sie schrittweise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Was sind die Hauptunterschiede zwischen einer ArrayList und einer LinkedList?&lt;/li&gt;
&lt;li&gt;Wie funktioniert das LIFO-Prinzip bei einem Stack?&lt;/li&gt;
&lt;li&gt;Was ist ein Lambda Ausdruck und wo wird er eingesetzt?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Das Java Collections Framework bietet leistungsstarke Klassen wie ArrayList, LinkedList, HashMap und Stack.&lt;/li&gt;
&lt;li&gt;Mit erweiterten For-Schleifen (for-each) und Iteratoren kannst du effizient durch Collections iterieren.&lt;/li&gt;
&lt;li&gt;Die Wahl der richtigen Collection hängt von den Anforderungen ab – z. B. schneller Zugriff (HashMap) oder dynamische Listen (ArrayList).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                                      <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                                      <int value="4"></int>
                                      <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                                      <int value="2"></int>
                                      <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                                      <int value="3"></int>
                                      <string role="key" value="htmlTag"></string>
                                      <string value="div"></string>
                                      <string role="key" value="images"></string>
                                      <instance class="exe.engine.galleryidevice.GalleryImages">
                                       <dictionary>
                                        <string role="key" value=".listitems"></string>
                                        <list></list>
                                        <string role="key" value="idevice"></string>
                                        <reference key="38"></reference>
                                       </dictionary>
                                      </instance>
                                      <string role="key" value="intlinks_to_anchors"></string>
                                      <dictionary></dictionary>
                                      <string role="key" value="nextImageId"></string>
                                      <int value="0"></int>
                                      <string role="key" value="parentNode"></string>
                                      <reference key="39"></reference>
                                     </dictionary>
                                    </instance>
                                   </list>
                                   <string role="key" value="icon"></string>
                                   <unicode value=""></unicode>
                                   <string role="key" value="id"></string>
                                   <unicode value="8"></unicode>
                                   <string role="key" value="ideviceCategory"></string>
                                   <unicode value="Text and Tasks"></unicode>
                                   <string role="key" value="lastIdevice"></string>
                                   <bool value="0"></bool>
                                   <string role="key" value="nextFieldId"></string>
                                   <int value="3"></int>
                                   <string role="key" value="originalicon"></string>
                                   <string value=""></string>
                                   <string role="key" value="parentNode"></string>
                                   <reference key="39"></reference>
                                   <string role="key" value="systemResources"></string>
                                   <list></list>
                                   <string role="key" value="undo"></string>
                                   <bool value="1"></bool>
                                   <string role="key" value="userResources"></string>
                                   <list></list>
                                   <string role="key" value="version"></string>
                                   <int value="0"></int>
                                  </dictionary>
                                 </instance>
                                </list>
                                <string role="key" value="_id"></string>
                                <unicode value="8"></unicode>
                                <string role="key" value="_package"></string>
                                <reference key="4"></reference>
                                <string role="key" value="anchor_fields"></string>
                                <list></list>
                                <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                                <int value="2"></int>
                                <string role="key" value="exportType"></string>
                                <string value="website"></string>
                                <string role="key" value="last_full_node_path"></string>
                                <string value="exe-node:Objektorientierte%20Programmierung:Java%20:Collections%20und%20Lambda%20Ausdr%C3%BCcke"></string>
                                <string role="key" value="parent"></string>
                                <reference key="16"></reference>
                                <string role="key" value="top_anchors_linked_from_fields"></string>
                                <list>
                                 <reference key="36"></reference>
                                </list>
                                <string role="key" value="children"></string>
                                <list></list>
                               </dictionary>
                              </instance>
                             </dictionary>
                             <string role="key" value="nextImageId"></string>
                             <int value="0"></int>
                             <string role="key" value="parentNode"></string>
                             <reference key="40"></reference>
                            </dictionary>
                           </instance>
                          </list>
                          <string role="key" value="icon"></string>
                          <unicode value=""></unicode>
                          <string role="key" value="id"></string>
                          <unicode value="29"></unicode>
                          <string role="key" value="ideviceCategory"></string>
                          <unicode value="Text and Tasks"></unicode>
                          <string role="key" value="lastIdevice"></string>
                          <bool value="0"></bool>
                          <string role="key" value="nextFieldId"></string>
                          <int value="3"></int>
                          <string role="key" value="originalicon"></string>
                          <string value=""></string>
                          <string role="key" value="parentNode"></string>
                          <reference key="40"></reference>
                          <string role="key" value="systemResources"></string>
                          <list></list>
                          <string role="key" value="undo"></string>
                          <bool value="1"></bool>
                          <string role="key" value="userResources"></string>
                          <list></list>
                          <string role="key" value="version"></string>
                          <int value="0"></int>
                         </dictionary>
                        </instance>
                       </list>
                       <string role="key" value="_id"></string>
                       <unicode value="21"></unicode>
                       <string role="key" value="_package"></string>
                       <reference key="4"></reference>
                       <string role="key" value="anchor_fields"></string>
                       <list></list>
                       <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                       <int value="2"></int>
                       <string role="key" value="exportType"></string>
                       <string value="website"></string>
                       <string role="key" value="last_full_node_path"></string>
                       <string value="exe-node:Objektorientierte%20Programmierung:Klassen%20und%20Objekte:Packages%20und%20API"></string>
                       <string role="key" value="parent"></string>
                       <reference key="9"></reference>
                       <string role="key" value="top_anchors_linked_from_fields"></string>
                       <list></list>
                       <string role="key" value="children"></string>
                       <list></list>
                      </dictionary>
                     </instance>
                     <instance class="exe.engine.node.Node" reference="44">
                      <dictionary>
                       <string role="key" value="_title"></string>
                       <unicode value="Processing in anderen Klassen nutzen"></unicode>
                       <string role="key" value="idevices"></string>
                       <list>
                        <instance class="exe.engine.jsidevice.JsIdevice" reference="41">
                         <dictionary>
                          <string role="key" value="_title"></string>
                          <unicode value=""></unicode>
                          <string role="key" value="_attributes"></string>
                          <list>
                           <tuple>
                            <string value="title"></string>
                            <list>
                             <string value="Title"></string>
                             <int value="0"></int>
                             <int value="0"></int>
                            </list>
                           </tuple>
                           <tuple>
                            <string value="category"></string>
                            <list>
                             <string value="Category"></string>
                             <int value="0"></int>
                             <int value="1"></int>
                            </list>
                           </tuple>
                           <tuple>
                            <string value="css-class"></string>
                            <list>
                             <string value="CSS class"></string>
                             <int value="0"></int>
                             <int value="2"></int>
                            </list>
                           </tuple>
                           <tuple>
                            <string value="icon"></string>
                            <list>
                             <string value="Icon"></string>
                             <int value="0"></int>
                             <int value="3"></int>
                            </list>
                           </tuple>
                          </list>
                          <string role="key" value="_author"></string>
                          <string value=""></string>
                          <string role="key" value="_iDeviceDir"></string>
                          <string value="text"></string>
                          <string role="key" value="_purpose"></string>
                          <string value=""></string>
                          <string role="key" value="_tip"></string>
                          <string value=""></string>
                          <string role="key" value="_typeName"></string>
                          <unicode value="Text"></unicode>
                          <string role="key" value="_valid"></string>
                          <bool value="1"></bool>
                          <string role="key" value="class_"></string>
                          <unicode value="text"></unicode>
                          <string role="key" value="edit"></string>
                          <bool value="0"></bool>
                          <string role="key" value="emphasis"></string>
                          <int value="0"></int>
                          <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
                          <int value="1"></int>
                          <string role="key" value="fields"></string>
                          <list>
                           <instance class="exe.engine.field.TextAreaField" reference="42">
                            <dictionary>
                             <string role="key" value="_id"></string>
                             <unicode value="129_2"></unicode>
                             <string role="key" value="_idevice"></string>
                             <reference key="41"></reference>
                             <string role="key" value="_instruc"></string>
                             <string value=""></string>
                             <string role="key" value="_name"></string>
                             <string value=""></string>
                             <string role="key" value="anchor_names"></string>
                             <list></list>
                             <string role="key" value="anchors_linked_from_fields"></string>
                             <dictionary></dictionary>
                             <string role="key" value="content_w_resourcePaths"></string>
                             <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung&lt;/h1&gt;
&lt;p&gt;Im Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Java%20:Erste%20Schritte%20in%20Java#auto_top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Erste Schritte in Java&lt;/a&gt; haben wir gelernt, wie wir Processing in Java nutzen können. Hierfür mussten wir eine Klasse erstellen, welches die Klassen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; erweitert und Eigenschaften von ihr erbt. Auf diese Weise sind wir in der Lage &lt;em&gt;innerhalb&lt;/em&gt; dieser Klasse Processing Befehle zu nutzen. Allerdings gibt es einige Fälle, in denen wir Processing &lt;em&gt;außerhalb&lt;/em&gt; dieser Klasse verwenden möchten.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel lernst du:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wie du eine Referenz zu deinem Processing-Fenster an eine andere Klasse übergibst&lt;/li&gt;
&lt;li&gt;Wie du in anderen Klassen Processing Methoden und Konstanten nutzen kannst&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Beispiel Projekt: Moving Ball&lt;/h1&gt;
&lt;p&gt;Um zu veranschaulichen, wie das funktioniert, erstellen wir ein kurzes Programm, welches aus einem Ball besteht, der von links nach rechts fliegt und wenn er den rechten Bildschirmrand verlässt, wieder auf der linken Seite startet.&lt;/p&gt;
&lt;p&gt;Um ein neues Projekt zu erstellen, gehe ich folgendermaßen vor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Neues Projekt erstellen&lt;/strong&gt;: Über&lt;strong&gt; ☰ &amp;gt; File &amp;gt; New &amp;gt; New Project&lt;/strong&gt; erstelle ich ein neues Projekt mit dem Namen &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;movingBall.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Processing&lt;/strong&gt; &lt;strong&gt;verknüpfen&lt;/strong&gt;: In der linken Spalte klicke ich mit der rechten Maustaste auf meinen Projektordner &quot;movingBall&quot; und navigiere zu &lt;strong&gt;Open Module Settings &amp;gt; Modules&lt;/strong&gt;. Hier füge ich core.jar hinzu, wie im Kapitel &lt;a href=&quot;exe-node:Objektorientierte%20Programmierung:Java%20:Erste%20Schritte%20in%20Java#auto_top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Erste Schritte in Java&lt;/a&gt; erläutert&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; erstellen&lt;/strong&gt;: Mit Rechtsklick auf den &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;src&lt;/span&gt;-Ordner in der linken Spalte erstelle ich die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; und ergänze folgendes:
&lt;ul&gt;
&lt;li&gt;Erste Zeile: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;import processing.core.PApplet;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Hinter &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window:&lt;/span&gt; &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;extends PApplet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;In der Klasse: Die Methoden &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;void settings() {}&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;void draw() {}&lt;/span&gt; inklusive der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;@Override&lt;/span&gt; Annotation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; in &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Main&lt;/span&gt; aufrufen&lt;/strong&gt;: 
&lt;ul&gt;
&lt;li&gt;Erste Zeile: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;import processing.core.PApplet;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;In der main-Methode: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet.main(&quot;Window&quot;);&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball&lt;/span&gt; erstellen&lt;/strong&gt;: Mit Rechtsklick auf den &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;src&lt;/span&gt;-Ordner in der linken Spalte erstelle ich die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jetzt können wir unseren Ball erstellen. So, wie wir bisher in Processing (imperativ) programmiert haben, hätten wir wahrscheinlich allen Code in einer Datei gehabt (hier in diesem Fall in &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window).&lt;/span&gt; Es hätte ein paar globale Variablen gegeben, wie &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;x&lt;/span&gt;, &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;y&lt;/span&gt;, und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;speed&lt;/span&gt; und ein paar Befehle in &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;draw()&lt;/span&gt;, wie z.B. &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;x += speed&lt;/span&gt; und die Kollisionsabfrage, wenn der Ball den rechten Bildschirmrand berührt.&lt;/p&gt;
&lt;p&gt;Dies machen wir in Java anders, da wir objektorientiert programmieren. Das bedeutet, dass ein Objekt, das wir von der Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball&lt;/span&gt; erstellen ein in sich vollständiger und unabhängiger &quot;echter&quot; Ball ist. Alle Daten und alles Verhalten, muss innerhalb der Klasse angelegt und gespeichert werden. Was brauchen wir hierfür?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Daten&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;x- und y-Position&lt;/li&gt;
&lt;li&gt;Geschwindigkeit&lt;/li&gt;
&lt;li&gt;Größe bzw. Durchmesser&lt;/li&gt;
&lt;li&gt;Farbe (Grauwert)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verhalten&lt;/strong&gt;&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;zeichnen() - der Ball muss gemalt werden können&lt;/li&gt;
&lt;li&gt;bewegen() - Berechnung der nächsten Position inkl. Abprallen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So könnte unsere Klasse Ball erstmal aussehen:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Ball {
    
    private float x;
    private float y;
    private float geschwindigkeit;
    private int durchmesser;
    private int grauwert;
    
    Ball (float x, float y, float geschwindigkeit, int durchmesser, int grauwert) {
        this.x = x;
        this.y = y;
        this.geschwindigkeit = geschwindigkeit;
        this.durchmesser = durchmesser;
        this.grauwert = grauwert;
    }
    
    public void zeichnen () {
        // Hier brauche ich die Befehle ellipse() und fill()
    }
    
    public void bewegen () {
        x += geschwindigkeit;
        
        // Zum Abprallen muss ich die Breite des Fensters kennen
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Beachte:&lt;/strong&gt; Die Attribute sind alle &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;private,&lt;/span&gt; um ungewollte Änderungen zu vermeiden - nur die Methoden &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;zeichnen()&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;bewegen()&lt;/span&gt; sind &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;public.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Jetzt haben wir aber ein Problem: Die Befehle &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;ellipse()&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;fill()&lt;/span&gt; kann ich hier gar nicht nutzen, weil ich ja nicht in der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; Klasse bin und ich kann hier auch nicht auf &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;width&lt;/span&gt; zugreifen. Dieses &quot;Problem&quot; lösen wir, indem wir ein weiteres Attribut anlegen, das eine Referenz auf unser &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; ist. Auf diese Weise können wir dann innerhalb der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball&lt;/span&gt; Klasse auf unser &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; zugreifen.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-3and10and11and22and23and31&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Ball {

    private Window window;
    private float x;
    private float y;
    private float geschwindigkeit;
    private int durchmesser;
    private int grauwert;

    Ball (Window window, float x, float y, float geschwindigkeit, int durchmesser, int grauwert) {
        this.window = window;
        this.x = x;
        this.y = y;
        this.geschwindigkeit = geschwindigkeit;
        this.durchmesser = durchmesser;
        this.grauwert = grauwert;
    }

    void zeichnen () {

        // Nun kann ich hier, über das window-Attribut auf mein Processing Fenster zugreifen
        window.fill(grauwert);
        window.circle(x,y, durchmesser);
    }

    void bewegen () {
        x += geschwindigkeit;

        // Nach links setzen, wenn der Ball rechts den Bildschirm verlassen hat
        // Hier greife ich über das window-Attribut auf die width zu
        if(x - durchmesser/2 &amp;gt; window.width) {
            x = -durchmesser/2;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Erklärung:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ganz oben wurde das Attribut &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;window&lt;/span&gt; hinzugefügt. Es hat den Datentyp &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; und ist eine Referenz auf das &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt;-Objekt, das wir in Main erstellen und welches unser Grafikfenster erzeugt.&lt;/li&gt;
&lt;li&gt;In Zeile 10 und 11 wurde jeweils das &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;window&lt;/span&gt;-Attribut zum Konstruktor von &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball&lt;/span&gt; hinzugefügt&lt;/li&gt;
&lt;li&gt;In &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;zeichnen()&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;bewegen()&lt;/span&gt; kann nun über das &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;window&lt;/span&gt;-Attribut mithilfe der Punktnotation auf Methoden und Attribute des &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; Objekts zugegriffen werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nun müssen wir nur noch in der Window Klasse ein Objekt vom Typ Ball erstellen und diesen zeichnen und bewegen. Final sieht das vollständige Programm folgendermaßen aus:&lt;/p&gt;
&lt;div class=&quot;exe-fx exe-tabs&quot;&gt;
&lt;h2&gt;Main.java&lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import processing.core.PApplet;

public class Main {
    public static void main(String[] args) {
        
        PApplet.main(&quot;Window&quot;);

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Window.java&lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import processing.core.PApplet;

public class Window extends PApplet {

    Ball ball;

    @Override
    public void settings() {
        size( 400, 400);
        // Da wir eine Referenz von &quot;diesem&quot; Window in den Konstruktor
        // übergeben wollen, nutzen wir hier das Schlüsselwort this
        ball = new Ball(this, width/2, height/2, 2, 100, 200);

    }

    @Override
    public void draw() {
        background(60);

        // Zugriff auf die Methoden von ball mithilfe der Punktnotation
        ball.bewegen();
        ball.zeichnen();

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Ball.java&lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Ball {

    private Window window;
    private float x;
    private float y;
    private float geschwindigkeit;
    private int durchmesser;
    private int grauwert;

    Ball (Window window, float x, float y, float geschwindigkeit, int durchmesser, int grauwert) {
        this.window = window;
        this.x = x;
        this.y = y;
        this.geschwindigkeit = geschwindigkeit;
        this.durchmesser = durchmesser;
        this.grauwert = grauwert;
    }

    void zeichnen () {

        // Nun kann ich hier, über das window-Attribut auf mein Processing Fenster zugreifen
        window.fill(grauwert);
        window.circle(x,y, durchmesser);
    }

    void bewegen () {
        x += geschwindigkeit;

        // Nach links setzen, wenn der Ball rechts den Bildschirm verlassen hat
        // Hier greife ich über das window-Attribut auf die width zu
        if(x - durchmesser/2 &amp;gt; window.width) {
            x = -durchmesser/2;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Statische Eigenschaften von Processing-Klassen&lt;/h2&gt;
&lt;p&gt;Wenn wir in Java mit Processing programmieren, binden wir Processing als Bibliothek in unser Programm ein. Die Processing Bibliothek enthält 2 Klassen, deren statische Eigenschaften für uns wichtig sind: &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PConstants.&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;PApplet&lt;/h3&gt;
&lt;p&gt;In dieser Klasse befinden sich fast alle Processing Methoden, wie z.B.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;rect(), fill(), size(), translate() ...&lt;/span&gt; &lt;em&gt;(nicht&lt;/em&gt; statische Methoden - benötigen ein Grafikfenster)&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;dist(), map(), hour(), ...&lt;/span&gt; (statische Methoden - benötigt für Operationen auch ohne Grafikfenster)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;WICHTIG:&lt;/strong&gt; Bei der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; Klasse muss zwischen den statischen und den &lt;em&gt;nicht&lt;/em&gt; statischen Methoden unterschieden werden.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die &lt;em&gt;nicht&lt;/em&gt; statischen Methoden können nur auf Objekte der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; Klasse angewendet werden. Dabei handelt es sich um das Grafikfenster. Im obigen Beispiel dies das &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;window&lt;/span&gt; Objekt, welches wir aus der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Window&lt;/span&gt; Klasse erstellt haben und welche die &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; Klasse erweitert. Bei den nicht statischen Methoden handelt es sich um Methoden, die zu einem konkreten Grafikfenster gehören, wie z.B. &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;fill(), ellipse(), size(),&lt;/span&gt; da sie die Ausgabe auf dem Grafikfenster beeinflussen.&lt;/li&gt;
&lt;li&gt;Statische Methoden können über die &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; Klasse statisch verwendet werden. Dabei handelt es sich um Methoden, welche unabhängig von einem Grafikfenster sind, wie z.B. mathematische Methoden wie &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;ceil() und pow()&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;PConstants&lt;/h3&gt;
&lt;p&gt;In dieser Klasse befinden sich viele wichtige Konstanten, wie z.B.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;CENTER, CORNER, CORNERS, ...&lt;/span&gt; (benötigt für &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;rectMode()&lt;/span&gt; oder &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;ellipseMode()&lt;/span&gt; )&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;LEFT, UP, RIGHT, DOWN, ...&lt;/span&gt; (benötigt für Tasteneingaben)&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PI, TWO_PI, ...&lt;/span&gt; (allgemeine mathematische Konstanten)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Beispiel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ein typischer Anwendungsfall ist, wenn ich zum Beispiel in meiner Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball&lt;/span&gt; aus dem obigen Beispiel den &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;ellipseMode&lt;/span&gt; auf &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;CORNER&lt;/span&gt; setzen möchte. In diesem Fall nutze ich die &lt;em&gt;nicht&lt;/em&gt; statische Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;ellipseMode()&lt;/span&gt; meines &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;window&lt;/span&gt; Objekts und die statische Konstante &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;CORNER&lt;/span&gt; der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PConstants&lt;/span&gt; Klasse. Außerdem könnte ich den Abstand des Balls zum rechten Rand auch mithilfe der statischen Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;dist()&lt;/span&gt; der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; Klasse überprüfen. Die &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball&lt;/span&gt; Klasse würde nun folgendermaßen aussehen:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers hightlight-1and2and26and39&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;import processing.core.PApplet;
import processing.core.PConstants;

public class Ball {

    private Window window;
    private float x;
    private float y;
    private float geschwindigkeit;
    private int durchmesser;
    private int grauwert;

    Ball (Window window, float x, float y, float geschwindigkeit, int durchmesser, int grauwert) {
        this.window = window;
        this.x = x;
        this.y = y;
        this.geschwindigkeit = geschwindigkeit;
        this.durchmesser = durchmesser;
        this.grauwert = grauwert;
    }

    void zeichnen () {

        // Nicht statische Methode ellipseMode wird auf window angewendet
        // Statische Konstante wird über PConstants abgerufen
        window.ellipseMode(PConstants.CORNER);

        window.fill(grauwert);
        window.circle(x,y, durchmesser);


    }

    void bewegen () {
        x += geschwindigkeit;

        // Nach links setzen, wenn der Ball rechts den Bildschirm verlassen hat
        // Statische Methode dist() der PApplet Klasse
        float d = PApplet.dist(x, window.height/2, window.width, window.height/2);
        if(d &amp;lt;= 0) {
            x = -durchmesser;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1: Uhrzeit anzeigen&lt;/strong&gt;&lt;br /&gt;Erstelle ein Java-Projekt, das Processing verwendet und in der Mitte des Grafikfensters die akutelle Uhrzeit anzeigt. Erstelle hierfür eine eigene Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Uhrzeit,&lt;/span&gt; welche alle Daten und alles Verhalten enthält (ähnlich, wie die Klasse &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Ball).&lt;/span&gt; Nutze für die Darstellung der Uhrzeit die Processing Methoden &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;hour(), minute()&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;second().&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Fragen&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&quot;font-family: verdana, geneva, sans-serif;&quot;&gt;Welche Voraussetzungen müssen vorliegen, damit ich Processing in einem Java Projekt nutzen kann?&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: verdana, geneva, sans-serif;&quot;&gt;Was muss ich tun, damit ich in einer Klassen Processing-Befehle ausführen kann? (2 Optionen möglich)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: verdana, geneva, sans-serif;&quot;&gt;Was sind statische Eigenschaften von Processing (nenne 1-2 Beispiele) und wie kann ich darauf zugreifen?&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Um von einer anderen Klasse aus auf dem Processing-Fenster Methoden ausführen zu können, müssen wir an diese Klasse eine Referenz auf ein Objekt der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; Klasse übergeben.&lt;/li&gt;
&lt;li&gt;Auf statische Eigenschaften von Processing kann über die &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PApplet&lt;/span&gt; und die &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PConstants&lt;/span&gt; Klasse zugegriffen werden.&lt;/li&gt;
&lt;li&gt;In beiden Fällen muss in der jeweiligen Datei die Processing Bibliothek eingbunden werden mithilfe von &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;import processing.core.PApplet;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
                             <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
                             <int value="4"></int>
                             <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
                             <int value="2"></int>
                             <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
                             <int value="3"></int>
                             <string role="key" value="htmlTag"></string>
                             <string value="div"></string>
                             <string role="key" value="images"></string>
                             <instance class="exe.engine.galleryidevice.GalleryImages">
                              <dictionary>
                               <string role="key" value=".listitems"></string>
                               <list></list>
                               <string role="key" value="idevice"></string>
                               <reference key="42"></reference>
                              </dictionary>
                             </instance>
                             <string role="key" value="intlinks_to_anchors"></string>
                             <dictionary>
                              <unicode role="key" value="exe-node:Objektorientierte%20Programmierung:Java%20:Erste%20Schritte%20in%20Java#auto_top"></unicode>
                              <reference key="43"></reference>
                             </dictionary>
                             <string role="key" value="nextImageId"></string>
                             <int value="0"></int>
                             <string role="key" value="parentNode"></string>
                             <reference key="44"></reference>
                            </dictionary>
                           </instance>
                          </list>
                          <string role="key" value="icon"></string>
                          <unicode value=""></unicode>
                          <string role="key" value="id"></string>
                          <unicode value="30"></unicode>
                          <string role="key" value="ideviceCategory"></string>
                          <unicode value="Text and Tasks"></unicode>
                          <string role="key" value="lastIdevice"></string>
                          <bool value="0"></bool>
                          <string role="key" value="nextFieldId"></string>
                          <int value="3"></int>
                          <string role="key" value="originalicon"></string>
                          <string value=""></string>
                          <string role="key" value="parentNode"></string>
                          <reference key="44"></reference>
                          <string role="key" value="systemResources"></string>
                          <list></list>
                          <string role="key" value="undo"></string>
                          <bool value="1"></bool>
                          <string role="key" value="userResources"></string>
                          <list></list>
                          <string role="key" value="version"></string>
                          <int value="0"></int>
                         </dictionary>
                        </instance>
                       </list>
                       <string role="key" value="_id"></string>
                       <unicode value="22"></unicode>
                       <string role="key" value="_package"></string>
                       <reference key="4"></reference>
                       <string role="key" value="anchor_fields"></string>
                       <list></list>
                       <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
                       <int value="2"></int>
                       <string role="key" value="exportType"></string>
                       <string value="website"></string>
                       <string role="key" value="last_full_node_path"></string>
                       <string value="exe-node:Objektorientierte%20Programmierung:Klassen%20und%20Objekte:Processing%20in%20anderen%20Klassen%20nutzen"></string>
                       <string role="key" value="parent"></string>
                       <reference key="9"></reference>
                       <string role="key" value="top_anchors_linked_from_fields"></string>
                       <list></list>
                       <string role="key" value="children"></string>
                       <list></list>
                      </dictionary>
                     </instance>
                    </list>
                   </dictionary>
                  </instance>
                 </dictionary>
                 <string role="key" value="nextImageId"></string>
                 <int value="43"></int>
                 <string role="key" value="parentNode"></string>
                 <reference key="43"></reference>
                </dictionary>
               </instance>
              </list>
              <string role="key" value="icon"></string>
              <unicode value=""></unicode>
              <string role="key" value="id"></string>
              <unicode value="14"></unicode>
              <string role="key" value="ideviceCategory"></string>
              <unicode value="Text and Tasks"></unicode>
              <string role="key" value="lastIdevice"></string>
              <bool value="0"></bool>
              <string role="key" value="nextFieldId"></string>
              <int value="3"></int>
              <string role="key" value="originalicon"></string>
              <string value=""></string>
              <string role="key" value="parentNode"></string>
              <reference key="43"></reference>
              <string role="key" value="systemResources"></string>
              <list></list>
              <string role="key" value="undo"></string>
              <bool value="1"></bool>
              <string role="key" value="userResources"></string>
              <list>
               <reference key="45"></reference>
               <reference key="46"></reference>
              </list>
              <string role="key" value="version"></string>
              <int value="0"></int>
             </dictionary>
            </instance>
           </list>
           <string role="key" value="_id"></string>
           <unicode value="15"></unicode>
           <string role="key" value="_package"></string>
           <reference key="4"></reference>
           <string role="key" value="anchor_fields"></string>
           <list></list>
           <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
           <int value="2"></int>
           <string role="key" value="exportType"></string>
           <string value="website"></string>
           <string role="key" value="last_full_node_path"></string>
           <string value="exe-node:Objektorientierte%20Programmierung:Java%20:Erste%20Schritte%20in%20Java"></string>
           <string role="key" value="parent"></string>
           <reference key="16"></reference>
           <string role="key" value="top_anchors_linked_from_fields"></string>
           <list>
            <reference key="42"></reference>
           </list>
           <string role="key" value="children"></string>
           <list></list>
          </dictionary>
         </instance>
         <reference key="22"></reference>
         <reference key="20"></reference>
         <reference key="39"></reference>
        </list>
       </dictionary>
      </instance>
      <reference key="9"></reference>
      <reference key="33"></reference>
      <reference key="31"></reference>
      <reference key="21"></reference>
      <reference key="17"></reference>
      <reference key="32"></reference>
      <instance class="exe.engine.node.Node" reference="49">
       <dictionary>
        <string role="key" value="_title"></string>
        <unicode value="Design Patterns"></unicode>
        <string role="key" value="idevices"></string>
        <list>
         <instance class="exe.engine.jsidevice.JsIdevice" reference="47">
          <dictionary>
           <string role="key" value="_title"></string>
           <unicode value=""></unicode>
           <string role="key" value="_attributes"></string>
           <list>
            <tuple>
             <string value="title"></string>
             <list>
              <string value="Title"></string>
              <int value="0"></int>
              <int value="0"></int>
             </list>
            </tuple>
            <tuple>
             <string value="category"></string>
             <list>
              <string value="Category"></string>
              <int value="0"></int>
              <int value="1"></int>
             </list>
            </tuple>
            <tuple>
             <string value="css-class"></string>
             <list>
              <string value="CSS class"></string>
              <int value="0"></int>
              <int value="2"></int>
             </list>
            </tuple>
            <tuple>
             <string value="icon"></string>
             <list>
              <string value="Icon"></string>
              <int value="0"></int>
              <int value="3"></int>
             </list>
            </tuple>
           </list>
           <string role="key" value="_author"></string>
           <string value=""></string>
           <string role="key" value="_iDeviceDir"></string>
           <string value="text"></string>
           <string role="key" value="_purpose"></string>
           <string value=""></string>
           <string role="key" value="_tip"></string>
           <string value=""></string>
           <string role="key" value="_typeName"></string>
           <unicode value="Text"></unicode>
           <string role="key" value="_valid"></string>
           <bool value="1"></bool>
           <string role="key" value="class_"></string>
           <unicode value="text"></unicode>
           <string role="key" value="edit"></string>
           <bool value="0"></bool>
           <string role="key" value="emphasis"></string>
           <int value="0"></int>
           <string role="key" value="exe.engine.jsidevice.JsIdevice.persistenceVersion"></string>
           <int value="1"></int>
           <string role="key" value="fields"></string>
           <list>
            <instance class="exe.engine.field.TextAreaField" reference="48">
             <dictionary>
              <string role="key" value="_id"></string>
              <unicode value="133_2"></unicode>
              <string role="key" value="_idevice"></string>
              <reference key="47"></reference>
              <string role="key" value="_instruc"></string>
              <string value=""></string>
              <string role="key" value="_name"></string>
              <string value=""></string>
              <string role="key" value="anchor_names"></string>
              <list></list>
              <string role="key" value="anchors_linked_from_fields"></string>
              <dictionary></dictionary>
              <string role="key" value="content_w_resourcePaths"></string>
              <unicode content="true" value="&lt;div class=&quot;exe-text&quot;&gt;&lt;h1&gt;Einführung - Lösungen für wiederkehrende Probleme&lt;/h1&gt;
&lt;p&gt;Design Patterns sind bewährte Lösungsansätze für wiederkehrende Probleme in der objektorientierten Programmierung. Das schöne an Design Patterns ist somit, dass andere Menschen bereits vor dir Lösungen für Probleme gefunden haben und du diese einfach nutzen kannst. Auf diese Weise kannst du viele Probleme in der objektorientierten Programmierung vermeiden. Du kannst dir Design Patterns vorstellen, wie Verkehrsregeln. Verkehrsregeln lösen wiederkehrende Probleme im Straßenverkehr. Amplen regeln wer wann fahren darf, Zebrastreifen regeln wo Fußgänger die Straße überqueren dürfen, etc. Diese Muster haben sich bewährt und werden an unzähligen Stellen eingesetzt und regeln den Verkehr. Dasselbe machen Deisgn Patterns in der Softwareentwicklung.&lt;/p&gt;
&lt;p&gt;In diesem Kapitel wirst du lernen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die drei Hauptkategorien von Design Patterns&lt;/li&gt;
&lt;li&gt;Wichtige und anfängerfreundliche Design Patterns &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Arten von Design Patterns&lt;/h1&gt;
&lt;p&gt;Design Patterns in der Softwareentwicklung beschreiben das Zusammenwirken von Klassen, Objekten und Methoden, mit dem Ziel bestimmte Entwurfsprobleme zu lösen. Dabei geht es nicht darum fertigen Code zur Verfügung zu stellen, sondern eine Vorlage zu bilden, die an das eigene Programm angepasst werden kann. Der Einsatz von Design Patterns bietet mehrere Vorteile:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Wiederverwendbarkeit:&lt;/strong&gt; Bewährte Lösungen können in verschiedenen Projekten eingesetzt werden&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibilität:&lt;/strong&gt; Systeme werden leichter erweiterbar und änderbar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kommunikation:&lt;/strong&gt; Design Patterns schaffen eine gemeinsame Sprache für Entwickler&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Es ist wichtig zu beachten, dass Design Patterns nicht blind angewendet werden sollten. Sie sollten als Richtlinien verstanden werden, die an die spezifischen Anforderungen des jeweiligen Projekts angepasst werden müssen.&lt;/p&gt;
&lt;p&gt;Design Patterns lassen sich in 3 Hauptkategorien einteilen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Creational Patterns (Erzeugungsmuster)&lt;/strong&gt; beschäftigen sich mit dem Erzeugen von Objekten
&lt;ul&gt;
&lt;li&gt;Beispiele: Singleton, Factory Method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Structural Patterns (Sturkturmuster)&lt;/strong&gt; beschreiben die Komposition von Klassen und Objekten
&lt;ul&gt;
&lt;li&gt;Beispiele: Decorator, Composite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Behavioral Patterns (Verhaltensmuster)&lt;/strong&gt; modellieren die Interaktion zwischen Objekten und deren Verhalten
&lt;ul&gt;
&lt;li&gt;Beispiele: Observer, Strategy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Grundlegende Design Patterns&lt;/h1&gt;
&lt;p&gt;In diesem Kapitel werden vier grundlegende und anfängerfreundliche Design Patterns vorgestellt: Das Singleton Pattern, das Factory Method Pattern, das Observer Pattern und das Strategy Pattern.&lt;/p&gt;
&lt;h2&gt;Singleton Pattern&lt;/h2&gt;
&lt;p&gt;Das Singleton Pattern löst das wiederkehrende Problem, sicherzustellen, dass von einer Klasse nur genau eine Instanz existiert und ein globaler Zugriffspunkt auf diese Instanz bereitgestellt wird.&lt;/p&gt;
&lt;p&gt;Typische Einsatzmöglichkeiten des Singleton Patterns sind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Datenbankverbindungen:&lt;/strong&gt; Eine &lt;em&gt;einzige&lt;/em&gt; Verbindung zur Datenbank wird verwendet, um Ressourcen zu sparen und die Leistung zu verbessern.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logging:&lt;/strong&gt; Ein &lt;em&gt;zentrales&lt;/em&gt; Logger-Objekt verwaltet Logging-Informationen für die &lt;em&gt;gesamte&lt;/em&gt; Anwendung.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Konfigurationsverwaltung:&lt;/strong&gt; Eine &lt;em&gt;zentrale&lt;/em&gt; Klasse verwaltet die Anwendungskonfiguration und bietet Zugriff auf Konfigurationsparameter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Druckerwarteschlange:&lt;/strong&gt; Alle Druckaufträge werden in einen &lt;em&gt;einzigen&lt;/em&gt; Puffer geschrieben.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dateisystem:&lt;/strong&gt; Ein Singleton kann das &lt;em&gt;einzige&lt;/em&gt; Dateisystem in einer Anwendung repräsentieren.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zentrale Ressourcenverwaltung:&lt;/strong&gt; Wenn eine Ressource &lt;em&gt;nur einmal&lt;/em&gt; in der Anwendung existieren soll, wie z.B. ein Fenster in einer grafischen Anwendung&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Das Singleton Pattern wird also hauptsächlich eingesetzt, wenn eine &lt;em&gt;zentrale&lt;/em&gt; Kontrolle über eine Ressource oder einen Dienst erforderlich ist und sichergestellt werden muss, dass nur eine Instanz davon existiert.&lt;/p&gt;
&lt;h3&gt;Aufbau&lt;/h3&gt;
&lt;p&gt;Der Aufbau eines Singleton Patterns besteht aus folgenden Elementen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Private statische Instanz&lt;/strong&gt;: Eine private statische Variable, die das einzige Objekt der Klasse speichert.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privater Konstruktor&lt;/strong&gt;: Der Konstruktor der Klasse ist privat, sodass die Klasse nicht von außen instanziiert werden kann.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Öffentliche statische Zugriffsmethode&lt;/strong&gt;: Eine öffentliche statische Methode (oft &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;getInstance()&lt;/span&gt; genannt), die die einzige Instanz der Klasse zurückgibt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die Implementierung folgt typischerweise diesem Muster:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java line-numbers&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public final class Singleton {

   private static Singleton instance;
   
   private Singleton() {}

   public static Singleton getInstance() {
      if (instance == null) {
         instance = new Singleton();
      }
      return instance;
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Wichtige Aspekte des Aufbaus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Klasse stellt sicher, dass nur eine Instanz erstellt wird.&lt;/li&gt;
&lt;li&gt;Wenn bereits eine Instanz existiert, wird diese zurückgegeben, wenn nicht wird eine neue Instanz erstellt und diese dann zurückgegeben.&lt;/li&gt;
&lt;li&gt;Sie bietet einen globalen Zugriffspunkt auf diese Instanz.&lt;/li&gt;
&lt;li&gt;Die Instanziierung erfolgt erst beim ersten Aufruf der &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;getInstance()&lt;/span&gt;-Methode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Beispiel: Logger&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wie bereits oben erwähnt ist ein typisches Beispiel ein Logger, der in einer Applikation verwendet wird, um Statusmeldungen zu protokollieren – es soll nicht mehrere Logger geben, die in unterschiedlichen Bereichen unabhängig voneinander agieren.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;public class Logger {
   private static Logger instance;

   // Privater Konstruktor verhindert die direkte Instanziierung
   private Logger() { }

   public static Logger getInstance() {
      if (instance == null) {
         instance = new Logger();
      }
      return instance;
   }

   public void log(String message) {
      System.out.println(&quot;LOG: &quot; + message);
   }
}

// Anwendung in der Main-Methode:
public class Main {
   public static void main(String[] args) {
      Logger logger = Logger.getInstance();
      logger.log(&quot;Anwendung gestartet.&quot;);
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Factory Method Pattern&lt;/h2&gt;
&lt;p&gt;Das Factory Method Pattern löst mehrere wiederkehrende Probleme in der objektorientierten Programmierung:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entkopplung&lt;/strong&gt; &lt;strong&gt;der Objekterstellung&lt;/strong&gt;: Es ermöglicht die Erstellung von Objekten, ohne die exakte Klasse dieser Objekte spezifizieren zu müssen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zentralisierung&lt;/strong&gt; &lt;strong&gt;der&lt;/strong&gt; &lt;strong&gt;Objekterstellung&lt;/strong&gt;: Es verhindert, dass die Objekterstellung über den gesamten Code verstreut ist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Erweiterbarkeit:&lt;/strong&gt; Es erlaubt das Hinzufügen neuer Produkttypen, ohne bestehenden Code zu ändern.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Komplexitätsreduzierung:&lt;/strong&gt; Es kapselt die Komplexität der Objekterstellung.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typische Einsatzmöglichkeiten des Factory Method Patterns sind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Frameworks und Klassenbibliotheken&lt;/strong&gt;: Besonders nützlich, wenn die konkret zu erstellenden Produkte nicht im Vorhinein bekannt sind.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authentifizierungssysteme:&lt;/strong&gt; Zur Delegation des Authentifizierungsprozesses an Factory-Klassen, die Entscheidungen über das Handling des jeweiligen Users treffen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software mit regelmäßigen Klassenergänzungen&lt;/strong&gt;: Geeignet für Systeme, in denen planmäßig neue Klassen hinzugefügt werden, die den gleichen Erstellungsprozess durchlaufen müssen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testbarkeit verbessern:&lt;/strong&gt; Ermöglicht einfaches Ersetzen konkreter Klassen durch Mock-Objekte für Testzwecke.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wiederverwendung von Code:&lt;/strong&gt; Fördert die Erstellung einer Familie verwandter Objekte mit gemeinsamem Verhalten, aber unterschiedlichen Implementierungen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Das Factory Method Pattern bietet somit eine flexible und erweiterbare Lösung für die Objekterstellung in verschiedenen Szenarien der Softwareentwicklung.&lt;/p&gt;
&lt;h3&gt;Aufbau&lt;/h3&gt;
&lt;p&gt;Der Aufbau des Factory Method Patterns besteht aus folgenden Komponenten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Produkt:&lt;/strong&gt; Eine &lt;em&gt;abstrakte&lt;/em&gt; Klasse oder ein Interface, das die Schnittstelle für die Objekte definiert, die von der Factory-Methode erstellt werden sollen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Konkretes Produkt:&lt;/strong&gt; Konkrete Klassen, die das Produkt-Interface implementieren.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Erzeuger:&lt;/strong&gt; Eine &lt;em&gt;abstrakte&lt;/em&gt; Klasse, die die Factory-Methode deklariert. Diese Methode gibt ein Objekt vom Typ Produkt zurück. Der Creator kann auch eine Standardimplementierung der Factory-Methode enthalten.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Konkreter Erzeuger:&lt;/strong&gt; Unterklassen des Creators, die die Factory-Methode überschreiben, um spezifische Produkte zu erzeugen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die Struktur des Patterns sieht wie folgt aus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der Creator definiert eine abstrakte Factory-Methode, die ein Produkt-Objekt zurückgibt.&lt;/li&gt;
&lt;li&gt;Konkrete Creator-Klassen überschreiben diese Methode, um spezifische Produkte zu erzeugen.&lt;/li&gt;
&lt;li&gt;Das Programm arbeitet mit dem abstrakten Produkt und Creator, nicht mit konkreten Implementierungen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Beispiel: Formen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In folgendem Beispiel geht es um die Anwendung der Factory Method auf Formen. Es gibt ein Interface Shape, welches alle konkreten Formen (Kreis und Rechteck) implementieren. Dazu kommt ein abstrakter Erzeuger (Interface) für Formen und konkrete Erzeuger für Rechtecke und Kreise. In der main Methode können nun Formen erstellt werden, ohne dass das Programm genau wissen muss, wie die Formen erstellt werden und welche Klasse sie haben.&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Produkt: Gemeinsames Interface für Formen
interface Shape {
    void draw();
}

// Konkretes Produkt: Kreis
class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println(&quot;Zeichne einen Kreis.&quot;);
    }
}

// Konkretes Produkt: Rechteck
class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println(&quot;Zeichne ein Rechteck.&quot;);
    }
}

// Erzeuger
interface ShapeFactory {
    Shape createShape();
}

// Konkreter Erzeuger für Kreise
class CircleFactory implements ShapeFactory {
    @Override
    public Shape createShape() {
        return new Circle();
    }
}

// Konkreter Erzeuger für Rechtecke
class RectangleFactory implements ShapeFactory {
    @Override
    public Shape createShape() {
        return new Rectangle();
    }
}

// Anwendung in der Main-Methode:
public class Main {
    public static void main(String[] args) {
        ShapeFactory circleFactory = new CircleFactory();
        Shape circle = circleFactory.createShape();

        ShapeFactory rectangleFactory = new RectangleFactory();
        Shape rectangle = rectangleFactory.createShape();

        circle.draw(); // Ausgabe: &quot;Zeichne einen Kreis.&quot;
        rectangle.draw(); // Ausgabe: &quot;Zeichne ein Rechteck.&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Observer Pattern&lt;/h2&gt;
&lt;p&gt;Das Observer Pattern löst folgende wiederkehrende Probleme, dass Obejkte über die Zustandsänderung eines anderen Objekts informiert werden müssen.&lt;/p&gt;
&lt;p&gt;Typische Einsatzmöglichkeiten des Observer Patterns sind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Benutzeroberflächen:&lt;/strong&gt; Aktualisierung von UI-Elementen bei Änderungen der zugrunde liegenden Daten, wie z.B. die Anpassung mehrerer Anzeigen in einer Wetter-App bei Datenänderungen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ereignisbehandlung:&lt;/strong&gt; Benachrichtigung mehrerer Listener über Ereignisse oder Änderungen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verteilte Systeme:&lt;/strong&gt; Übermittlung von Updates an mehrere Komponenten in einem verteilten System.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Softwarearchitekturen:&lt;/strong&gt; Model-View-Controller (MVC): Synchronisation von Views mit Änderungen im Model.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Echtzeitdaten&lt;/strong&gt;: Aktualisierung von Displays in Echtzeit, z.B. Überwachung von Aktienkursen und automatische Benachrichtigung bei bestimmten Schwellenwerten.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Das Observer Pattern eignet sich besonders für Szenarien, in denen mehrere Komponenten auf Änderungen in einem anderen Element reagieren müssen, ohne eng miteinander gekoppelt zu sein. Das Observer Pattern ermöglicht es, dass ein Objekt (das Subjekt) seine Beobachter (Observer) automatisch benachrichtigt, wenn sich sein Zustand ändert. Dieses Muster wird häufig in Event-basierter Programmierung genutzt, etwa in grafischen Benutzeroberflächen oder Animationen.&lt;/p&gt;
&lt;h3&gt;Aufbau&lt;/h3&gt;
&lt;p&gt;Das Observer Pattern besteht aus folgenden Hauptkomponenten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Subject&lt;/strong&gt; (Beobachtetes Objekt):
&lt;ul&gt;
&lt;li&gt;Enthält eine Liste der registrierten Observer&lt;/li&gt;
&lt;li&gt;Bietet Methoden zum An- und Abmelden von Observern (oft &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;attach()&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;detach()&lt;/span&gt; genannt)&lt;/li&gt;
&lt;li&gt;Implementiert eine &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;notify()-Methode,&lt;/span&gt; um alle registrierten Observer zu benachrichtigen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observer&lt;/strong&gt; (Beobachter)&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Definiert eine Schnittstelle mit einer Update-Methode (oft &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;update()&lt;/span&gt; genannt)&lt;/li&gt;
&lt;li&gt;Diese Methode wird vom Subject aufgerufen, wenn sich dessen Zustand ändert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concrete Subject&lt;/strong&gt;&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Erbt vom Subject oder implementiert dessen Schnittstelle&lt;/li&gt;
&lt;li&gt;Verwaltet den Zustand, der für Observer von Interesse ist&lt;/li&gt;
&lt;li&gt;Ruft &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;notify()&lt;/span&gt; auf, wenn sich der Zustand ändert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concrete Observer&lt;/strong&gt;&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Implementiert die Observer-Schnittstelle&lt;/li&gt;
&lt;li&gt;Definiert, wie auf Änderungen des Subjects reagiert wird&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Der typische Ablauf im Observer Pattern ist:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Observer registrieren sich beim Subject&lt;/li&gt;
&lt;li&gt;Das Subject ändert seinen Zustand&lt;/li&gt;
&lt;li&gt;Das Subject benachrichtigt alle registrierten Observer über die Änderung&lt;/li&gt;
&lt;li&gt;Die Observer reagieren auf die Benachrichtigung&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Beispiel Wetterstation:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Das &quot;Subject&quot; (Beobachtetes Objekt)
import java.util.ArrayList;
import java.util.List;

class WetterStation {
    private List&amp;lt;Observer&amp;gt; observers = new ArrayList&amp;lt;&amp;gt;();
    private int temperatur;

    // Observer registrieren
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    // Observer entfernen
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    // Alle Observer benachrichtigen
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(temperatur);
        }
    }

    // Zustand ändern und Benachrichtigung auslösen
    public void setTemperatur(int temperatur) {
        this.temperatur = temperatur;
        notifyObservers();
    }
}

// Das &quot;Observer&quot;-Interface
interface Observer {
    void update(int temperatur);
}

// Ein konkreter Observer
class HandyApp implements Observer {
    @Override
    public void update(int temperatur) {
        System.out.println(&quot;HandyApp: Die Temperatur hat sich geändert: &quot; + temperatur + &quot;°C&quot;);
    }
}

// Ein weiterer konkreter Observer
class WetterAnzeige implements Observer {
    @Override
    public void update(int temperatur) {
        System.out.println(&quot;WetterAnzeige: Neue Temperatur: &quot; + temperatur + &quot;°C&quot;);
    }
}

// Hauptklasse zum Testen des Patterns
public class Main {
    public static void main(String[] args) {
        WetterStation wetterStation = new WetterStation();

        // Observer erstellen und registrieren
        HandyApp handyApp = new HandyApp();
        WetterAnzeige wetterAnzeige = new WetterAnzeige();

        wetterStation.addObserver(handyApp);
        wetterStation.addObserver(wetterAnzeige);

        // Temperatur ändern und Observer benachrichtigen
        wetterStation.setTemperatur(25);
        wetterStation.setTemperatur(30);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Strategy Pattern&lt;/h2&gt;
&lt;p&gt;Das Strategy Pattern löst das wiederkehrende Problem, dass während der Laufzeit überprüft werden muss, wie sich ein Objekt verhalten muss bzw. welcher Algoritmus angewendet werden muss. Das Strategy Pattern kapselt verschiedene Algorithmen in separaten Klassen und ermöglicht es dem Klienten, zur Laufzeit zwischen ihnen zu wählen. Dadurch wird der Code flexibler und leichter erweiterbar.&lt;/p&gt;
&lt;p&gt;Typische Einsatzmöglichkeiten des Strategy Patterns sind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sortieralgorithmen:&lt;/strong&gt; Auswahl verschiedener Sortierverfahren für Datensammlungen, z.B. in E-Commerce-Anwendungen zur Sortierung von Produkten nach Preis, Beliebtheit oder Relevanz&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zahlungsabwicklung:&lt;/strong&gt; Implementierung verschiedener Zahlungsmethoden wie Kreditkarte, PayPal oder Kryptowährungen in einem Onlineshop&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Preisstrategien:&lt;/strong&gt; Umsetzung unterschiedlicher Preismodelle für Abonnements, z.B. in Streaming-Diensten oder Fitnessstudios&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Validierungsregeln:&lt;/strong&gt; Anwendung verschiedener Validierungsstrategien für Daten oder Benutzeraktionen&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Formatierung&lt;/strong&gt; &lt;strong&gt;und Rendering:&lt;/strong&gt; Implementierung verschiedener Formatierungs- oder Rendering-Strategien für Texte oder Bilder&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Datenbankzugriff:&lt;/strong&gt; Verwendung unterschiedlicher Strategien für den Zugriff auf verschiedene Datenquellen&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spieleentwicklung:&lt;/strong&gt; Implementierung verschiedener Angriffsstrategien für Charaktere in Videospielen&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Aufbau&lt;/h3&gt;
&lt;p&gt;Das Strategy Pattern besteht aus drei Hauptkomponenten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kontext (Context)&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Enthält eine Referenz auf ein Strategy-Objekt&lt;/li&gt;
&lt;li&gt;Nutzt die Strategy, um einen Algorithmus auszuführen&lt;/li&gt;
&lt;li&gt;Kann zur Laufzeit die konkrete Strategy ändern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strategy (Strategie-Interface)&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Definiert eine gemeinsame Schnittstelle für alle konkreten Strategien&lt;/li&gt;
&lt;li&gt;Deklariert die Methode(n), die von konkreten Strategien implementiert werden müssen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Concrete Strategies (Konkrete Strategien)&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Implementieren das Strategy-Interface&lt;/li&gt;
&lt;li&gt;Stellen spezifische Algorithmen oder Verhaltensweisen bereit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Der typische Ablauf im Strategy Pattern ist:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Der Kontext wird mit einer konkreten Strategie initialisiert&lt;/li&gt;
&lt;li&gt;Der Client kann die Strategie im Kontext bei Bedarf austauschen&lt;/li&gt;
&lt;li&gt;Der Kontext ruft die Methode der Strategie auf, ohne deren konkrete Implementierung zu kennen&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dieses Muster ermöglicht es, Algorithmen unabhängig vom Kontext zu definieren und auszutauschen, was die Flexibilität und Erweiterbarkeit des Codes erhöht&lt;/p&gt;
&lt;p&gt;Beispiel:&lt;/p&gt;
&lt;div class=&quot;highlighted-code language-java&quot;&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;// Strategy Interface
interface PaymentStrategy {
    void pay(int amount);
}

// Concrete Strategies
class CreditCardPayment implements PaymentStrategy {
    public void pay(int amount) {
        System.out.println(&quot;Zahlung von &quot; + amount + &quot; € per Kreditkarte&quot;);
    }
}

class PayPalPayment implements PaymentStrategy {
    public void pay(int amount) {
        System.out.println(&quot;Zahlung von &quot; + amount + &quot; € per PayPal&quot;);
    }
}

class BankTransferPayment implements PaymentStrategy {
    public void pay(int amount) {
        System.out.println(&quot;Zahlung von &quot; + amount + &quot; € per Banküberweisung&quot;);
    }
}

// Context
class ShoppingCart {
    private PaymentStrategy paymentStrategy;

    public void setPaymentStrategy(PaymentStrategy strategy) {
        this.paymentStrategy = strategy;
    }

    public void checkout(int amount) {
        paymentStrategy.pay(amount);
    }
}

// Anwendung
public class Main {
    public static void main(String[] args) {
        ShoppingCart cart = new ShoppingCart();

        cart.setPaymentStrategy(new CreditCardPayment());
        cart.checkout(100); // Ausgabe: Zahlung von 100€ per Kreditkarte

        cart.setPaymentStrategy(new PayPalPayment());
        cart.checkout(200); // Ausgabe: Zahlung von 200€ per PayPal

        cart.setPaymentStrategy(new BankTransferPayment());
        cart.checkout(300); // Ausgabe: Zahlung von 300€ per Banküberweisung
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In diesem Beispiel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;PaymentStrategy&lt;/span&gt; ist das Strategy Interface, das die Methode &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;pay()&lt;/span&gt; definiert.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;CreditCardPayment, PayPalPayment&lt;/span&gt; und &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;BankTransferPayment&lt;/span&gt; sind konkrete Strategien, die das Interface implementieren.&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;ShoppingCart&lt;/span&gt; ist der Kontext, der die Strategie verwendet und austauschen kann.&lt;/li&gt;
&lt;li&gt;Im &lt;span style=&quot;font-family: andale mono, monospace;&quot;&gt;Main&lt;/span&gt;-Programm wird demonstriert, wie verschiedene Zahlungsstrategien dynamisch ausgewählt und verwendet werden können.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dieses Pattern ermöglicht es, Zahlungsmethoden einfach hinzuzufügen oder zu ändern, ohne den bestehenden Code zu modifizieren&lt;/p&gt;
&lt;h1&gt;Abschluss&lt;/h1&gt;
&lt;div class=&quot;exe-fx exe-accordion&quot;&gt;
&lt;h2&gt;Aufgaben&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 1:&lt;/strong&gt; Datenbankverbindung&lt;br /&gt;Erstelle eine kleine Anwendung, in der du das &lt;strong&gt;Singleton Pattern&lt;/strong&gt; implementierst für eine Datenbankverbindung. Dein Programm soll die Verbindung mit einer Datenbank herstellen können und wieder trennen können (es reicht die Simulation durch Konsolenausgaben). Achte dabei darauf, dass es nur eine Datenbankverbindung geben darf.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aufgabe 2:&lt;/strong&gt; Verschiedene Datenbankverdinungen&lt;br /&gt;Erweitere dein Programm aus Aufgabe 2 um ein &lt;strong&gt;Strategy Pattern.&lt;/strong&gt; Es soll verschiedene Strategien geben, sich mit einer Datenbank zu verbinden: eine Online-Datenbank und eine lokale Datenbank. Dein Programm soll überprüfen, ob eine Verbindung zum Internet besteht. Falls ja, soll die Online-Dankebank abgerufen werden, falls nein, die lokale. (Es reicht eine Simulation per Konsolenausgabe).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fragen&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Welche Vorteile bietet das Singleton Pattern im Vergleich zu normaler Objektinstanziierung?&lt;/li&gt;
&lt;li&gt;Wie unterscheidet sich das Factory Method Pattern vom Singleton Pattern bezüglich der Objekt-Erzeugung?&lt;/li&gt;
&lt;li&gt;Nenne zwei wesentliche Merkmale des Observer Patterns.&lt;/li&gt;
&lt;li&gt;Beschreibe den Unterschied zwischen dem Observer Pattern und dem Strategy Pattern.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Design Patterns stellen wiederverwendbare Lösungsvorlagen dar, die helfen, wiederkehrende Probleme in der Softwareentwicklung zu meistern und den Code flexibel sowie wartbar zu gestalten.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Creational Patterns&lt;/strong&gt; beschäftigen sich mit dem Erzeugen von Objekten&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Singleton:&lt;/strong&gt; Sorgt für genau eine Instanz einer Klasse mit globalem Zugriff.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Factory Method:&lt;/strong&gt; Erzeugt Objekte, ohne deren konkrete Klasse explizit nennen zu müssen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Structural Patterns&lt;/strong&gt; beschreiben die Komposition von Klassen und Objekten &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Behavioral Patterns&lt;/strong&gt; modellieren die Interaktion zwischenObjekten und deren Verhalten &lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Observer:&lt;/strong&gt; Ermöglicht die automatische Benachrichtigung registrierter Observer bei Zustandsänderungen eines Subjekts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strategy:&lt;/strong&gt; Kapselt unterschiedliche Algorithmen, so dass zur Laufzeit flexibel zwischen ihnen gewählt werden kann.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;"></unicode>
              <string role="key" value="exe.engine.field.Field.persistenceVersion"></string>
              <int value="4"></int>
              <string role="key" value="exe.engine.field.FieldWithResources.persistenceVersion"></string>
              <int value="2"></int>
              <string role="key" value="exe.engine.field.TextAreaField.persistenceVersion"></string>
              <int value="3"></int>
              <string role="key" value="htmlTag"></string>
              <string value="div"></string>
              <string role="key" value="images"></string>
              <instance class="exe.engine.galleryidevice.GalleryImages">
               <dictionary>
                <string role="key" value=".listitems"></string>
                <list></list>
                <string role="key" value="idevice"></string>
                <reference key="48"></reference>
               </dictionary>
              </instance>
              <string role="key" value="intlinks_to_anchors"></string>
              <dictionary></dictionary>
              <string role="key" value="nextImageId"></string>
              <int value="0"></int>
              <string role="key" value="parentNode"></string>
              <reference key="49"></reference>
             </dictionary>
            </instance>
           </list>
           <string role="key" value="icon"></string>
           <unicode value=""></unicode>
           <string role="key" value="id"></string>
           <unicode value="6"></unicode>
           <string role="key" value="ideviceCategory"></string>
           <unicode value="Text and Tasks"></unicode>
           <string role="key" value="lastIdevice"></string>
           <bool value="0"></bool>
           <string role="key" value="nextFieldId"></string>
           <int value="3"></int>
           <string role="key" value="originalicon"></string>
           <string value=""></string>
           <string role="key" value="parentNode"></string>
           <reference key="49"></reference>
           <string role="key" value="systemResources"></string>
           <list></list>
           <string role="key" value="undo"></string>
           <bool value="1"></bool>
           <string role="key" value="userResources"></string>
           <list></list>
           <string role="key" value="version"></string>
           <int value="0"></int>
          </dictionary>
         </instance>
        </list>
        <string role="key" value="_id"></string>
        <unicode value="6"></unicode>
        <string role="key" value="_package"></string>
        <reference key="4"></reference>
        <string role="key" value="anchor_fields"></string>
        <list></list>
        <string role="key" value="exe.engine.node.Node.persistenceVersion"></string>
        <int value="2"></int>
        <string role="key" value="exportType"></string>
        <string value="website"></string>
        <string role="key" value="last_full_node_path"></string>
        <string value="exe-node:Objektorientierte%20Programmierung:Design%20Patterns"></string>
        <string role="key" value="parent"></string>
        <reference key="3"></reference>
        <string role="key" value="top_anchors_linked_from_fields"></string>
        <list></list>
        <string role="key" value="children"></string>
        <list></list>
       </dictionary>
      </instance>
     </list>
    </dictionary>
   </instance>
   <unicode role="key" value="11"></unicode>
   <reference key="21"></reference>
   <unicode role="key" value="15"></unicode>
   <reference key="43"></reference>
   <unicode role="key" value="16"></unicode>
   <reference key="22"></reference>
   <unicode role="key" value="17"></unicode>
   <reference key="31"></reference>
   <unicode role="key" value="19"></unicode>
   <reference key="33"></reference>
   <unicode role="key" value="2"></unicode>
   <reference key="16"></reference>
   <unicode role="key" value="21"></unicode>
   <reference key="40"></reference>
   <unicode role="key" value="22"></unicode>
   <reference key="44"></reference>
   <unicode role="key" value="3"></unicode>
   <reference key="9"></reference>
   <unicode role="key" value="4"></unicode>
   <reference key="32"></reference>
   <unicode role="key" value="5"></unicode>
   <reference key="17"></reference>
   <unicode role="key" value="6"></unicode>
   <reference key="49"></reference>
   <unicode role="key" value="7"></unicode>
   <reference key="20"></reference>
   <unicode role="key" value="8"></unicode>
   <reference key="39"></reference>
  </dictionary>
  <string role="key" value="_objectives"></string>
  <unicode value=""></unicode>
  <string role="key" value="_preknowledge"></string>
  <unicode value=""></unicode>
  <string role="key" value="_templateFile"></string>
  <string value="Base"></string>
  <string role="key" value="anchor_nodes"></string>
  <list>
   <reference key="20"></reference>
   <reference key="17"></reference>
   <reference key="9"></reference>
   <reference key="21"></reference>
   <reference key="43"></reference>
   <reference key="31"></reference>
   <reference key="32"></reference>
   <reference key="39"></reference>
  </list>
  <string role="key" value="backgroundImgTile"></string>
  <bool value="0"></bool>
  <string role="key" value="currentNode"></string>
  <reference key="22"></reference>
  <string role="key" value="dublinCore"></string>
  <instance class="exe.engine.package.DublinCore">
   <dictionary>
    <string role="key" value="contributors"></string>
    <unicode value=""></unicode>
    <string role="key" value="coverage"></string>
    <unicode value=""></unicode>
    <string role="key" value="creator"></string>
    <unicode value="Jacqueline Rähse"></unicode>
    <string role="key" value="date"></string>
    <unicode value=""></unicode>
    <string role="key" value="description"></string>
    <unicode value="Das Skript zur Lehrveranstaltung Objektorientierte Programmierung im Studiengang Medieningenieur an der Fachhochschule Kiel"></unicode>
    <string role="key" value="format"></string>
    <unicode value=""></unicode>
    <string role="key" value="identifier"></string>
    <unicode value="4a7d755e-34a5-410a-a7d4-601881136623"></unicode>
    <string role="key" value="language"></string>
    <unicode value="de"></unicode>
    <string role="key" value="publisher"></string>
    <unicode value=""></unicode>
    <string role="key" value="relation"></string>
    <unicode value=""></unicode>
    <string role="key" value="rights"></string>
    <unicode value=""></unicode>
    <string role="key" value="source"></string>
    <unicode value=""></unicode>
    <string role="key" value="subject"></string>
    <unicode value=""></unicode>
    <string role="key" value="title"></string>
    <unicode value="Objektorientierte Programmierung Skript"></unicode>
    <string role="key" value="type"></string>
    <unicode value=""></unicode>
   </dictionary>
  </instance>
  <string role="key" value="exe.engine.package.Package.persistenceVersion"></string>
  <int value="16"></int>
  <string role="key" value="exportMetadataType"></string>
  <string value="LOMES"></string>
  <string role="key" value="exportSource"></string>
  <bool value="1"></bool>
  <string role="key" value="footer"></string>
  <string value=""></string>
  <string role="key" value="isLoading"></string>
  <bool value="0"></bool>
  <string role="key" value="license"></string>
  <unicode value="creative commons: attribution - share alike 4.0"></unicode>
  <string role="key" value="lom"></string>
  <instance class="exe.engine.lom.lomsubs.lomSub">
   <dictionary>
    <string role="key" value="__index__"></string>
    <dictionary></dictionary>
    <string role="key" value="__oldchild__"></string>
    <none></none>
    <string role="key" value="annotation"></string>
    <list></list>
    <string role="key" value="classification"></string>
    <list></list>
    <string role="key" value="educational"></string>
    <list>
     <instance class="exe.engine.lom.lomsubs.educationalSub">
      <dictionary>
       <string role="key" value="cognitiveProcess"></string>
       <list></list>
       <string role="key" value="context"></string>
       <list></list>
       <string role="key" value="description"></string>
       <list></list>
       <string role="key" value="difficulty"></string>
       <none></none>
       <string role="key" value="intendedEndUserRole"></string>
       <list></list>
       <string role="key" value="interactivityLevel"></string>
       <none></none>
       <string role="key" value="interactivityType"></string>
       <none></none>
       <string role="key" value="language"></string>
       <list>
        <instance class="exe.engine.lom.lomsubs.LanguageIdSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="valueOf_"></string>
          <string value="de"></string>
         </dictionary>
        </instance>
       </list>
       <string role="key" value="learningResourceType"></string>
       <list></list>
       <string role="key" value="semanticDensity"></string>
       <none></none>
       <string role="key" value="typicalAgeRange"></string>
       <list></list>
       <string role="key" value="typicalLearningTime"></string>
       <none></none>
      </dictionary>
     </instance>
    </list>
    <string role="key" value="general"></string>
    <instance class="exe.engine.lom.lomsubs.generalSub">
     <dictionary>
      <string role="key" value="aggregationLevel"></string>
      <instance class="exe.engine.lom.lomsubs.aggregationLevelSub">
       <dictionary>
        <string role="key" value="extensiontype_"></string>
        <none></none>
        <string role="key" value="source"></string>
        <instance class="exe.engine.lom.lomsubs.sourceValueSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="string"></string>
          <list></list>
          <string role="key" value="uniqueElementName"></string>
          <string value="source"></string>
          <string role="key" value="valueOf_"></string>
          <string value="LOMv1.0"></string>
         </dictionary>
        </instance>
        <string role="key" value="uniqueElementName"></string>
        <string value="aggregationLevel"></string>
        <string role="key" value="value"></string>
        <instance class="exe.engine.lom.lomsubs.aggregationLevelValueSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="source"></string>
          <none></none>
          <string role="key" value="uniqueElementName"></string>
          <string value="value"></string>
          <string role="key" value="value"></string>
          <none></none>
          <string role="key" value="valueOf_"></string>
          <string value="2"></string>
         </dictionary>
        </instance>
       </dictionary>
      </instance>
      <string role="key" value="coverage"></string>
      <list></list>
      <string role="key" value="description"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.descriptionSub">
        <dictionary>
         <string role="key" value="extensiontype_"></string>
         <none></none>
         <string role="key" value="string"></string>
         <list>
          <instance class="exe.engine.lom.lomsubs.LangStringSub">
           <dictionary>
            <string role="key" value="language"></string>
            <string value="de"></string>
            <string role="key" value="valueOf_"></string>
            <string value="Das Skript zur Lehrveranstaltung Objektorientierte Programmierung im Studiengang Medieningenieur an der Fachhochschule Kiel"></string>
           </dictionary>
          </instance>
         </list>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="identifier"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.identifierSub">
        <dictionary>
         <string role="key" value="catalog"></string>
         <instance class="exe.engine.lom.lomsubs.catalogSub">
          <dictionary>
           <string role="key" value="uniqueElementName"></string>
           <string value="catalog"></string>
           <string role="key" value="valueOf_"></string>
           <unicode value="My Catalog"></unicode>
          </dictionary>
         </instance>
         <string role="key" value="entry"></string>
         <instance class="exe.engine.lom.lomsubs.entrySub">
          <dictionary>
           <string role="key" value="uniqueElementName"></string>
           <string value="entry"></string>
           <string role="key" value="valueOf_"></string>
           <unicode value="4a7d755e-34a5-410a-a7d4-601881136623"></unicode>
          </dictionary>
         </instance>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="keyword"></string>
      <list></list>
      <string role="key" value="language"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.LanguageIdSub">
        <dictionary>
         <string role="key" value="extensiontype_"></string>
         <none></none>
         <string role="key" value="valueOf_"></string>
         <string value="de"></string>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="structure"></string>
      <none></none>
      <string role="key" value="title"></string>
      <instance class="exe.engine.lom.lomsubs.titleSub">
       <dictionary>
        <string role="key" value="extensiontype_"></string>
        <none></none>
        <string role="key" value="string"></string>
        <list>
         <instance class="exe.engine.lom.lomsubs.LangStringSub">
          <dictionary>
           <string role="key" value="language"></string>
           <string value="de"></string>
           <string role="key" value="valueOf_"></string>
           <string value="Objektorientierte Programmierung Skript"></string>
          </dictionary>
         </instance>
        </list>
        <string role="key" value="uniqueElementName"></string>
        <none></none>
       </dictionary>
      </instance>
      <string role="key" value="uniqueElementName"></string>
      <string value="general"></string>
     </dictionary>
    </instance>
    <string role="key" value="lifeCycle"></string>
    <instance class="exe.engine.lom.lomsubs.lifeCycleSub">
     <dictionary>
      <string role="key" value="contribute"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.contributeSub">
        <dictionary>
         <string role="key" value="date"></string>
         <instance class="exe.engine.lom.lomsubs.dateSub">
          <dictionary>
           <string role="key" value="dateTime"></string>
           <instance class="exe.engine.lom.lomsubs.DateTimeValueSub">
            <dictionary>
             <string role="key" value="uniqueElementName"></string>
             <string value="dateTime"></string>
             <string role="key" value="valueOf_"></string>
             <string value="2025-01-28T12:09:36.00+01:00"></string>
            </dictionary>
           </instance>
           <string role="key" value="description"></string>
           <instance class="exe.engine.lom.lomsubs.LanguageStringSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="string"></string>
             <list>
              <instance class="exe.engine.lom.lomsubs.LangStringSub">
               <dictionary>
                <string role="key" value="language"></string>
                <string value="de"></string>
                <string role="key" value="valueOf_"></string>
                <string value="Erstellungsdatum des Metadatenschemas"></string>
               </dictionary>
              </instance>
             </list>
            </dictionary>
           </instance>
           <string role="key" value="extensiontype_"></string>
           <none></none>
           <string role="key" value="uniqueElementName"></string>
           <none></none>
           <string role="key" value="valueOf_"></string>
           <none></none>
          </dictionary>
         </instance>
         <string role="key" value="entity"></string>
         <list>
          <instance class="exe.engine.lom.lomsubs.entitySub">
           <dictionary>
            <string role="key" value="extensiontype_"></string>
            <none></none>
            <string role="key" value="valueOf_"></string>
            <string value="BEGIN:VCARD VERSION:3.0 FN:Jacqueline R\xc3\xa4hse EMAIL;TYPE=INTERNET: ORG: END:VCARD"></string>
           </dictionary>
          </instance>
         </list>
         <string role="key" value="role"></string>
         <instance class="exe.engine.lom.lomsubs.roleSub">
          <dictionary>
           <string role="key" value="extensiontype_"></string>
           <none></none>
           <string role="key" value="source"></string>
           <instance class="exe.engine.lom.lomsubs.sourceValueSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="string"></string>
             <list></list>
             <string role="key" value="uniqueElementName"></string>
             <string value="source"></string>
             <string role="key" value="valueOf_"></string>
             <string value="LOMv1.0"></string>
            </dictionary>
           </instance>
           <string role="key" value="uniqueElementName"></string>
           <string value="role"></string>
           <string role="key" value="value"></string>
           <instance class="exe.engine.lom.lomsubs.roleValueSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="source"></string>
             <none></none>
             <string role="key" value="uniqueElementName"></string>
             <string value="value"></string>
             <string role="key" value="value"></string>
             <none></none>
             <string role="key" value="valueOf_"></string>
             <string value="author"></string>
            </dictionary>
           </instance>
          </dictionary>
         </instance>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="status"></string>
      <none></none>
      <string role="key" value="uniqueElementName"></string>
      <none></none>
      <string role="key" value="version"></string>
      <none></none>
     </dictionary>
    </instance>
    <string role="key" value="metaMetadata"></string>
    <instance class="exe.engine.lom.lomsubs.metaMetadataSub">
     <dictionary>
      <string role="key" value="contribute"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.contributeMetaSub">
        <dictionary>
         <string role="key" value="date"></string>
         <instance class="exe.engine.lom.lomsubs.dateSub">
          <dictionary>
           <string role="key" value="dateTime"></string>
           <instance class="exe.engine.lom.lomsubs.DateTimeValueSub">
            <dictionary>
             <string role="key" value="uniqueElementName"></string>
             <string value="dateTime"></string>
             <string role="key" value="valueOf_"></string>
             <string value="2025-01-28T12:05:28.00+01:00"></string>
            </dictionary>
           </instance>
           <string role="key" value="description"></string>
           <instance class="exe.engine.lom.lomsubs.LanguageStringSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="string"></string>
             <list>
              <instance class="exe.engine.lom.lomsubs.LangStringSub">
               <dictionary>
                <string role="key" value="language"></string>
                <string value="de"></string>
                <string role="key" value="valueOf_"></string>
                <string value="Erstellungsdatum des Metadatenschemas"></string>
               </dictionary>
              </instance>
             </list>
            </dictionary>
           </instance>
           <string role="key" value="extensiontype_"></string>
           <none></none>
           <string role="key" value="uniqueElementName"></string>
           <none></none>
           <string role="key" value="valueOf_"></string>
           <none></none>
          </dictionary>
         </instance>
         <string role="key" value="entity"></string>
         <list>
          <instance class="exe.engine.lom.lomsubs.entitySub">
           <dictionary>
            <string role="key" value="extensiontype_"></string>
            <none></none>
            <string role="key" value="valueOf_"></string>
            <string value="BEGIN:VCARD VERSION:3.0 FN:Jacqueline R\xc3\xa4hse EMAIL;TYPE=INTERNET: ORG: END:VCARD"></string>
           </dictionary>
          </instance>
         </list>
         <string role="key" value="role"></string>
         <instance class="exe.engine.lom.lomsubs.roleSub">
          <dictionary>
           <string role="key" value="extensiontype_"></string>
           <none></none>
           <string role="key" value="source"></string>
           <instance class="exe.engine.lom.lomsubs.sourceValueSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="string"></string>
             <list></list>
             <string role="key" value="uniqueElementName"></string>
             <string value="source"></string>
             <string role="key" value="valueOf_"></string>
             <string value="LOMv1.0"></string>
            </dictionary>
           </instance>
           <string role="key" value="uniqueElementName"></string>
           <string value="role"></string>
           <string role="key" value="value"></string>
           <instance class="exe.engine.lom.lomsubs.roleValueSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="source"></string>
             <none></none>
             <string role="key" value="uniqueElementName"></string>
             <string value="value"></string>
             <string role="key" value="value"></string>
             <none></none>
             <string role="key" value="valueOf_"></string>
             <string value="creator"></string>
            </dictionary>
           </instance>
          </dictionary>
         </instance>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="identifier"></string>
      <list></list>
      <string role="key" value="language"></string>
      <instance class="exe.engine.lom.lomsubs.LanguageIdSub">
       <dictionary>
        <string role="key" value="extensiontype_"></string>
        <none></none>
        <string role="key" value="valueOf_"></string>
        <string value="de"></string>
       </dictionary>
      </instance>
      <string role="key" value="metadataSchema"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.metadataSchemaSub">
        <dictionary>
         <string role="key" value="valueOf_"></string>
         <string value="LOMv1.0"></string>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="uniqueElementName"></string>
      <string value="metaMetadata"></string>
     </dictionary>
    </instance>
    <string role="key" value="relation"></string>
    <list></list>
    <string role="key" value="rights"></string>
    <instance class="exe.engine.lom.lomsubs.rightsSub">
     <dictionary>
      <string role="key" value="access"></string>
      <none></none>
      <string role="key" value="copyrightAndOtherRestrictions"></string>
      <instance class="exe.engine.lom.lomsubs.copyrightAndOtherRestrictionsSub">
       <dictionary>
        <string role="key" value="extensiontype_"></string>
        <none></none>
        <string role="key" value="source"></string>
        <instance class="exe.engine.lom.lomsubs.sourceValueSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="string"></string>
          <list></list>
          <string role="key" value="uniqueElementName"></string>
          <string value="source"></string>
          <string role="key" value="valueOf_"></string>
          <string value="LOMv1.0"></string>
         </dictionary>
        </instance>
        <string role="key" value="uniqueElementName"></string>
        <string value="copyrightAndOtherRestrictions"></string>
        <string role="key" value="value"></string>
        <instance class="exe.engine.lom.lomsubs.copyrightAndOtherRestrictionsValueSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="source"></string>
          <none></none>
          <string role="key" value="uniqueElementName"></string>
          <string value="value"></string>
          <string role="key" value="value"></string>
          <none></none>
          <string role="key" value="valueOf_"></string>
          <string value="yes"></string>
         </dictionary>
        </instance>
       </dictionary>
      </instance>
      <string role="key" value="cost"></string>
      <none></none>
      <string role="key" value="description"></string>
      <none></none>
      <string role="key" value="uniqueElementName"></string>
      <none></none>
     </dictionary>
    </instance>
    <string role="key" value="technical"></string>
    <none></none>
   </dictionary>
  </instance>
  <string role="key" value="lomEs"></string>
  <instance class="exe.engine.lom.lomsubs.lomSub">
   <dictionary>
    <string role="key" value="__index__"></string>
    <dictionary></dictionary>
    <string role="key" value="__oldchild__"></string>
    <none></none>
    <string role="key" value="annotation"></string>
    <list></list>
    <string role="key" value="classification"></string>
    <list></list>
    <string role="key" value="educational"></string>
    <list>
     <instance class="exe.engine.lom.lomsubs.educationalSub">
      <dictionary>
       <string role="key" value="cognitiveProcess"></string>
       <list></list>
       <string role="key" value="context"></string>
       <list></list>
       <string role="key" value="description"></string>
       <list></list>
       <string role="key" value="difficulty"></string>
       <none></none>
       <string role="key" value="intendedEndUserRole"></string>
       <list></list>
       <string role="key" value="interactivityLevel"></string>
       <none></none>
       <string role="key" value="interactivityType"></string>
       <none></none>
       <string role="key" value="language"></string>
       <list>
        <instance class="exe.engine.lom.lomsubs.LanguageIdSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="valueOf_"></string>
          <string value="de"></string>
         </dictionary>
        </instance>
       </list>
       <string role="key" value="learningResourceType"></string>
       <list></list>
       <string role="key" value="semanticDensity"></string>
       <none></none>
       <string role="key" value="typicalAgeRange"></string>
       <list></list>
       <string role="key" value="typicalLearningTime"></string>
       <none></none>
      </dictionary>
     </instance>
    </list>
    <string role="key" value="general"></string>
    <instance class="exe.engine.lom.lomsubs.generalSub">
     <dictionary>
      <string role="key" value="aggregationLevel"></string>
      <instance class="exe.engine.lom.lomsubs.aggregationLevelSub">
       <dictionary>
        <string role="key" value="extensiontype_"></string>
        <none></none>
        <string role="key" value="source"></string>
        <instance class="exe.engine.lom.lomsubs.sourceValueSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="string"></string>
          <list></list>
          <string role="key" value="uniqueElementName"></string>
          <string value="source"></string>
          <string role="key" value="valueOf_"></string>
          <string value="LOM-ESv1.0"></string>
         </dictionary>
        </instance>
        <string role="key" value="uniqueElementName"></string>
        <string value="aggregationLevel"></string>
        <string role="key" value="value"></string>
        <instance class="exe.engine.lom.lomsubs.aggregationLevelValueSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="source"></string>
          <none></none>
          <string role="key" value="uniqueElementName"></string>
          <string value="value"></string>
          <string role="key" value="value"></string>
          <none></none>
          <string role="key" value="valueOf_"></string>
          <string value="2"></string>
         </dictionary>
        </instance>
       </dictionary>
      </instance>
      <string role="key" value="coverage"></string>
      <list></list>
      <string role="key" value="description"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.descriptionSub">
        <dictionary>
         <string role="key" value="extensiontype_"></string>
         <none></none>
         <string role="key" value="string"></string>
         <list>
          <instance class="exe.engine.lom.lomsubs.LangStringSub">
           <dictionary>
            <string role="key" value="language"></string>
            <string value="de"></string>
            <string role="key" value="valueOf_"></string>
            <string value="Das Skript zur Lehrveranstaltung Objektorientierte Programmierung im Studiengang Medieningenieur an der Fachhochschule Kiel"></string>
           </dictionary>
          </instance>
         </list>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="identifier"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.identifierSub">
        <dictionary>
         <string role="key" value="catalog"></string>
         <instance class="exe.engine.lom.lomsubs.catalogSub">
          <dictionary>
           <string role="key" value="uniqueElementName"></string>
           <string value="catalog"></string>
           <string role="key" value="valueOf_"></string>
           <unicode value="My Catalog"></unicode>
          </dictionary>
         </instance>
         <string role="key" value="entry"></string>
         <instance class="exe.engine.lom.lomsubs.entrySub">
          <dictionary>
           <string role="key" value="uniqueElementName"></string>
           <string value="entry"></string>
           <string role="key" value="valueOf_"></string>
           <unicode value="4a7d755e-34a5-410a-a7d4-601881136623"></unicode>
          </dictionary>
         </instance>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="keyword"></string>
      <list></list>
      <string role="key" value="language"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.LanguageIdSub">
        <dictionary>
         <string role="key" value="extensiontype_"></string>
         <none></none>
         <string role="key" value="valueOf_"></string>
         <string value="de"></string>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="structure"></string>
      <none></none>
      <string role="key" value="title"></string>
      <instance class="exe.engine.lom.lomsubs.titleSub">
       <dictionary>
        <string role="key" value="extensiontype_"></string>
        <none></none>
        <string role="key" value="string"></string>
        <list>
         <instance class="exe.engine.lom.lomsubs.LangStringSub">
          <dictionary>
           <string role="key" value="language"></string>
           <string value="de"></string>
           <string role="key" value="valueOf_"></string>
           <string value="Objektorientierte Programmierung Skript"></string>
          </dictionary>
         </instance>
        </list>
        <string role="key" value="uniqueElementName"></string>
        <none></none>
       </dictionary>
      </instance>
      <string role="key" value="uniqueElementName"></string>
      <string value="general"></string>
     </dictionary>
    </instance>
    <string role="key" value="lifeCycle"></string>
    <instance class="exe.engine.lom.lomsubs.lifeCycleSub">
     <dictionary>
      <string role="key" value="contribute"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.contributeSub">
        <dictionary>
         <string role="key" value="date"></string>
         <instance class="exe.engine.lom.lomsubs.dateSub">
          <dictionary>
           <string role="key" value="dateTime"></string>
           <instance class="exe.engine.lom.lomsubs.DateTimeValueSub">
            <dictionary>
             <string role="key" value="uniqueElementName"></string>
             <string value="dateTime"></string>
             <string role="key" value="valueOf_"></string>
             <string value="2025-01-28T12:09:36.00+01:00"></string>
            </dictionary>
           </instance>
           <string role="key" value="description"></string>
           <instance class="exe.engine.lom.lomsubs.LanguageStringSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="string"></string>
             <list>
              <instance class="exe.engine.lom.lomsubs.LangStringSub">
               <dictionary>
                <string role="key" value="language"></string>
                <string value="de"></string>
                <string role="key" value="valueOf_"></string>
                <string value="Erstellungsdatum des Metadatenschemas"></string>
               </dictionary>
              </instance>
             </list>
            </dictionary>
           </instance>
           <string role="key" value="extensiontype_"></string>
           <none></none>
           <string role="key" value="uniqueElementName"></string>
           <none></none>
           <string role="key" value="valueOf_"></string>
           <none></none>
          </dictionary>
         </instance>
         <string role="key" value="entity"></string>
         <list>
          <instance class="exe.engine.lom.lomsubs.entitySub">
           <dictionary>
            <string role="key" value="extensiontype_"></string>
            <none></none>
            <string role="key" value="valueOf_"></string>
            <string value="BEGIN:VCARD VERSION:3.0 FN:Jacqueline R\xc3\xa4hse EMAIL;TYPE=INTERNET: ORG: END:VCARD"></string>
           </dictionary>
          </instance>
         </list>
         <string role="key" value="role"></string>
         <instance class="exe.engine.lom.lomsubs.roleSub">
          <dictionary>
           <string role="key" value="extensiontype_"></string>
           <none></none>
           <string role="key" value="source"></string>
           <instance class="exe.engine.lom.lomsubs.sourceValueSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="string"></string>
             <list></list>
             <string role="key" value="uniqueElementName"></string>
             <string value="source"></string>
             <string role="key" value="valueOf_"></string>
             <string value="LOM-ESv1.0"></string>
            </dictionary>
           </instance>
           <string role="key" value="uniqueElementName"></string>
           <string value="role"></string>
           <string role="key" value="value"></string>
           <instance class="exe.engine.lom.lomsubs.roleValueSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="source"></string>
             <none></none>
             <string role="key" value="uniqueElementName"></string>
             <string value="value"></string>
             <string role="key" value="value"></string>
             <none></none>
             <string role="key" value="valueOf_"></string>
             <string value="author"></string>
            </dictionary>
           </instance>
          </dictionary>
         </instance>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="status"></string>
      <none></none>
      <string role="key" value="uniqueElementName"></string>
      <none></none>
      <string role="key" value="version"></string>
      <none></none>
     </dictionary>
    </instance>
    <string role="key" value="metaMetadata"></string>
    <instance class="exe.engine.lom.lomsubs.metaMetadataSub">
     <dictionary>
      <string role="key" value="contribute"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.contributeMetaSub">
        <dictionary>
         <string role="key" value="date"></string>
         <instance class="exe.engine.lom.lomsubs.dateSub">
          <dictionary>
           <string role="key" value="dateTime"></string>
           <instance class="exe.engine.lom.lomsubs.DateTimeValueSub">
            <dictionary>
             <string role="key" value="uniqueElementName"></string>
             <string value="dateTime"></string>
             <string role="key" value="valueOf_"></string>
             <string value="2025-01-28T12:05:28.00+01:00"></string>
            </dictionary>
           </instance>
           <string role="key" value="description"></string>
           <instance class="exe.engine.lom.lomsubs.LanguageStringSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="string"></string>
             <list>
              <instance class="exe.engine.lom.lomsubs.LangStringSub">
               <dictionary>
                <string role="key" value="language"></string>
                <string value="de"></string>
                <string role="key" value="valueOf_"></string>
                <string value="Erstellungsdatum des Metadatenschemas"></string>
               </dictionary>
              </instance>
             </list>
            </dictionary>
           </instance>
           <string role="key" value="extensiontype_"></string>
           <none></none>
           <string role="key" value="uniqueElementName"></string>
           <none></none>
           <string role="key" value="valueOf_"></string>
           <none></none>
          </dictionary>
         </instance>
         <string role="key" value="entity"></string>
         <list>
          <instance class="exe.engine.lom.lomsubs.entitySub">
           <dictionary>
            <string role="key" value="extensiontype_"></string>
            <none></none>
            <string role="key" value="valueOf_"></string>
            <string value="BEGIN:VCARD VERSION:3.0 FN:Jacqueline R\xc3\xa4hse EMAIL;TYPE=INTERNET: ORG: END:VCARD"></string>
           </dictionary>
          </instance>
         </list>
         <string role="key" value="role"></string>
         <instance class="exe.engine.lom.lomsubs.roleSub">
          <dictionary>
           <string role="key" value="extensiontype_"></string>
           <none></none>
           <string role="key" value="source"></string>
           <instance class="exe.engine.lom.lomsubs.sourceValueSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="string"></string>
             <list></list>
             <string role="key" value="uniqueElementName"></string>
             <string value="source"></string>
             <string role="key" value="valueOf_"></string>
             <string value="LOM-ESv1.0"></string>
            </dictionary>
           </instance>
           <string role="key" value="uniqueElementName"></string>
           <string value="role"></string>
           <string role="key" value="value"></string>
           <instance class="exe.engine.lom.lomsubs.roleValueSub">
            <dictionary>
             <string role="key" value="extensiontype_"></string>
             <none></none>
             <string role="key" value="source"></string>
             <none></none>
             <string role="key" value="uniqueElementName"></string>
             <string value="value"></string>
             <string role="key" value="value"></string>
             <none></none>
             <string role="key" value="valueOf_"></string>
             <string value="creator"></string>
            </dictionary>
           </instance>
          </dictionary>
         </instance>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="identifier"></string>
      <list></list>
      <string role="key" value="language"></string>
      <instance class="exe.engine.lom.lomsubs.LanguageIdSub">
       <dictionary>
        <string role="key" value="extensiontype_"></string>
        <none></none>
        <string role="key" value="valueOf_"></string>
        <string value="de"></string>
       </dictionary>
      </instance>
      <string role="key" value="metadataSchema"></string>
      <list>
       <instance class="exe.engine.lom.lomsubs.metadataSchemaSub">
        <dictionary>
         <string role="key" value="valueOf_"></string>
         <string value="LOM-ESv1.0"></string>
        </dictionary>
       </instance>
      </list>
      <string role="key" value="uniqueElementName"></string>
      <string value="metaMetadata"></string>
     </dictionary>
    </instance>
    <string role="key" value="relation"></string>
    <list></list>
    <string role="key" value="rights"></string>
    <instance class="exe.engine.lom.lomsubs.rightsSub">
     <dictionary>
      <string role="key" value="access"></string>
      <instance class="exe.engine.lom.lomsubs.accessSub">
       <dictionary>
        <string role="key" value="accessType"></string>
        <instance class="exe.engine.lom.lomsubs.accessTypeSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="source"></string>
          <instance class="exe.engine.lom.lomsubs.sourceValueSub">
           <dictionary>
            <string role="key" value="extensiontype_"></string>
            <none></none>
            <string role="key" value="string"></string>
            <list></list>
            <string role="key" value="uniqueElementName"></string>
            <string value="source"></string>
            <string role="key" value="valueOf_"></string>
            <string value="LOM-ESv1.0"></string>
           </dictionary>
          </instance>
          <string role="key" value="uniqueElementName"></string>
          <string value="accessType"></string>
          <string role="key" value="value"></string>
          <instance class="exe.engine.lom.lomsubs.accessTypeValueSub">
           <dictionary>
            <string role="key" value="extensiontype_"></string>
            <none></none>
            <string role="key" value="source"></string>
            <none></none>
            <string role="key" value="uniqueElementName"></string>
            <string value="value"></string>
            <string role="key" value="value"></string>
            <none></none>
            <string role="key" value="valueOf_"></string>
            <string value="universal"></string>
           </dictionary>
          </instance>
         </dictionary>
        </instance>
        <string role="key" value="description"></string>
        <instance class="exe.engine.lom.lomsubs.LanguageStringSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="string"></string>
          <list>
           <instance class="exe.engine.lom.lomsubs.LangStringSub">
            <dictionary>
             <string role="key" value="language"></string>
             <string value="en"></string>
             <string role="key" value="valueOf_"></string>
             <unicode value="Default"></unicode>
            </dictionary>
           </instance>
          </list>
         </dictionary>
        </instance>
        <string role="key" value="uniqueElementName"></string>
        <string value="access"></string>
       </dictionary>
      </instance>
      <string role="key" value="copyrightAndOtherRestrictions"></string>
      <instance class="exe.engine.lom.lomsubs.copyrightAndOtherRestrictionsSub">
       <dictionary>
        <string role="key" value="extensiontype_"></string>
        <none></none>
        <string role="key" value="source"></string>
        <instance class="exe.engine.lom.lomsubs.sourceValueSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="string"></string>
          <list></list>
          <string role="key" value="uniqueElementName"></string>
          <string value="source"></string>
          <string role="key" value="valueOf_"></string>
          <string value="LOM-ESv1.0"></string>
         </dictionary>
        </instance>
        <string role="key" value="uniqueElementName"></string>
        <string value="copyrightAndOtherRestrictions"></string>
        <string role="key" value="value"></string>
        <instance class="exe.engine.lom.lomsubs.copyrightAndOtherRestrictionsValueSub">
         <dictionary>
          <string role="key" value="extensiontype_"></string>
          <none></none>
          <string role="key" value="source"></string>
          <none></none>
          <string role="key" value="uniqueElementName"></string>
          <string value="value"></string>
          <string role="key" value="value"></string>
          <none></none>
          <string role="key" value="valueOf_"></string>
          <string value="creative commons: attribution - share alike"></string>
         </dictionary>
        </instance>
       </dictionary>
      </instance>
      <string role="key" value="cost"></string>
      <none></none>
      <string role="key" value="description"></string>
      <none></none>
      <string role="key" value="uniqueElementName"></string>
      <string value="rights"></string>
     </dictionary>
    </instance>
    <string role="key" value="technical"></string>
    <none></none>
   </dictionary>
  </instance>
  <string role="key" value="mxmlforcemediaonly"></string>
  <bool value="0"></bool>
  <string role="key" value="mxmlheight"></string>
  <string value=""></string>
  <string role="key" value="mxmlprofilelist"></string>
  <string value=""></string>
  <string role="key" value="mxmlwidth"></string>
  <string value=""></string>
  <string role="key" value="release"></string>
  <string value="2.9"></string>
  <string role="key" value="resources"></string>
  <dictionary>
   <string role="key" value="4f7a7bb81fd5f475baa1dc212cbd4a84"></string>
   <list>
    <reference key="34"></reference>
   </list>
   <string role="key" value="6223868330388650cebfa7b04d03fdc2"></string>
   <list>
    <reference key="45"></reference>
   </list>
   <string role="key" value="749e23d9d9de65b7413b560ab94fac35"></string>
   <list>
    <reference key="46"></reference>
   </list>
   <string role="key" value="9204c0b50abec03c0414d7426fbd5a7a"></string>
   <list>
    <reference key="28"></reference>
   </list>
   <string role="key" value="bea5be8e6c5f6bb1e4149a0242b97fb7"></string>
   <list>
    <reference key="27"></reference>
   </list>
  </dictionary>
  <string role="key" value="root"></string>
  <reference key="3"></reference>
  <string role="key" value="scolinks"></string>
  <bool value="0"></bool>
  <string role="key" value="scowsinglepage"></string>
  <bool value="0"></bool>
  <string role="key" value="scowwebsite"></string>
  <bool value="0"></bool>
  <string role="key" value="style"></string>
  <unicode value="fh_kiel"></unicode>
  <string role="key" value="sugaractivityname"></string>
  <string value=""></string>
  <string role="key" value="sugarservicename"></string>
  <string value=""></string>
  <string role="key" value="tempFile"></string>
  <bool value="0"></bool>
 </dictionary>
</instance>